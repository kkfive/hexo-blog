{"title":"07JavaScript引用类型","slug":"日常学习/技术相关/大前端/JavaScript学习/基础部分/07JavaScript引用类型","date":"2020-04-08T06:01:58.000Z","updated":"2022-02-21T06:22:27.472Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/基础部分/07JavaScript引用类型.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile1/imgbed/2020/04/08/20200408194928.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/33308ab6be421d0de8b1f24e59838291.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0317853e0cc5e0b533e65dff40ad79f5.png"],"content":"<h1 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\"></a> 引用类型</h1>\n<p>在JavaScript中，变量是某个对象的属性，函数是某个对象的方法</p>\n<p>在浏览器环境里面，定义的全局变量就是window对象的属性</p>\n<h2 id=\"引用类型的分类\"><a class=\"markdownIt-Anchor\" href=\"#引用类型的分类\"></a> 引用类型的分类</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">引用类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Date 类型</td>\n<td style=\"text-align:center\">获取和设置当前日期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Math 类型</td>\n<td style=\"text-align:center\">用于数学计算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global 类型</td>\n<td style=\"text-align:center\">全局对象，提供全局属性和全局方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Array 类型</td>\n<td style=\"text-align:center\">用于有序的存储多个值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegExp 类型</td>\n<td style=\"text-align:center\">用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Error 类型</td>\n<td style=\"text-align:center\">用于匹配代码错误并提供对应提示内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function 类型</td>\n<td style=\"text-align:center\">用于定义 JavaScript 中的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object 类型</td>\n<td style=\"text-align:center\">用于定义 JavaScript 中的对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"date类型\"><a class=\"markdownIt-Anchor\" href=\"#date类型\"></a> Date类型</h2>\n<p>创建一个<code>Date</code>类型的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span>\n<span class=\"token keyword\">var</span> date3 <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>Date</code>提供<code>now()</code>方法，可以得到一个从 1970 年1月1日 00:00:00 至当前系统时间的毫秒数值。</p>\n<p>Date类型初始化时间也可以指定日期，语法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var date &#x3D; new Date(year, month [, day [, hours [, minutes [, seconds [, milliseconds]]]]])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>year 参数：表示年份的整数值。</li>\n<li>month 参数：表示月份的整数值。值范围为 0 ~ 11，表示从 1 月至 12 月。</li>\n<li>day 参数：表示一个月份中的第几天的整数值。值从 1 开始。</li>\n<li>hours 参数：表示一天中的小时数（24 小时制）。0 时表示午夜。</li>\n<li>minutes 参数：表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为 0。</li>\n<li>seconds 参数：表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为 0。</li>\n<li>milliseconds 参数：表示一个完整时间的毫秒部分的整数值。默认值为 0。</li>\n</ul>\n<p>此外关于Date类型提供的一些方法与设置方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">获取方法</th>\n<th style=\"text-align:center\">设置方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">getDate()</td>\n<td style=\"text-align:center\">setDate()</td>\n<td style=\"text-align:center\">返回 Date 对象“日期”部分数值（1 ~ 31）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getDay()</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">返回 Date 对象“星期”部分的数值（0 ~ 6）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getFullYear()</td>\n<td style=\"text-align:center\">setFullYear()</td>\n<td style=\"text-align:center\">返回 Date 对象“年份”部分的实际数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getHours()</td>\n<td style=\"text-align:center\">setHours()</td>\n<td style=\"text-align:center\">返回 Date 对象“小时”部分的数值（0 ~ 23）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMilliseconds()</td>\n<td style=\"text-align:center\">setMilliseconds()</td>\n<td style=\"text-align:center\">返回 Date 对象“毫秒”部分的数值（0 ~ 999）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMinutes()</td>\n<td style=\"text-align:center\">setMinutes()</td>\n<td style=\"text-align:center\">返回 Date 对象“分钟”部分的数值（0 ~ 59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMonth()</td>\n<td style=\"text-align:center\">setMonth()</td>\n<td style=\"text-align:center\">返回 Date 对象“月份”部分的数值（0 ~ 11）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getSeconds()</td>\n<td style=\"text-align:center\">setSeconds()</td>\n<td style=\"text-align:center\">返回 Date 对象“秒”部分的数值（0 ~ 59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getTime()</td>\n<td style=\"text-align:center\">setTime()</td>\n<td style=\"text-align:center\">返回 Date 对象与 UTC 时间 1970 年 1 月 1 日午夜之间相差的毫秒数</td>\n</tr>\n</tbody>\n</table>\n<p>在Date类型提供的方法中，可以用来做时间戳的方法有两个：</p>\n<ul>\n<li>\n<p><code>getTime()</code>方法</p>\n</li>\n<li>\n<p><code>Date.now()</code>方法</p>\n</li>\n</ul>\n<p>关于日期格式化方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">toString()</td>\n<td style=\"text-align:center\">返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toDateString()</td>\n<td style=\"text-align:center\">返回 Date 对象“日期”部分（<em>年月日</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toTimeString()</td>\n<td style=\"text-align:center\">返回 Date 对象“时间”部分（<em>时分秒</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleDateString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象“ 日期”部分（<em>年月日</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleTimeString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象“时间”部分（<em>时分秒</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toGMTString()</td>\n<td style=\"text-align:center\">基于 GMT 时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toUTCString()</td>\n<td style=\"text-align:center\">基于 UTC 时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<p>输出当前年月日</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  date<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"年\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"月\"</span> <span class=\"token operator\">+</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"日\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"math类型\"><a class=\"markdownIt-Anchor\" href=\"#math类型\"></a> Math类型</h2>\n<p>JavaScript 语言中的 Math 类型，提供了一系列有关数学常数的属性和数学计算的方法。Math 类型与 JavaScript 语言中的其他引用类型不同的是，Math 并不是一个构造函数。换句话讲，我们无法通过 Math 类型创建一个对象。</p>\n<p>Math类型的属性包括以下一些：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Math.E</code></td>\n<td style=\"text-align:center\">欧拉常数，自然对数的底数, 约等于 2.718</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LN2</code></td>\n<td style=\"text-align:center\">2 的自然对数, 约等于 0.693</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LN10</code></td>\n<td style=\"text-align:center\">10 的自然对数, 约等于 2.303</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LOG2E</code></td>\n<td style=\"text-align:center\">以 2 为底 E 的对数, 约等于 1.443</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LOG10E</code></td>\n<td style=\"text-align:center\">以 10 为底 E 的对数, 约等于 0.434</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.PI</code></td>\n<td style=\"text-align:center\">圆周率，一个圆的周长和直径之比，约等于 3.14159</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.SQRT1_2</code></td>\n<td style=\"text-align:center\">1/2 的平方根, 约等于 0.707</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.SORT2</code></td>\n<td style=\"text-align:center\">2 的平方根,约等于 1.414</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性均为只读属性，不可更改。但是如果<mark>强制修改也不会报错</mark>。</p>\n<p>这里指的不能修改指的是<code>Math.PI</code>不可修改，但是如果将其赋予一个变量，然后修改这个变量，那么值还是可以修改的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test1 <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 0.14159265358979312</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 3.141592653589793</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Math类型的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">abs(x)</td>\n<td style=\"text-align:center\">返回 x 的绝对值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exp(x)</td>\n<td style=\"text-align:center\">返回 e 的指数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log(x)</td>\n<td style=\"text-align:center\">返回数的自然对数（底为 e）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pow(x, y)</td>\n<td style=\"text-align:center\">返回 x 的 y 次幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ceil(x)</td>\n<td style=\"text-align:center\">对数进行向上取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">floor(x)</td>\n<td style=\"text-align:center\">对数进行向下取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">round(x)</td>\n<td style=\"text-align:center\">把数四舍五入为最接近的整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max(x, y)</td>\n<td style=\"text-align:center\">返回 x 和 y 中的最高值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min(x, y)</td>\n<td style=\"text-align:center\">返回 x 和 y 中的最低值</td>\n</tr>\n</tbody>\n</table>\n<p>在<code>JavaScript</code>中，生成随机数要用到的方法是<code>random()</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 得到一个 0~100 之间的随机整数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到一个1~100 之间的随机整数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">99</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 利用随机数算百分率 -> 30% 70%</span>\n<span class=\"token keyword\">var</span> precent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>precent <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"70%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"array类型\"><a class=\"markdownIt-Anchor\" href=\"#array类型\"></a> Array类型</h2>\n<h3 id=\"检测数组\"><a class=\"markdownIt-Anchor\" href=\"#检测数组\"></a> 检测数组</h3>\n<p>即检测一个变量是否为数组。</p>\n<ul>\n<li>\n<p><code>instanceof</code> 运算符</p>\n</li>\n<li>\n<p><code>Array.isArray()</code>方法</p>\n<p>支持 <code>Array.isArray()</code> 方法的浏览器有 IE9+、Firefox 4+、Safari 5+、Opera 10.5+ 和 Chrome。换句话讲，还有一些浏览器版本是不支持 <code>Array.isArray()</code> 方法的。</p>\n</li>\n<li>\n<p><code>Object.prototype.toString.call()</code>方法</p>\n<p>用于解决<code>Array.isArray()</code>在部分浏览器不支持的问题</p>\n</li>\n<li>\n<p><code>Array.prototype.isPrototypeOf()</code>方法</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"instanceof检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span> test <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Array.isArray()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"Object.prototype.toString.call()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"Array.prototype.isPrototypeOf()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile1/imgbed/2020/04/08/20200408194928.png\" alt=\"\" /></p>\n<p>从图中我们可以看到，只有<code>Object.prototype.toString.call()</code>这种方式返回的是[object Array]，其余三种方法都返回的是布尔类型。</p>\n<h3 id=\"转换方法\"><a class=\"markdownIt-Anchor\" href=\"#转换方法\"></a> 转换方法</h3>\n<ul>\n<li><code>toString()</code> 方法：将一个数组转换为字符串，数组中的元素之间使用逗号（<code>,</code>）进行分隔。</li>\n<li><code>valueOf()</code> 方法：得到当前对象的原始值。如果是 Array 的话，则得到数组对象本身。</li>\n</ul>\n<h3 id=\"进出栈方法\"><a class=\"markdownIt-Anchor\" href=\"#进出栈方法\"></a> 进出栈方法</h3>\n<ul>\n<li><code>push()</code> 方法：该方法将一个或多个数据内容添加到指定数组的末尾，并返回该数组的新长度。</li>\n<li><code>pop()</code> 方法：该方法将从指定数组的末尾删除一个数据内容，并返回被删除的数据内容。该方法会改变数组的长度。</li>\n</ul>\n<p>栈操作的是列表的末尾。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是一个字符串\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//push会将数据放到列表的末尾</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加新元素之后的数组长度为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//pop会将列表的最后一项删除</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组删除的元素为: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"队列方法\"><a class=\"markdownIt-Anchor\" href=\"#队列方法\"></a> 队列方法</h3>\n<p>队列即向列表头添加或删除数据。我们使用的方法是</p>\n<ul>\n<li>\n<p><code>unshift(x)</code>向列表头添加x</p>\n</li>\n<li>\n<p><code>shift()</code>删除列表第一项</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印[ 0, 1, 2, 3, 4 ]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印[ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"排序方法\"><a class=\"markdownIt-Anchor\" href=\"#排序方法\"></a> 排序方法</h3>\n<ul>\n<li><code>reverse()</code> 方法：该方法将数组中元素的位置进行颠倒，并将颠倒后的数组返回。</li>\n<li><code>sort()</code> 方法：该方法按照升序排列方式将数组中的元素进行重新排序，并将重新排序的数组返回。</li>\n</ul>\n<p>值得注意的是：<code>sort()</code>方法对于数字并不是按照大小排序的，而是按照第一个数字的大小排序的。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为 [ 1, 10, 2, 21, 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果我们要按照大小排序，则应传入回调函数<code>array.sort([compareFunction])</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"连接方法\"><a class=\"markdownIt-Anchor\" href=\"#连接方法\"></a> 连接方法</h3>\n<p>Aarray 提供了 <code>concat()</code> 方法用来合并两个或者多个数组。该方法不会改变原有数组，返回合并后的新数组。其语法结构如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_array <span class=\"token operator\">=</span> old_array<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> valueN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>value1…valueN 参数：与原有数组合并的数组或值。</li>\n</ul>\n<p>如下示例代码展示了使用 <code>concat()</code> 方法合并两个数组的用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"操作方法\"><a class=\"markdownIt-Anchor\" href=\"#操作方法\"></a> 操作方法</h3>\n<ul>\n<li>\n<p><code>slice()</code> 方法：该方法可以根据开始位置和结束位置从某个数组中截取指定的数据内容，并将其返回。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>\n<p>begin 参数：可选项，表示截取开始的位置（从 0 开始）。</p>\n</li>\n<li>\n<p>end 参数：可选项，表示截取结束的位置。截取的数据内容不包含 end 位置的数据内容。</p>\n</li>\n</ul>\n<p>此方法并不会影响原来的数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ant\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bison\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"camel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"duck\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elephant\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//结果为 [ 'bison', 'camel' ] [ 'ant', 'bison', 'camel', 'duck', 'elephant' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果不写end参数，则截取开始到结束的所有元素。</p>\n</li>\n<li>\n<p><code>splice()</code> 方法：该方法可以实现对某个数组的新增、修改以及删除等操作。</p>\n</li>\n</ul>\n<h4 id=\"新增-修改及删除操作\"><a class=\"markdownIt-Anchor\" href=\"#新增-修改及删除操作\"></a> 新增、修改及删除操作</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> item1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>\n<p>start 参数：表示修改数组的开始位置（从 0 开始）。</p>\n</li>\n<li>\n<p>deleteCount 参数：可选项，表示要删除数组中元素的个数。</p>\n</li>\n<li>\n<p>item1，item2，… 参数：可选项，表示从 start 指定的位置添加的元素。</p>\n</li>\n<li>\n<p>返回值：由删除的元素组成的数组。如果只删除一个元素，则返回一个只有一个元素的数组。如果没有删除元素，则返回一个空数组。</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>增加元素</p>\n<p>如果将 deleteCount 参数的值设置为 0 的话，则表示 <code>splice()</code> 方法向某个数组的 start 位置新增元素。如下示例代码所示</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//返回结果为 [] [ 3, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, 4, 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到由于我们并没有删除 arr 数组中任何一个元素，所以 <code>splice()</code> 方法返回的结果为空数组。并且 <code>splice()</code> 方法会改变原有数组。</p>\n</li>\n<li>\n<p>删除元素</p>\n<p>如果省略 item1、item2 … 等参数的话，则表示 <code>splice()</code> 方法从某个数组的 start 位置开始删除 deleteCount 个元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 返回结果 [ 4, 5 ] [ 3 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到当省略 item1、item2 … 等参数时，<code>splice()</code> 方法返回的结果为被删除的元素所组成的数组。</p>\n<p>如果 deleteCount 参数的值大于 <code>array.length-start</code> 值的话，则将 start 位置之后的所有元素删除（包含 start 位置）</p>\n</li>\n<li>\n<p>修改元素</p>\n<p>果 start 参数、deleteCount 参数和 item1、item2 … 等参数全部传递的话，则表示 <code>splice()</code> 方法将某个数组从 start 位置开始的 deleteCount 个元素替换为 item1、item2 … 等新的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//返回结果[ 4 ] [ 3, '2', 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"位置方法\"><a class=\"markdownIt-Anchor\" href=\"#位置方法\"></a> 位置方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了两个有关位置的方法。这两个方法都接收 2 个参数：一个是要查找的元素，一个是开始查找的位置。如下所示：</p>\n<ul>\n<li><code>indexOf()</code> 方法：在某个数组中查找指定元素的第一个索引值。如果存在则返回索引值，如果不存在则返回 -1。</li>\n<li><code>lastIndexOf()</code> 方法：在某个数组中查找指定元素的最后一个索引值。如果存在则返回索引值，如果不存在则返回 -1。</li>\n</ul>\n<h3 id=\"迭代方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代方法\"></a> 迭代方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了 5 个迭代数组的方法，也就是遍历数组中元素的方法。如下所示：</p>\n<ul>\n<li><code>forEach()</code> 方法：遍历数组中每一个元素时，会执行一个给定的函数。该方法没有返回值。</li>\n<li><code>every()</code> 方法：遍历数组中每一个元素，判断每一个元素是否满足给定函数的条件。如果满足则返回 true，否则返回 false。</li>\n<li><code>filter()</code> 方法：遍历数组中每一个元素，将满足给定函数条件的每一个元素组成一个新数组，并返回。</li>\n<li><code>map()</code> 方法：遍历数组中每一个元素，在给定函数中对每一个元素进行处理，并创建一个新数组进行返回。</li>\n<li><code>some()</code> 方法：遍历数组中每一个元素，如果有一个元素满足给定函数的条件，则返回 true，否则返回 false。</li>\n</ul>\n<p>上述 5 个迭代方法都是接收 2 个参数，一个是给定的函数，一个是调用给定函数时的 this 值（可选项）。而给定的函数还接收 3 个参数，如下所示：</p>\n<ul>\n<li>currentValue 参数：当前遍历数组所得到的元素。</li>\n<li>index 参数：当前遍历数组得到的元素所在的索引值。</li>\n<li>array 参数：正在遍历的数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bison'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'camel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'duck'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'elephant'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前元素的索引值为 '</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">', 元素为 '</span> <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"归并方法\"><a class=\"markdownIt-Anchor\" href=\"#归并方法\"></a> 归并方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了 2 个归并方法。所谓的归并，就是指遍历数组中每一个元素，并调用给定的函数，将最终的结果进行返回。</p>\n<ul>\n<li><code>reduce()</code> 方法：从左至右地遍历数组中每一个元素，调用给定的函数，并将最终的结果返回。</li>\n<li><code>reduceRight()</code> 方法：从右至左地遍历数组中每一个元素，调用给定的函数，并将最终的结果返回。</li>\n</ul>\n<p>上述 2 个归并方法都是接收 2 个参数，一个是给定的函数，一个是第一次调用给定函数传递的给定函数的第一个参数值（可选项）。而给定的函数接收 4 个参数，如下所示：</p>\n<ul>\n<li>accumulator 参数：上一次调用给定函数得到的结果。</li>\n<li>currentValue 参数：当前遍历数组所得到的元素。</li>\n<li>index 参数：当前遍历数组得到的元素所在的索引值。</li>\n<li>array 参数：正在遍历的数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> accumulator <span class=\"token operator\">+</span> currentValue\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"regexp类型\"><a class=\"markdownIt-Anchor\" href=\"#regexp类型\"></a> RegExp类型</h2>\n<p>JavaScript 语言提供了 RegExp 类型，该类型的全称为 <strong>Regular Expression</strong>，译为正则表达式。正则表达式是由一些普通字符和特殊字符组成的，用来描述一种特定的字符规则的表达式。</p>\n<p>正则表达式常用于在一段文本中搜索、匹配或替换特定形式的文本。如：词语出现频率统计、验证字符串是否符合邮箱格式、屏蔽一篇帖子中的限制性词语等。</p>\n<p>很多开发语言都支持正则表达式，而 JavaScript 语言支持正则表达式的方式就是提供了 RegExp 类型。</p>\n<h3 id=\"创建正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#创建正则表达式\"></a> 创建正则表达式</h3>\n<ol>\n<li>\n<p>字面量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>flags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。该参数支持如下 3 个值的匹配模式：\n<ul>\n<li>g：表示全局搜索</li>\n<li>i：表示忽略大小写</li>\n<li>m：表示多行匹配</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>pattern <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。</li>\n</ul>\n</li>\n<li>\n<p>RegExp()函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span>pattern <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note warning icon flat\"><p>注意：上述几种写法中无论是 <code>'[bc]at'</code> 的写法还是 <code>/[bc]at/</code> 的写法，其效果是一致的。</p>\n</div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// tag 字面量方式</span>\n<span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 /[bc]at/i</span>\n\n<span class=\"token comment\">// tag 构造函数方式</span>\n<span class=\"token keyword\">var</span> pattern1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bc]at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pattern2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern1<span class=\"token punctuation\">,</span> pattern2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 /[bc]at/i /[bc]at/i</span>\n\n<span class=\"token comment\">// tag RegExp函数方式</span>\n<span class=\"token keyword\">var</span> pattern3 <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bc]at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pattern4 <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern3<span class=\"token punctuation\">,</span> pattern4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 /[bc]at/i /[bc]at/i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字面量字符\"><a class=\"markdownIt-Anchor\" href=\"#字面量字符\"></a> 字面量字符</h3>\n<p>正则表达式是由一些普通字符和特殊字符组成的，其中所有字母和数字都是按照字面含义进行匹配的，而其他字符的匹配需要通过反斜线（<code>\\</code>）作为前缀进行转义。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">字母和数字</td>\n<td style=\"text-align:center\">自身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\0</code></td>\n<td style=\"text-align:center\">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 <code>\\0</code> 是一个八进制转义序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\t</code></td>\n<td style=\"text-align:center\">匹配一个水平制表符（U+0009）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\n</code></td>\n<td style=\"text-align:center\">匹配一个换行符（U+000A）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\v</code></td>\n<td style=\"text-align:center\">匹配一个垂直制表符（U+000B）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\r</code></td>\n<td style=\"text-align:center\">匹配一个回车符（U+000D）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\xhh</code></td>\n<td style=\"text-align:center\">与代码 hh 匹配字符（两个十六进制数字）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\uhhhh</code></td>\n<td style=\"text-align:center\">与代码 hhhh 匹配字符（四个十六进制数字）</td>\n</tr>\n</tbody>\n</table>\n<p>例如利用正则表达式来替换字符串里的某个字符，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"这是第一行的内容.\\n这是第二行的内容.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码的运行结果如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/33308ab6be421d0de8b1f24e59838291.png\" alt=\"\" /></p>\n<h3 id=\"字符集合\"><a class=\"markdownIt-Anchor\" href=\"#字符集合\"></a> 字符集合</h3>\n<p>如果将正则表达式的字面量字符放置在一个方括号（<code>[]</code>）内的话就组成了字符集合。一个字符类可以匹配它所包含的任意字符，同时正则表达式提供了一系列转义字符来表示一些比较常用的字符。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>[…]</code></td>\n<td style=\"text-align:center\">一个字符集合。匹配方括号的中任意字符，包含转义字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>[^…]</code></td>\n<td style=\"text-align:center\">一个反向字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.</code></td>\n<td style=\"text-align:center\">默认匹配除换行符之外的任何单个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\w</code></td>\n<td style=\"text-align:center\">匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\W</code></td>\n<td style=\"text-align:center\">匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\s</code></td>\n<td style=\"text-align:center\">匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于 <code>[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\S</code></td>\n<td style=\"text-align:center\">匹配一个非空白字符。等价于 <code>[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\d</code></td>\n<td style=\"text-align:center\">匹配一个数字。等价于 <code>[0-9]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\D</code></td>\n<td style=\"text-align:center\">匹配一个非数字字符。等价于 <code>[^0-9]</code></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc9test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[0123456789]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数量词\"><a class=\"markdownIt-Anchor\" href=\"#数量词\"></a> 数量词</h3>\n<p>正则表达式经常需要来匹配某个字符或者某些字符是重复出现，例如 <code>/\\d\\d/</code> 表示数字连续出现两次。这种匹配重复出现的情况，可以使用正则表达式提供的指定字符重复的标记。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n,m&#125;</code></td>\n<td style=\"text-align:center\">n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n&#125;</code></td>\n<td style=\"text-align:center\">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n,&#125;</code></td>\n<td style=\"text-align:center\">n 是一个正整数，匹配前一个字符至少出现了 n 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?</code></td>\n<td style=\"text-align:center\">匹配前面一个表达式 0 次或者 1 次。等价于 <code>&#123;0,1&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">匹配前一个表达式 0 次或多次。等价于 <code>&#123;0,&#125;</code></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc89test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\d]&#123;1,2&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"边界与断言\"><a class=\"markdownIt-Anchor\" href=\"#边界与断言\"></a> 边界与断言</h3>\n<p>匹配某些字符串时，可能需要完全匹配，或者是以某些字符开始，亦或者是以某些字符结束等。想要满足这些需求，可以通过正则表达式提供的有关指定匹配位置的标记来实现。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:center\">匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td style=\"text-align:center\">匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td style=\"text-align:center\">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td style=\"text-align:center\">匹配一个非单词边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>x(?=y)</code></td>\n<td style=\"text-align:center\">匹配 x 仅仅当 x 后面跟着 y，这种叫做先行断言</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>x(?!y)</code></td>\n<td style=\"text-align:center\">仅仅当 x 后面不跟着 y 时匹配 x，这被称为正向否定查找</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^JavaScript$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h3>\n<p>正则表达式的修饰符，可以实现正则表达式的高级匹配模式的规则。在 JavaScript 语言中支持的修饰符有 3 个，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>i</code></td>\n<td style=\"text-align:center\">不区分大小写搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>g</code></td>\n<td style=\"text-align:center\">全局搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>m</code></td>\n<td style=\"text-align:center\">多行搜索</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^javascript$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"regexp对象\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象\"></a> RegExp对象</h3>\n<p>JavaScript 语言中的 RegExp 类型同样是一个构造函数，除了可以用来创建一个 RegExp 类型的对象之外，RegExp 类型还提供了一些属性和方法供使用。</p>\n<h3 id=\"regexp对象的属性\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象的属性\"></a> RegExp对象的属性</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">是否只读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>g</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ignoreCase</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>i</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiline</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>m</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastIndex</td>\n<td style=\"text-align:center\">用于设置/获取下次匹配的起始位置</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">source</td>\n<td style=\"text-align:center\">返回模式匹配所使用的文本</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^javascript$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>ignoreCase<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true ^javascript$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"regexp对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象的方法\"></a> RegExp对象的方法</h3>\n<p>RegExp 类型仅提供了 2 个方法以供使用，但这两个方法在正则表达式的使用频率还是很高的。如下所示：</p>\n<ul>\n<li><code>test()</code> 方法：用来查看正则表达式与指定的字符串是否匹配。如果匹配返回 true，否则返回 false。</li>\n<li><code>exec()</code> 方法：在一个指定字符串中执行一个搜索匹配。返回结果为数组或 null。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> matches <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(hello \\S+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0317853e0cc5e0b533e65dff40ad79f5.png\" alt=\"\" /></p>\n<p>返回结果的具体含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/索引</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>[0]</code></td>\n<td style=\"text-align:center\">匹配的全部字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>[1]...[n]</code></td>\n<td style=\"text-align:center\">括号中的分组捕获</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>index</code></td>\n<td style=\"text-align:center\">匹配到的字符位于原始字符串的基于 0 的索引值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>input</code></td>\n<td style=\"text-align:center\">原始字符串</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"string类型\"><a class=\"markdownIt-Anchor\" href=\"#string类型\"></a> String类型</h2>\n<p>无论是 string 基本数据类型，还是 String 引用类型，都可以使用 String 类型提供的属性和方法。</p>\n<h3 id=\"大小写转换\"><a class=\"markdownIt-Anchor\" href=\"#大小写转换\"></a> 大小写转换</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toUpperCase()</code></td>\n<td style=\"text-align:center\">将字符串转换成大写并返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLowerCase()</code></td>\n<td style=\"text-align:center\">将字符串转换成小写并返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLocaleUpperCase()</code></td>\n<td style=\"text-align:center\">根据当前区域设置，将字符串中的字符转换成大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLocaleLowerCase()</code></td>\n<td style=\"text-align:center\">根据当前区域设置，将符串中的字符转换成小写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取指定位置的字符串\"><a class=\"markdownIt-Anchor\" href=\"#获取指定位置的字符串\"></a> 获取指定位置的字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>charAt()</code></td>\n<td style=\"text-align:center\">返回特定位置的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>charCodeAt()</code></td>\n<td style=\"text-align:center\">返回表示给定索引的字符的 Unicode 值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>codePointAt()</code></td>\n<td style=\"text-align:center\">返回使用 UTF-16 编码的给定位置的值的非负整数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"检索字符串\"><a class=\"markdownIt-Anchor\" href=\"#检索字符串\"></a> 检索字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>indexOf()</code></td>\n<td style=\"text-align:center\">从字符串中查找首个与给定值一致的首字母的索引值，如果没有找到则返回 -1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:center\">从字符串中查找最后一个与给定值一致的首字母的索引值，如果没有找到则返回 -1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"截取子字符串\"><a class=\"markdownIt-Anchor\" href=\"#截取子字符串\"></a> 截取子字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>slice()</code></td>\n<td style=\"text-align:center\">截取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>substring()</code></td>\n<td style=\"text-align:center\">返回一个字符串在开始索引到结束索引之间的一个子字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>substr()</code></td>\n<td style=\"text-align:center\">返回一个字符串中从指定位置开始到指定字符数的子字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分割字符串\"><a class=\"markdownIt-Anchor\" href=\"#分割字符串\"></a> 分割字符串</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str_arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>separator<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>separator 参数：表示分割字符串的分割符，可以是一个字符串或正则表达式。</li>\n<li>limit 参数：表示限定返回分割片段的数量。</li>\n</ul>\n<h3 id=\"连接字符串\"><a class=\"markdownIt-Anchor\" href=\"#连接字符串\"></a> 连接字符串</h3>\n<p>String 类型提供了 <code>concat()</code> 方法用来将一个或多个字符串与原有字符串连接合并在一起，形成一个新的字符串并返回。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">,</span> string2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> stringN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>string1…stringN 参数：表示要与原有字符串连接合并的字符串。</li>\n</ul>\n<h3 id=\"模糊匹配\"><a class=\"markdownIt-Anchor\" href=\"#模糊匹配\"></a> 模糊匹配</h3>\n<p>由于在 JavaScript 语言中正则表达式主要是配合字符串来使用的，而 String 类型提供了 3 个与正则表达式有关的方法，这些方法称为模式匹配方法。</p>\n<ul>\n<li>\n<p><code>search()</code> 方法：在某个字符串中查找与指定正则表达式匹配的子字符串，并返回首次匹配的字符的索引值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, Microsoft’s color is red and has MICROSOFT logo like Microsoft'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>match()</code> 方法：在某个字符串中检索与指定正则表达式匹配的子字符串，并返回匹配的结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, Microsoft’s color is red and has MICROSOFT logo like Microsoft'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>replace()</code> 方法：在某个字符串中检索与指定正则表达式匹配的子字符串，将匹配的子字符串进行替换，并返回替换的新字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, microsoft’s color is red and has MICROSOFT logo like microsoft'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oracle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n","more":"<h1 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\"></a> 引用类型</h1>\n<p>在JavaScript中，变量是某个对象的属性，函数是某个对象的方法</p>\n<p>在浏览器环境里面，定义的全局变量就是window对象的属性</p>\n<h2 id=\"引用类型的分类\"><a class=\"markdownIt-Anchor\" href=\"#引用类型的分类\"></a> 引用类型的分类</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">引用类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Date 类型</td>\n<td style=\"text-align:center\">获取和设置当前日期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Math 类型</td>\n<td style=\"text-align:center\">用于数学计算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Global 类型</td>\n<td style=\"text-align:center\">全局对象，提供全局属性和全局方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Array 类型</td>\n<td style=\"text-align:center\">用于有序的存储多个值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegExp 类型</td>\n<td style=\"text-align:center\">用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Error 类型</td>\n<td style=\"text-align:center\">用于匹配代码错误并提供对应提示内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function 类型</td>\n<td style=\"text-align:center\">用于定义 JavaScript 中的函数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object 类型</td>\n<td style=\"text-align:center\">用于定义 JavaScript 中的对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"date类型\"><a class=\"markdownIt-Anchor\" href=\"#date类型\"></a> Date类型</h2>\n<p>创建一个<code>Date</code>类型的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span>\n<span class=\"token keyword\">var</span> date3 <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>Date</code>提供<code>now()</code>方法，可以得到一个从 1970 年1月1日 00:00:00 至当前系统时间的毫秒数值。</p>\n<p>Date类型初始化时间也可以指定日期，语法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var date &#x3D; new Date(year, month [, day [, hours [, minutes [, seconds [, milliseconds]]]]])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>year 参数：表示年份的整数值。</li>\n<li>month 参数：表示月份的整数值。值范围为 0 ~ 11，表示从 1 月至 12 月。</li>\n<li>day 参数：表示一个月份中的第几天的整数值。值从 1 开始。</li>\n<li>hours 参数：表示一天中的小时数（24 小时制）。0 时表示午夜。</li>\n<li>minutes 参数：表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为 0。</li>\n<li>seconds 参数：表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为 0。</li>\n<li>milliseconds 参数：表示一个完整时间的毫秒部分的整数值。默认值为 0。</li>\n</ul>\n<p>此外关于Date类型提供的一些方法与设置方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">获取方法</th>\n<th style=\"text-align:center\">设置方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">getDate()</td>\n<td style=\"text-align:center\">setDate()</td>\n<td style=\"text-align:center\">返回 Date 对象“日期”部分数值（1 ~ 31）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getDay()</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">返回 Date 对象“星期”部分的数值（0 ~ 6）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getFullYear()</td>\n<td style=\"text-align:center\">setFullYear()</td>\n<td style=\"text-align:center\">返回 Date 对象“年份”部分的实际数值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getHours()</td>\n<td style=\"text-align:center\">setHours()</td>\n<td style=\"text-align:center\">返回 Date 对象“小时”部分的数值（0 ~ 23）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMilliseconds()</td>\n<td style=\"text-align:center\">setMilliseconds()</td>\n<td style=\"text-align:center\">返回 Date 对象“毫秒”部分的数值（0 ~ 999）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMinutes()</td>\n<td style=\"text-align:center\">setMinutes()</td>\n<td style=\"text-align:center\">返回 Date 对象“分钟”部分的数值（0 ~ 59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getMonth()</td>\n<td style=\"text-align:center\">setMonth()</td>\n<td style=\"text-align:center\">返回 Date 对象“月份”部分的数值（0 ~ 11）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getSeconds()</td>\n<td style=\"text-align:center\">setSeconds()</td>\n<td style=\"text-align:center\">返回 Date 对象“秒”部分的数值（0 ~ 59）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getTime()</td>\n<td style=\"text-align:center\">setTime()</td>\n<td style=\"text-align:center\">返回 Date 对象与 UTC 时间 1970 年 1 月 1 日午夜之间相差的毫秒数</td>\n</tr>\n</tbody>\n</table>\n<p>在Date类型提供的方法中，可以用来做时间戳的方法有两个：</p>\n<ul>\n<li>\n<p><code>getTime()</code>方法</p>\n</li>\n<li>\n<p><code>Date.now()</code>方法</p>\n</li>\n</ul>\n<p>关于日期格式化方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">toString()</td>\n<td style=\"text-align:center\">返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toDateString()</td>\n<td style=\"text-align:center\">返回 Date 对象“日期”部分（<em>年月日</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toTimeString()</td>\n<td style=\"text-align:center\">返回 Date 对象“时间”部分（<em>时分秒</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleDateString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象“ 日期”部分（<em>年月日</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toLocaleTimeString()</td>\n<td style=\"text-align:center\">基于本地时间格式，返回 Date 对象“时间”部分（<em>时分秒</em>）的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toGMTString()</td>\n<td style=\"text-align:center\">基于 GMT 时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toUTCString()</td>\n<td style=\"text-align:center\">基于 UTC 时间格式，返回 Date 对象的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<p>输出当前年月日</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  date<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"年\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"月\"</span> <span class=\"token operator\">+</span>\n    date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"日\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"math类型\"><a class=\"markdownIt-Anchor\" href=\"#math类型\"></a> Math类型</h2>\n<p>JavaScript 语言中的 Math 类型，提供了一系列有关数学常数的属性和数学计算的方法。Math 类型与 JavaScript 语言中的其他引用类型不同的是，Math 并不是一个构造函数。换句话讲，我们无法通过 Math 类型创建一个对象。</p>\n<p>Math类型的属性包括以下一些：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Math.E</code></td>\n<td style=\"text-align:center\">欧拉常数，自然对数的底数, 约等于 2.718</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LN2</code></td>\n<td style=\"text-align:center\">2 的自然对数, 约等于 0.693</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LN10</code></td>\n<td style=\"text-align:center\">10 的自然对数, 约等于 2.303</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LOG2E</code></td>\n<td style=\"text-align:center\">以 2 为底 E 的对数, 约等于 1.443</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.LOG10E</code></td>\n<td style=\"text-align:center\">以 10 为底 E 的对数, 约等于 0.434</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.PI</code></td>\n<td style=\"text-align:center\">圆周率，一个圆的周长和直径之比，约等于 3.14159</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.SQRT1_2</code></td>\n<td style=\"text-align:center\">1/2 的平方根, 约等于 0.707</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Math.SORT2</code></td>\n<td style=\"text-align:center\">2 的平方根,约等于 1.414</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性均为只读属性，不可更改。但是如果<mark>强制修改也不会报错</mark>。</p>\n<p>这里指的不能修改指的是<code>Math.PI</code>不可修改，但是如果将其赋予一个变量，然后修改这个变量，那么值还是可以修改的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test1 <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 0.14159265358979312</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出 3.141592653589793</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Math类型的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">abs(x)</td>\n<td style=\"text-align:center\">返回 x 的绝对值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exp(x)</td>\n<td style=\"text-align:center\">返回 e 的指数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">log(x)</td>\n<td style=\"text-align:center\">返回数的自然对数（底为 e）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pow(x, y)</td>\n<td style=\"text-align:center\">返回 x 的 y 次幂</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ceil(x)</td>\n<td style=\"text-align:center\">对数进行向上取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">floor(x)</td>\n<td style=\"text-align:center\">对数进行向下取整</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">round(x)</td>\n<td style=\"text-align:center\">把数四舍五入为最接近的整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">max(x, y)</td>\n<td style=\"text-align:center\">返回 x 和 y 中的最高值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min(x, y)</td>\n<td style=\"text-align:center\">返回 x 和 y 中的最低值</td>\n</tr>\n</tbody>\n</table>\n<p>在<code>JavaScript</code>中，生成随机数要用到的方法是<code>random()</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 得到一个 0~100 之间的随机整数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 得到一个1~100 之间的随机整数</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">99</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 利用随机数算百分率 -> 30% 70%</span>\n<span class=\"token keyword\">var</span> precent <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>precent <span class=\"token operator\">&lt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"70%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"array类型\"><a class=\"markdownIt-Anchor\" href=\"#array类型\"></a> Array类型</h2>\n<h3 id=\"检测数组\"><a class=\"markdownIt-Anchor\" href=\"#检测数组\"></a> 检测数组</h3>\n<p>即检测一个变量是否为数组。</p>\n<ul>\n<li>\n<p><code>instanceof</code> 运算符</p>\n</li>\n<li>\n<p><code>Array.isArray()</code>方法</p>\n<p>支持 <code>Array.isArray()</code> 方法的浏览器有 IE9+、Firefox 4+、Safari 5+、Opera 10.5+ 和 Chrome。换句话讲，还有一些浏览器版本是不支持 <code>Array.isArray()</code> 方法的。</p>\n</li>\n<li>\n<p><code>Object.prototype.toString.call()</code>方法</p>\n<p>用于解决<code>Array.isArray()</code>在部分浏览器不支持的问题</p>\n</li>\n<li>\n<p><code>Array.prototype.isPrototypeOf()</code>方法</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"instanceof检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span> test <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Array.isArray()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"Object.prototype.toString.call()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"Array.prototype.isPrototypeOf()检测test变量是否为数组：\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile1/imgbed/2020/04/08/20200408194928.png\" alt=\"\" /></p>\n<p>从图中我们可以看到，只有<code>Object.prototype.toString.call()</code>这种方式返回的是[object Array]，其余三种方法都返回的是布尔类型。</p>\n<h3 id=\"转换方法\"><a class=\"markdownIt-Anchor\" href=\"#转换方法\"></a> 转换方法</h3>\n<ul>\n<li><code>toString()</code> 方法：将一个数组转换为字符串，数组中的元素之间使用逗号（<code>,</code>）进行分隔。</li>\n<li><code>valueOf()</code> 方法：得到当前对象的原始值。如果是 Array 的话，则得到数组对象本身。</li>\n</ul>\n<h3 id=\"进出栈方法\"><a class=\"markdownIt-Anchor\" href=\"#进出栈方法\"></a> 进出栈方法</h3>\n<ul>\n<li><code>push()</code> 方法：该方法将一个或多个数据内容添加到指定数组的末尾，并返回该数组的新长度。</li>\n<li><code>pop()</code> 方法：该方法将从指定数组的末尾删除一个数据内容，并返回被删除的数据内容。该方法会改变数组的长度。</li>\n</ul>\n<p>栈操作的是列表的末尾。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是一个字符串\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//push会将数据放到列表的末尾</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加新元素之后的数组长度为: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//pop会将列表的最后一项删除</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数组删除的元素为: \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"队列方法\"><a class=\"markdownIt-Anchor\" href=\"#队列方法\"></a> 队列方法</h3>\n<p>队列即向列表头添加或删除数据。我们使用的方法是</p>\n<ul>\n<li>\n<p><code>unshift(x)</code>向列表头添加x</p>\n</li>\n<li>\n<p><code>shift()</code>删除列表第一项</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印[ 0, 1, 2, 3, 4 ]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印[ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"排序方法\"><a class=\"markdownIt-Anchor\" href=\"#排序方法\"></a> 排序方法</h3>\n<ul>\n<li><code>reverse()</code> 方法：该方法将数组中元素的位置进行颠倒，并将颠倒后的数组返回。</li>\n<li><code>sort()</code> 方法：该方法按照升序排列方式将数组中的元素进行重新排序，并将重新排序的数组返回。</li>\n</ul>\n<p>值得注意的是：<code>sort()</code>方法对于数字并不是按照大小排序的，而是按照第一个数字的大小排序的。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//结果为 [ 1, 10, 2, 21, 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>如果我们要按照大小排序，则应传入回调函数<code>array.sort([compareFunction])</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"连接方法\"><a class=\"markdownIt-Anchor\" href=\"#连接方法\"></a> 连接方法</h3>\n<p>Aarray 提供了 <code>concat()</code> 方法用来合并两个或者多个数组。该方法不会改变原有数组，返回合并后的新数组。其语法结构如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_array <span class=\"token operator\">=</span> old_array<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> valueN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>value1…valueN 参数：与原有数组合并的数组或值。</li>\n</ul>\n<p>如下示例代码展示了使用 <code>concat()</code> 方法合并两个数组的用法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"操作方法\"><a class=\"markdownIt-Anchor\" href=\"#操作方法\"></a> 操作方法</h3>\n<ul>\n<li>\n<p><code>slice()</code> 方法：该方法可以根据开始位置和结束位置从某个数组中截取指定的数据内容，并将其返回。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>begin<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>\n<p>begin 参数：可选项，表示截取开始的位置（从 0 开始）。</p>\n</li>\n<li>\n<p>end 参数：可选项，表示截取结束的位置。截取的数据内容不包含 end 位置的数据内容。</p>\n</li>\n</ul>\n<p>此方法并不会影响原来的数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ant\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bison\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"camel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"duck\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elephant\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//结果为 [ 'bison', 'camel' ] [ 'ant', 'bison', 'camel', 'duck', 'elephant' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果不写end参数，则截取开始到结束的所有元素。</p>\n</li>\n<li>\n<p><code>splice()</code> 方法：该方法可以实现对某个数组的新增、修改以及删除等操作。</p>\n</li>\n</ul>\n<h4 id=\"新增-修改及删除操作\"><a class=\"markdownIt-Anchor\" href=\"#新增-修改及删除操作\"></a> 新增、修改及删除操作</h4>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> deleteCount<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> item1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> item2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>\n<p>start 参数：表示修改数组的开始位置（从 0 开始）。</p>\n</li>\n<li>\n<p>deleteCount 参数：可选项，表示要删除数组中元素的个数。</p>\n</li>\n<li>\n<p>item1，item2，… 参数：可选项，表示从 start 指定的位置添加的元素。</p>\n</li>\n<li>\n<p>返回值：由删除的元素组成的数组。如果只删除一个元素，则返回一个只有一个元素的数组。如果没有删除元素，则返回一个空数组。</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>增加元素</p>\n<p>如果将 deleteCount 参数的值设置为 0 的话，则表示 <code>splice()</code> 方法向某个数组的 start 位置新增元素。如下示例代码所示</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//返回结果为 [] [ 3, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, 4, 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到由于我们并没有删除 arr 数组中任何一个元素，所以 <code>splice()</code> 方法返回的结果为空数组。并且 <code>splice()</code> 方法会改变原有数组。</p>\n</li>\n<li>\n<p>删除元素</p>\n<p>如果省略 item1、item2 … 等参数的话，则表示 <code>splice()</code> 方法从某个数组的 start 位置开始删除 deleteCount 个元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 返回结果 [ 4, 5 ] [ 3 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以看到当省略 item1、item2 … 等参数时，<code>splice()</code> 方法返回的结果为被删除的元素所组成的数组。</p>\n<p>如果 deleteCount 参数的值大于 <code>array.length-start</code> 值的话，则将 start 位置之后的所有元素删除（包含 start 位置）</p>\n</li>\n<li>\n<p>修改元素</p>\n<p>果 start 参数、deleteCount 参数和 item1、item2 … 等参数全部传递的话，则表示 <code>splice()</code> 方法将某个数组从 start 位置开始的 deleteCount 个元素替换为 item1、item2 … 等新的元素。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//返回结果[ 4 ] [ 3, '2', 5 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"位置方法\"><a class=\"markdownIt-Anchor\" href=\"#位置方法\"></a> 位置方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了两个有关位置的方法。这两个方法都接收 2 个参数：一个是要查找的元素，一个是开始查找的位置。如下所示：</p>\n<ul>\n<li><code>indexOf()</code> 方法：在某个数组中查找指定元素的第一个索引值。如果存在则返回索引值，如果不存在则返回 -1。</li>\n<li><code>lastIndexOf()</code> 方法：在某个数组中查找指定元素的最后一个索引值。如果存在则返回索引值，如果不存在则返回 -1。</li>\n</ul>\n<h3 id=\"迭代方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代方法\"></a> 迭代方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了 5 个迭代数组的方法，也就是遍历数组中元素的方法。如下所示：</p>\n<ul>\n<li><code>forEach()</code> 方法：遍历数组中每一个元素时，会执行一个给定的函数。该方法没有返回值。</li>\n<li><code>every()</code> 方法：遍历数组中每一个元素，判断每一个元素是否满足给定函数的条件。如果满足则返回 true，否则返回 false。</li>\n<li><code>filter()</code> 方法：遍历数组中每一个元素，将满足给定函数条件的每一个元素组成一个新数组，并返回。</li>\n<li><code>map()</code> 方法：遍历数组中每一个元素，在给定函数中对每一个元素进行处理，并创建一个新数组进行返回。</li>\n<li><code>some()</code> 方法：遍历数组中每一个元素，如果有一个元素满足给定函数的条件，则返回 true，否则返回 false。</li>\n</ul>\n<p>上述 5 个迭代方法都是接收 2 个参数，一个是给定的函数，一个是调用给定函数时的 this 值（可选项）。而给定的函数还接收 3 个参数，如下所示：</p>\n<ul>\n<li>currentValue 参数：当前遍历数组所得到的元素。</li>\n<li>index 参数：当前遍历数组得到的元素所在的索引值。</li>\n<li>array 参数：正在遍历的数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bison'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'camel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'duck'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'elephant'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'当前元素的索引值为 '</span> <span class=\"token operator\">+</span> index <span class=\"token operator\">+</span> <span class=\"token string\">', 元素为 '</span> <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"归并方法\"><a class=\"markdownIt-Anchor\" href=\"#归并方法\"></a> 归并方法</h3>\n<p>ECMA-262 第 5 版本为 Array 新增了 2 个归并方法。所谓的归并，就是指遍历数组中每一个元素，并调用给定的函数，将最终的结果进行返回。</p>\n<ul>\n<li><code>reduce()</code> 方法：从左至右地遍历数组中每一个元素，调用给定的函数，并将最终的结果返回。</li>\n<li><code>reduceRight()</code> 方法：从右至左地遍历数组中每一个元素，调用给定的函数，并将最终的结果返回。</li>\n</ul>\n<p>上述 2 个归并方法都是接收 2 个参数，一个是给定的函数，一个是第一次调用给定函数传递的给定函数的第一个参数值（可选项）。而给定的函数接收 4 个参数，如下所示：</p>\n<ul>\n<li>accumulator 参数：上一次调用给定函数得到的结果。</li>\n<li>currentValue 参数：当前遍历数组所得到的元素。</li>\n<li>index 参数：当前遍历数组得到的元素所在的索引值。</li>\n<li>array 参数：正在遍历的数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> accumulator <span class=\"token operator\">+</span> currentValue\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"regexp类型\"><a class=\"markdownIt-Anchor\" href=\"#regexp类型\"></a> RegExp类型</h2>\n<p>JavaScript 语言提供了 RegExp 类型，该类型的全称为 <strong>Regular Expression</strong>，译为正则表达式。正则表达式是由一些普通字符和特殊字符组成的，用来描述一种特定的字符规则的表达式。</p>\n<p>正则表达式常用于在一段文本中搜索、匹配或替换特定形式的文本。如：词语出现频率统计、验证字符串是否符合邮箱格式、屏蔽一篇帖子中的限制性词语等。</p>\n<p>很多开发语言都支持正则表达式，而 JavaScript 语言支持正则表达式的方式就是提供了 RegExp 类型。</p>\n<h3 id=\"创建正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#创建正则表达式\"></a> 创建正则表达式</h3>\n<ol>\n<li>\n<p>字面量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>flags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。该参数支持如下 3 个值的匹配模式：\n<ul>\n<li>g：表示全局搜索</li>\n<li>i：表示忽略大小写</li>\n<li>m：表示多行匹配</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>pattern <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。</li>\n</ul>\n</li>\n<li>\n<p>RegExp()函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span>pattern <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>pattern 参数：表示正则表达式的文本内容，可以包含字符类、限定符、分组、向前查找以及反向引用等内容。</li>\n<li>flags 参数：可选项，用来表明正则表达式的行为。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note warning icon flat\"><p>注意：上述几种写法中无论是 <code>'[bc]at'</code> 的写法还是 <code>/[bc]at/</code> 的写法，其效果是一致的。</p>\n</div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// tag 字面量方式</span>\n<span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 /[bc]at/i</span>\n\n<span class=\"token comment\">// tag 构造函数方式</span>\n<span class=\"token keyword\">var</span> pattern1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bc]at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pattern2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern1<span class=\"token punctuation\">,</span> pattern2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 /[bc]at/i /[bc]at/i</span>\n\n<span class=\"token comment\">// tag RegExp函数方式</span>\n<span class=\"token keyword\">var</span> pattern3 <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bc]at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pattern4 <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pattern3<span class=\"token punctuation\">,</span> pattern4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 /[bc]at/i /[bc]at/i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字面量字符\"><a class=\"markdownIt-Anchor\" href=\"#字面量字符\"></a> 字面量字符</h3>\n<p>正则表达式是由一些普通字符和特殊字符组成的，其中所有字母和数字都是按照字面含义进行匹配的，而其他字符的匹配需要通过反斜线（<code>\\</code>）作为前缀进行转义。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">字母和数字</td>\n<td style=\"text-align:center\">自身</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\0</code></td>\n<td style=\"text-align:center\">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 <code>\\0</code> 是一个八进制转义序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\t</code></td>\n<td style=\"text-align:center\">匹配一个水平制表符（U+0009）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\n</code></td>\n<td style=\"text-align:center\">匹配一个换行符（U+000A）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\v</code></td>\n<td style=\"text-align:center\">匹配一个垂直制表符（U+000B）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\r</code></td>\n<td style=\"text-align:center\">匹配一个回车符（U+000D）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\xhh</code></td>\n<td style=\"text-align:center\">与代码 hh 匹配字符（两个十六进制数字）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\uhhhh</code></td>\n<td style=\"text-align:center\">与代码 hhhh 匹配字符（四个十六进制数字）</td>\n</tr>\n</tbody>\n</table>\n<p>例如利用正则表达式来替换字符串里的某个字符，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"这是第一行的内容.\\n这是第二行的内容.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\n</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码的运行结果如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/33308ab6be421d0de8b1f24e59838291.png\" alt=\"\" /></p>\n<h3 id=\"字符集合\"><a class=\"markdownIt-Anchor\" href=\"#字符集合\"></a> 字符集合</h3>\n<p>如果将正则表达式的字面量字符放置在一个方括号（<code>[]</code>）内的话就组成了字符集合。一个字符类可以匹配它所包含的任意字符，同时正则表达式提供了一系列转义字符来表示一些比较常用的字符。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>[…]</code></td>\n<td style=\"text-align:center\">一个字符集合。匹配方括号的中任意字符，包含转义字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>[^…]</code></td>\n<td style=\"text-align:center\">一个反向字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.</code></td>\n<td style=\"text-align:center\">默认匹配除换行符之外的任何单个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\w</code></td>\n<td style=\"text-align:center\">匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\W</code></td>\n<td style=\"text-align:center\">匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\s</code></td>\n<td style=\"text-align:center\">匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于 <code>[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\S</code></td>\n<td style=\"text-align:center\">匹配一个非空白字符。等价于 <code>[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\d</code></td>\n<td style=\"text-align:center\">匹配一个数字。等价于 <code>[0-9]</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\D</code></td>\n<td style=\"text-align:center\">匹配一个非数字字符。等价于 <code>[^0-9]</code></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc9test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[0123456789]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数量词\"><a class=\"markdownIt-Anchor\" href=\"#数量词\"></a> 数量词</h3>\n<p>正则表达式经常需要来匹配某个字符或者某些字符是重复出现，例如 <code>/\\d\\d/</code> 表示数字连续出现两次。这种匹配重复出现的情况，可以使用正则表达式提供的指定字符重复的标记。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n,m&#125;</code></td>\n<td style=\"text-align:center\">n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n&#125;</code></td>\n<td style=\"text-align:center\">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&#123;n,&#125;</code></td>\n<td style=\"text-align:center\">n 是一个正整数，匹配前一个字符至少出现了 n 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>?</code></td>\n<td style=\"text-align:center\">匹配前面一个表达式 0 次或者 1 次。等价于 <code>&#123;0,1&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td style=\"text-align:center\">匹配前一个表达式 0 次或多次。等价于 <code>&#123;0,&#125;</code></td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abc89test\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\d]&#123;1,2&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"边界与断言\"><a class=\"markdownIt-Anchor\" href=\"#边界与断言\"></a> 边界与断言</h3>\n<p>匹配某些字符串时，可能需要完全匹配，或者是以某些字符开始，亦或者是以某些字符结束等。想要满足这些需求，可以通过正则表达式提供的有关指定匹配位置的标记来实现。如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td style=\"text-align:center\">匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td style=\"text-align:center\">匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td style=\"text-align:center\">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\B</code></td>\n<td style=\"text-align:center\">匹配一个非单词边界</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>x(?=y)</code></td>\n<td style=\"text-align:center\">匹配 x 仅仅当 x 后面跟着 y，这种叫做先行断言</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>x(?!y)</code></td>\n<td style=\"text-align:center\">仅仅当 x 后面不跟着 y 时匹配 x，这被称为正向否定查找</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^JavaScript$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修饰符\"><a class=\"markdownIt-Anchor\" href=\"#修饰符\"></a> 修饰符</h3>\n<p>正则表达式的修饰符，可以实现正则表达式的高级匹配模式的规则。在 JavaScript 语言中支持的修饰符有 3 个，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符</th>\n<th style=\"text-align:center\">匹配</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>i</code></td>\n<td style=\"text-align:center\">不区分大小写搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>g</code></td>\n<td style=\"text-align:center\">全局搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>m</code></td>\n<td style=\"text-align:center\">多行搜索</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^javascript$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"regexp对象\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象\"></a> RegExp对象</h3>\n<p>JavaScript 语言中的 RegExp 类型同样是一个构造函数，除了可以用来创建一个 RegExp 类型的对象之外，RegExp 类型还提供了一些属性和方法供使用。</p>\n<h3 id=\"regexp对象的属性\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象的属性\"></a> RegExp对象的属性</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">是否只读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>g</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ignoreCase</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>i</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">multiline</td>\n<td style=\"text-align:center\">RegExp 对象是否具有 <code>m</code> 修饰符</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastIndex</td>\n<td style=\"text-align:center\">用于设置/获取下次匹配的起始位置</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">source</td>\n<td style=\"text-align:center\">返回模式匹配所使用的文本</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^javascript$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>ignoreCase<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 true ^javascript$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"regexp对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#regexp对象的方法\"></a> RegExp对象的方法</h3>\n<p>RegExp 类型仅提供了 2 个方法以供使用，但这两个方法在正则表达式的使用频率还是很高的。如下所示：</p>\n<ul>\n<li><code>test()</code> 方法：用来查看正则表达式与指定的字符串是否匹配。如果匹配返回 true，否则返回 false。</li>\n<li><code>exec()</code> 方法：在一个指定字符串中执行一个搜索匹配。返回结果为数组或 null。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> matches <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(hello \\S+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0317853e0cc5e0b533e65dff40ad79f5.png\" alt=\"\" /></p>\n<p>返回结果的具体含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性/索引</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>[0]</code></td>\n<td style=\"text-align:center\">匹配的全部字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>[1]...[n]</code></td>\n<td style=\"text-align:center\">括号中的分组捕获</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>index</code></td>\n<td style=\"text-align:center\">匹配到的字符位于原始字符串的基于 0 的索引值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>input</code></td>\n<td style=\"text-align:center\">原始字符串</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"string类型\"><a class=\"markdownIt-Anchor\" href=\"#string类型\"></a> String类型</h2>\n<p>无论是 string 基本数据类型，还是 String 引用类型，都可以使用 String 类型提供的属性和方法。</p>\n<h3 id=\"大小写转换\"><a class=\"markdownIt-Anchor\" href=\"#大小写转换\"></a> 大小写转换</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toUpperCase()</code></td>\n<td style=\"text-align:center\">将字符串转换成大写并返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLowerCase()</code></td>\n<td style=\"text-align:center\">将字符串转换成小写并返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLocaleUpperCase()</code></td>\n<td style=\"text-align:center\">根据当前区域设置，将字符串中的字符转换成大写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toLocaleLowerCase()</code></td>\n<td style=\"text-align:center\">根据当前区域设置，将符串中的字符转换成小写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取指定位置的字符串\"><a class=\"markdownIt-Anchor\" href=\"#获取指定位置的字符串\"></a> 获取指定位置的字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>charAt()</code></td>\n<td style=\"text-align:center\">返回特定位置的字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>charCodeAt()</code></td>\n<td style=\"text-align:center\">返回表示给定索引的字符的 Unicode 值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>codePointAt()</code></td>\n<td style=\"text-align:center\">返回使用 UTF-16 编码的给定位置的值的非负整数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"检索字符串\"><a class=\"markdownIt-Anchor\" href=\"#检索字符串\"></a> 检索字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>indexOf()</code></td>\n<td style=\"text-align:center\">从字符串中查找首个与给定值一致的首字母的索引值，如果没有找到则返回 -1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>lastIndexOf()</code></td>\n<td style=\"text-align:center\">从字符串中查找最后一个与给定值一致的首字母的索引值，如果没有找到则返回 -1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"截取子字符串\"><a class=\"markdownIt-Anchor\" href=\"#截取子字符串\"></a> 截取子字符串</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>slice()</code></td>\n<td style=\"text-align:center\">截取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>substring()</code></td>\n<td style=\"text-align:center\">返回一个字符串在开始索引到结束索引之间的一个子字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>substr()</code></td>\n<td style=\"text-align:center\">返回一个字符串中从指定位置开始到指定字符数的子字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分割字符串\"><a class=\"markdownIt-Anchor\" href=\"#分割字符串\"></a> 分割字符串</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str_arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>separator<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>separator 参数：表示分割字符串的分割符，可以是一个字符串或正则表达式。</li>\n<li>limit 参数：表示限定返回分割片段的数量。</li>\n</ul>\n<h3 id=\"连接字符串\"><a class=\"markdownIt-Anchor\" href=\"#连接字符串\"></a> 连接字符串</h3>\n<p>String 类型提供了 <code>concat()</code> 方法用来将一个或多个字符串与原有字符串连接合并在一起，形成一个新的字符串并返回。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> new_str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">,</span> string2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> stringN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>string1…stringN 参数：表示要与原有字符串连接合并的字符串。</li>\n</ul>\n<h3 id=\"模糊匹配\"><a class=\"markdownIt-Anchor\" href=\"#模糊匹配\"></a> 模糊匹配</h3>\n<p>由于在 JavaScript 语言中正则表达式主要是配合字符串来使用的，而 String 类型提供了 3 个与正则表达式有关的方法，这些方法称为模式匹配方法。</p>\n<ul>\n<li>\n<p><code>search()</code> 方法：在某个字符串中查找与指定正则表达式匹配的子字符串，并返回首次匹配的字符的索引值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, Microsoft’s color is red and has MICROSOFT logo like Microsoft'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>match()</code> 方法：在某个字符串中检索与指定正则表达式匹配的子字符串，并返回匹配的结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, Microsoft’s color is red and has MICROSOFT logo like Microsoft'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p><code>replace()</code> 方法：在某个字符串中检索与指定正则表达式匹配的子字符串，将匹配的子字符串进行替换，并返回替换的新字符串。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">'Microsoft is a big Company, microsoft’s color is red and has MICROSOFT logo like microsoft'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">microsoft</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">ig</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oracle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}