{"title":"九、ES6中键值对集合","slug":"日常学习/技术相关/大前端/ES6/9. ES6中键值对集合","date":"2020-10-27T12:00:01.000Z","updated":"2022-02-21T06:22:27.472Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/ES6/9. ES6中键值对集合.json","excerpt":null,"covers":null,"content":"<h2 id=\"set-集合\"><a class=\"markdownIt-Anchor\" href=\"#set-集合\"></a> Set 集合</h2>\n<p>set 集合是键唯一的集合。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123; 1, 2, 3, 4, 5 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p><code>NaN</code>、<code>undefined</code>等值允许存储在 set 集合中。</p>\n<p>其在 set 集合中是相等的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123; 1 NaN, undefined, null &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>空数组、空对象、空函数不会被认为是同一个</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Set &#123; [], [], &#123;&#125;, &#123;&#125; &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"set-对象的属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#set-对象的属性和方法\"></a> Set 对象的属性和方法</h3>\n<h4 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h4>\n<p><code>size</code>属性</p>\n<p>相当于数组中的 length 属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\"></a> 方法</h4>\n<p>操作 Set 集合的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>add(value)</code></td>\n<td style=\"text-align:center\">在 Set 集合尾部添加一个元素，返回该 Set 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>delete(value)</code></td>\n<td style=\"text-align:center\">从 Set 集合删除指定的元素。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>has(value)</code></td>\n<td style=\"text-align:center\">检索 Set 集合是否包含指定的元素。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>clear()</code></td>\n<td style=\"text-align:center\">清除 Set 集合中的所有元素，没有返回值。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add(value)</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// delete(value) value是值 而不是索引值</span>\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true Set &#123; 2, 3, 4, 5, 6 &#125;</span>\n\n<span class=\"token comment\">// has(value) value是值 而不是索引值</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token comment\">// clear()</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Set &#123;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>遍历 Set 集合的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>values()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Set 集合中的按插入顺序的所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>keys()</code></td>\n<td style=\"text-align:center\">与<code>values()</code>方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>entries()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器，该对象包含 Set 集合中的按插入顺序排列的所有元素的值的[value,value]数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach()</code></td>\n<td style=\"text-align:center\">按照插入顺序，为 Set 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// values方法</span>\n<span class=\"token comment\">// 返回一个迭代器对象，但这个迭代器对象没有length属性，</span>\n<span class=\"token comment\">// 常规的循环语句无法使用,只能使用for...of循环</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Iterator] &#123; 1, 2, 3, 4, 5 &#125;</span>\n\n<span class=\"token comment\">// keys方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Iterator] &#123; 1, 2, 3, 4, 5 &#125;</span>\n\n<span class=\"token comment\">// entries()方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Entries] &#123; [ 1, 1 ], [ 2, 2 ], [ 3, 3 ], [ 4, 4 ], [ 5, 5 ] &#125;</span>\n\n<span class=\"token comment\">// forEach()方法</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * value表示当前遍历的值\n   * index实际上是key，key与value相同\n   * array表示当前遍历的set集合\n   */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n1 1 Set &#123; 1, 2, 3, 4, 5 &#125;\n2 2 Set &#123; 1, 2, 3, 4, 5 &#125;\n3 3 Set &#123; 1, 2, 3, 4, 5 &#125;\n4 4 Set &#123; 1, 2, 3, 4, 5 &#125;\n5 5 Set &#123; 1, 2, 3, 4, 5 &#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>Set 集合中键与值相同。</p>\n</blockquote>\n<h2 id=\"set-集合和-array-对比\"><a class=\"markdownIt-Anchor\" href=\"#set-集合和-array-对比\"></a> Set 集合和 Array 对比</h2>\n<p>对象集合的优势</p>\n<ul>\n<li>数组中用于判断元素是否存在的<code>indexOf()</code>函数效率低下。</li>\n<li>Set 对象允许根据值删除元素，而数组中必须使用基于下标的<code>splice()</code>方法。</li>\n<li>数组的<code>indexOf()</code>方法无法找到 NaN 值。</li>\n<li>Set 对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li>\n</ul>\n<h2 id=\"weakset-是什么\"><a class=\"markdownIt-Anchor\" href=\"#weakset-是什么\"></a> WeakSet 是什么</h2>\n<p>用于存储对象的集合，并且每个对象只能出现一次。</p>\n<ul>\n<li>只能存放对象，不能存放值。</li>\n<li>存储的对象值都是被弱引用。</li>\n</ul>\n<p>WeakSet 提供的操作方法与 Set 提供的操作方法相同。<strong>但其没有遍历方法</strong>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// WeakSet集合只能存储对象</span>\n<span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"map-集合\"><a class=\"markdownIt-Anchor\" href=\"#map-集合\"></a> Map 集合</h2>\n<p>Map 集合是键值对的集合。任何值都可以作为 Map 集合中的键或值。Map 集合可以按照插入的顺序迭代它的元素。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>set(key,value)</code></td>\n<td style=\"text-align:center\">设置 Map 对象中键的值。返回该 Map 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>get(key)</code></td>\n<td style=\"text-align:center\">返回键对应的值。如果不存在，则返回 undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>delete(key)</code></td>\n<td style=\"text-align:center\">从 Map 集合删除指定的键值对。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>has(key)</code></td>\n<td style=\"text-align:center\">检索 Map 集合是否包含指定键值对对应的值。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>clear()</code></td>\n<td style=\"text-align:center\">清楚 Map 集合中所有键值对，没有返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>values()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>keys()</code></td>\n<td style=\"text-align:center\">与<code>values()</code>方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>entries()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中的按插入顺序排列的所有元素的值[key,value]数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach()</code></td>\n<td style=\"text-align:center\">按照插入顺序，为 Map 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 创建Map集合</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun\"</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张无忌</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Map 集合的键的比较是基于“SameValueZero”算法：</p>\n<ul>\n<li>判断使用<code>===</code>相似的规则</li>\n<li>-0 和+0 相等</li>\n<li>NaN 与自身相等</li>\n</ul>\n","more":"<h2 id=\"set-集合\"><a class=\"markdownIt-Anchor\" href=\"#set-集合\"></a> Set 集合</h2>\n<p>set 集合是键唯一的集合。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123; 1, 2, 3, 4, 5 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<p><code>NaN</code>、<code>undefined</code>等值允许存储在 set 集合中。</p>\n<p>其在 set 集合中是相等的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123; 1 NaN, undefined, null &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>空数组、空对象、空函数不会被认为是同一个</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Set &#123; [], [], &#123;&#125;, &#123;&#125; &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"set-对象的属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#set-对象的属性和方法\"></a> Set 对象的属性和方法</h3>\n<h4 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h4>\n<p><code>size</code>属性</p>\n<p>相当于数组中的 length 属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\"></a> 方法</h4>\n<p>操作 Set 集合的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>add(value)</code></td>\n<td style=\"text-align:center\">在 Set 集合尾部添加一个元素，返回该 Set 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>delete(value)</code></td>\n<td style=\"text-align:center\">从 Set 集合删除指定的元素。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>has(value)</code></td>\n<td style=\"text-align:center\">检索 Set 集合是否包含指定的元素。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>clear()</code></td>\n<td style=\"text-align:center\">清除 Set 集合中的所有元素，没有返回值。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add(value)</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// delete(value) value是值 而不是索引值</span>\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true Set &#123; 2, 3, 4, 5, 6 &#125;</span>\n\n<span class=\"token comment\">// has(value) value是值 而不是索引值</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n\n<span class=\"token comment\">// clear()</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Set &#123;&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>遍历 Set 集合的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>values()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Set 集合中的按插入顺序的所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>keys()</code></td>\n<td style=\"text-align:center\">与<code>values()</code>方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>entries()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器，该对象包含 Set 集合中的按插入顺序排列的所有元素的值的[value,value]数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach()</code></td>\n<td style=\"text-align:center\">按照插入顺序，为 Set 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// values方法</span>\n<span class=\"token comment\">// 返回一个迭代器对象，但这个迭代器对象没有length属性，</span>\n<span class=\"token comment\">// 常规的循环语句无法使用,只能使用for...of循环</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Iterator] &#123; 1, 2, 3, 4, 5 &#125;</span>\n\n<span class=\"token comment\">// keys方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Iterator] &#123; 1, 2, 3, 4, 5 &#125;</span>\n\n<span class=\"token comment\">// entries()方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Set Entries] &#123; [ 1, 1 ], [ 2, 2 ], [ 3, 3 ], [ 4, 4 ], [ 5, 5 ] &#125;</span>\n\n<span class=\"token comment\">// forEach()方法</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * value表示当前遍历的值\n   * index实际上是key，key与value相同\n   * array表示当前遍历的set集合\n   */</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n1 1 Set &#123; 1, 2, 3, 4, 5 &#125;\n2 2 Set &#123; 1, 2, 3, 4, 5 &#125;\n3 3 Set &#123; 1, 2, 3, 4, 5 &#125;\n4 4 Set &#123; 1, 2, 3, 4, 5 &#125;\n5 5 Set &#123; 1, 2, 3, 4, 5 &#125;\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>Set 集合中键与值相同。</p>\n</blockquote>\n<h2 id=\"set-集合和-array-对比\"><a class=\"markdownIt-Anchor\" href=\"#set-集合和-array-对比\"></a> Set 集合和 Array 对比</h2>\n<p>对象集合的优势</p>\n<ul>\n<li>数组中用于判断元素是否存在的<code>indexOf()</code>函数效率低下。</li>\n<li>Set 对象允许根据值删除元素，而数组中必须使用基于下标的<code>splice()</code>方法。</li>\n<li>数组的<code>indexOf()</code>方法无法找到 NaN 值。</li>\n<li>Set 对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li>\n</ul>\n<h2 id=\"weakset-是什么\"><a class=\"markdownIt-Anchor\" href=\"#weakset-是什么\"></a> WeakSet 是什么</h2>\n<p>用于存储对象的集合，并且每个对象只能出现一次。</p>\n<ul>\n<li>只能存放对象，不能存放值。</li>\n<li>存储的对象值都是被弱引用。</li>\n</ul>\n<p>WeakSet 提供的操作方法与 Set 提供的操作方法相同。<strong>但其没有遍历方法</strong>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// WeakSet集合只能存储对象</span>\n<span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ws<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"map-集合\"><a class=\"markdownIt-Anchor\" href=\"#map-集合\"></a> Map 集合</h2>\n<p>Map 集合是键值对的集合。任何值都可以作为 Map 集合中的键或值。Map 集合可以按照插入的顺序迭代它的元素。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>set(key,value)</code></td>\n<td style=\"text-align:center\">设置 Map 对象中键的值。返回该 Map 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>get(key)</code></td>\n<td style=\"text-align:center\">返回键对应的值。如果不存在，则返回 undefined</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>delete(key)</code></td>\n<td style=\"text-align:center\">从 Map 集合删除指定的键值对。返回布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>has(key)</code></td>\n<td style=\"text-align:center\">检索 Map 集合是否包含指定键值对对应的值。返回布尔值，表示是否包含</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>clear()</code></td>\n<td style=\"text-align:center\">清楚 Map 集合中所有键值对，没有返回值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>values()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中所有元素的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>keys()</code></td>\n<td style=\"text-align:center\">与<code>values()</code>方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>entries()</code></td>\n<td style=\"text-align:center\">返回一个新的迭代器对象，该对象包含 Map 集合中的按插入顺序排列的所有元素的值[key,value]数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>forEach()</code></td>\n<td style=\"text-align:center\">按照插入顺序，为 Map 集合中的每一个元素调用一次 callback 函数</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 创建Map集合</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun\"</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj\"</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张无忌</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Map 集合的键的比较是基于“SameValueZero”算法：</p>\n<ul>\n<li>判断使用<code>===</code>相似的规则</li>\n<li>-0 和+0 相等</li>\n<li>NaN 与自身相等</li>\n</ul>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"ES6","path":"api/categories/ES6.json"}],"tags":[{"name":"ES6","path":"api/tags/ES6.json"}]}