{"title":"JavaScript中的继承链","slug":"日常学习/技术相关/大前端/JavaScript学习/面向对象/继承之间的关系","date":"2020-06-09T09:00:58.000Z","updated":"2022-02-21T06:11:10.028Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/面向对象/继承之间的关系.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/e1718f233f681dfecf4c8c1ae29a5ebd.png"],"content":"<h2 id=\"继承链\"><a class=\"markdownIt-Anchor\" href=\"#继承链\"></a> 继承链</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th>备注</th>\n<th style=\"text-align:center\"><code>constructor</code></th>\n<th style=\"text-align:center\"><code>prototype</code></th>\n<th style=\"text-align:center\"><code>__poroto__</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">（构造）函数</td>\n<td>函数即对象</td>\n<td style=\"text-align:center\">指向Function</td>\n<td style=\"text-align:center\">指向一个constructor为自身的空对象</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对象</td>\n<td></td>\n<td style=\"text-align:center\">指向创建该对象的构造函数</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">源于创建该对象的构造函数的显式原型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td>是所有构造器的源头</td>\n<td style=\"text-align:center\">指向自身</td>\n<td style=\"text-align:center\">对象的constructor指向自身</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td><code>Object.prototype</code>是所有原型的源头</td>\n<td style=\"text-align:center\">指向Function</td>\n<td style=\"text-align:center\">是一个constructor指向自身的空对象</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>参考于：</p>\n<div class=\"fj-gallery\"><p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/e1718f233f681dfecf4c8c1ae29a5ebd.png\" alt=\"10-11\" /></p><p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/9bccd4cd9ddebeb734c21264535caef6.png\" alt=\"lALPGp4a6oGudk_NA6TNA8s_971_932.png_720x720q90g\" /></p>\n          </div>\n<h2 id=\"面向对象的继承\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的继承\"></a> 面向对象的继承</h2>\n<ol>\n<li>\n<p>基于对象的原型实现</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">object.__proto__ &#x3D; obj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指向一个对象</p>\n</li>\n<li>\n<p>基于构造函数的原型实现</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Object.prototype<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指向一个空对象</p>\n</li>\n</ol>\n<h3 id=\"继承常见的几种方式\"><a class=\"markdownIt-Anchor\" href=\"#继承常见的几种方式\"></a> 继承常见的几种方式</h3>\n<ul>\n<li>原型链继承: 原型与对象继承; 只继承于原型<br />\n问题:\n<ol>\n<li>实际上并不是真正的继承, 其实是多个构造函数之间共享一个对象(属性和方法)</li>\n<li>创建子类的对象时, 不能向父级的构造函数传递任何参数。</li>\n</ol>\n</li>\n<li>原型式继承</li>\n<li>借助构造函数: apply() 或 call() 方法<br />\n问题: this 的传递</li>\n<li>组合方式继承: 原型链 + 构造函数</li>\n</ul>\n<h2 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\"></a> 面向对象</h2>\n<h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\"></a> 对象</h3>\n<div class='tip' ><p>创建对象的方式<p></div>\n<ol>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>直接量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"lilei\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sayMe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is lilei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<div class='tip' ><p>构造器(constructor)<p></div>\n<p>对象的构造器都是指向创建该对象的构造函数。例如以下示例代码:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上述示例代码中的 foo 对象的构造器就是 Foo。</p>\n<div class='tip' ><p>隐式原型(__proto__)<p></div>\n<p>对象的隐式原型与创建该对象的构造函数的显式原型是指向同一个对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<div class='tip' ><p>函数创建方式<p></div>\n<ol>\n<li>\n<p>直接量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>与 JavaScript 中的变量是存在关系，例如以下示例代码:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token string\">'this is text'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'this is text'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述示例代码存在覆盖问题。</p>\n</li>\n<li>\n<p>初始化器方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述示例代码说明函数是一个 Function 类型的对象。</p>\n</li>\n</ol>\n<div class='tip' ><p>函数的特性<p></div>\n<ol>\n<li>函数可能与变量之间存在关系(直接量方式定义函数时)</li>\n<li>函数与构造函数允许同时存在的</li>\n<li>函数是一个 Function 类型的对象</li>\n</ol>\n<div class='tip' ><p>显式原型(prototype)<p></div>\n<p>构造函数的显式原型与利用该构造函数所创建对象的隐式原型是指向同一个对象。</p>\n<div class='tip' ><p>构造器(constructor)<p></div>\n<p>函数的构造器就是 Function。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class='tip' ><p>隐式原型(__proto__)<p></div>\n<p>函数的隐式原型与 Function 的显式原型是指向同一个对象。</p>\n","more":"<h2 id=\"继承链\"><a class=\"markdownIt-Anchor\" href=\"#继承链\"></a> 继承链</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th>备注</th>\n<th style=\"text-align:center\"><code>constructor</code></th>\n<th style=\"text-align:center\"><code>prototype</code></th>\n<th style=\"text-align:center\"><code>__poroto__</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">（构造）函数</td>\n<td>函数即对象</td>\n<td style=\"text-align:center\">指向Function</td>\n<td style=\"text-align:center\">指向一个constructor为自身的空对象</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对象</td>\n<td></td>\n<td style=\"text-align:center\">指向创建该对象的构造函数</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">源于创建该对象的构造函数的显式原型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td>是所有构造器的源头</td>\n<td style=\"text-align:center\">指向自身</td>\n<td style=\"text-align:center\">对象的constructor指向自身</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object</td>\n<td><code>Object.prototype</code>是所有原型的源头</td>\n<td style=\"text-align:center\">指向Function</td>\n<td style=\"text-align:center\">是一个constructor指向自身的空对象</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>参考于：</p>\n<div class=\"fj-gallery\"><p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/e1718f233f681dfecf4c8c1ae29a5ebd.png\" alt=\"10-11\" /></p><p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/9bccd4cd9ddebeb734c21264535caef6.png\" alt=\"lALPGp4a6oGudk_NA6TNA8s_971_932.png_720x720q90g\" /></p>\n          </div>\n<h2 id=\"面向对象的继承\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的继承\"></a> 面向对象的继承</h2>\n<ol>\n<li>\n<p>基于对象的原型实现</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">object.__proto__ &#x3D; obj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指向一个对象</p>\n</li>\n<li>\n<p>基于构造函数的原型实现</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Object.prototype<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>指向一个空对象</p>\n</li>\n</ol>\n<h3 id=\"继承常见的几种方式\"><a class=\"markdownIt-Anchor\" href=\"#继承常见的几种方式\"></a> 继承常见的几种方式</h3>\n<ul>\n<li>原型链继承: 原型与对象继承; 只继承于原型<br />\n问题:\n<ol>\n<li>实际上并不是真正的继承, 其实是多个构造函数之间共享一个对象(属性和方法)</li>\n<li>创建子类的对象时, 不能向父级的构造函数传递任何参数。</li>\n</ol>\n</li>\n<li>原型式继承</li>\n<li>借助构造函数: apply() 或 call() 方法<br />\n问题: this 的传递</li>\n<li>组合方式继承: 原型链 + 构造函数</li>\n</ul>\n<h2 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\"></a> 面向对象</h2>\n<h3 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\"></a> 对象</h3>\n<div class='tip' ><p>创建对象的方式<p></div>\n<ol>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>直接量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"lilei\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sayMe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is lilei\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<div class='tip' ><p>构造器(constructor)<p></div>\n<p>对象的构造器都是指向创建该对象的构造函数。例如以下示例代码:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>上述示例代码中的 foo 对象的构造器就是 Foo。</p>\n<div class='tip' ><p>隐式原型(__proto__)<p></div>\n<p>对象的隐式原型与创建该对象的构造函数的显式原型是指向同一个对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<div class='tip' ><p>函数创建方式<p></div>\n<ol>\n<li>\n<p>直接量方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>与 JavaScript 中的变量是存在关系，例如以下示例代码:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token string\">'this is text'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'this is text'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述示例代码存在覆盖问题。</p>\n</li>\n<li>\n<p>初始化器方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>构造函数方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上述示例代码说明函数是一个 Function 类型的对象。</p>\n</li>\n</ol>\n<div class='tip' ><p>函数的特性<p></div>\n<ol>\n<li>函数可能与变量之间存在关系(直接量方式定义函数时)</li>\n<li>函数与构造函数允许同时存在的</li>\n<li>函数是一个 Function 类型的对象</li>\n</ol>\n<div class='tip' ><p>显式原型(prototype)<p></div>\n<p>构造函数的显式原型与利用该构造函数所创建对象的隐式原型是指向同一个对象。</p>\n<div class='tip' ><p>构造器(constructor)<p></div>\n<p>函数的构造器就是 Function。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<div class='tip' ><p>隐式原型(__proto__)<p></div>\n<p>函数的隐式原型与 Function 的显式原型是指向同一个对象。</p>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}