{"title":"JavaScript中的防抖和节流","slug":"日常学习/技术相关/JavaScript/1. JavaScript中的防抖和节流","date":"2021-05-29T13:47:25.000Z","updated":"2022-02-21T06:22:27.464Z","comments":true,"path":"api/articles/日常学习/技术相关/JavaScript/1. JavaScript中的防抖和节流.json","excerpt":null,"covers":["https://file.acs.pw/picgo/2021/05/29/20210529221042.jpeg","https://file.acs.pw/picgo/2021/05/29/20210529221115.jpeg"],"content":"<h2 id=\"什么是防抖\"><a class=\"markdownIt-Anchor\" href=\"#什么是防抖\"></a> 什么是防抖</h2>\n<p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p>\n<p><img src=\"https://file.acs.pw/picgo/2021/05/29/20210529221042.jpeg\" alt=\"防抖\" /></p>\n<p>防抖应用场景如下</p>\n<ul>\n<li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li>\n<li>表单验证</li>\n<li>按钮提交事件。</li>\n<li>浏览器窗口缩放，resize事件(如窗口停止改变大小之后重新计算布局)等。</li>\n</ul>\n<h3 id=\"具体实现lodash库\"><a class=\"markdownIt-Anchor\" href=\"#具体实现lodash库\"></a> 具体实现(Lodash库)</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n *\n * @param &#123; Function &#125; func 要进行debouce的函数\n * @param &#123; Number &#125; wait 等待时间,默认500ms\n * @param &#123; Boolean &#125; immediate 是否立即执行\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> immediate<span class=\"token operator\">=</span><span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timeout\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果已经执行过，不再执行</span>\n            <span class=\"token keyword\">var</span> callNow <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>timeout\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callNow<span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>非立即执行的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p>\n<p>立即执行的意思是触发事件后函数会立即执行，然后 n 秒内<strong>不触发事件</strong>才能继续执行函数的效果</p>\n</blockquote>\n<h2 id=\"什么是节流\"><a class=\"markdownIt-Anchor\" href=\"#什么是节流\"></a> 什么是节流</h2>\n<p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p>\n<p><img src=\"https://file.acs.pw/picgo/2021/05/29/20210529221115.jpeg\" alt=\"节流\" /></p>\n<p>节流应用场景：</p>\n<ul>\n<li>按钮点击事件</li>\n<li>拖拽事件</li>\n<li>onScoll</li>\n<li>计算鼠标移动的距离(mousemove)</li>\n</ul>\n<h3 id=\"具体实现\"><a class=\"markdownIt-Anchor\" href=\"#具体实现\"></a> 具体实现</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 节流，多次触发，间隔时间段执行\n * @param &#123; Function &#125; func\n * @param &#123; Number &#125; wait\n * @param &#123; Object &#125; options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timeout<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> args\n    <span class=\"token keyword\">var</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">)</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>leading<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>trailing<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">later</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        previous <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> context <span class=\"token operator\">=</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">throttled</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>previous <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> previous <span class=\"token operator\">=</span> now\n        <span class=\"token keyword\">var</span> remaining <span class=\"token operator\">=</span> wait <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> previous<span class=\"token punctuation\">)</span>\n        context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        args <span class=\"token operator\">=</span> arguments\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> remaining <span class=\"token operator\">></span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">&#125;</span>\n            previous <span class=\"token operator\">=</span> now\n            <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> context <span class=\"token operator\">=</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>later<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> throttled\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>第三个参数还有点复杂，<code>options</code></p>\n<ul>\n<li>leading，函数在每个等待时延的开始被调用，默认值为false</li>\n<li>trailing，函数在每个等待时延的结束被调用，默认值是true</li>\n</ul>\n<p><code>leading-false，trailing-true</code>：默认情况，即在延时结束后才会调用函数</p>\n<p><code>leading-true，trailing-true</code>：在延时开始时就调用，延时结束后也会调用</p>\n<p><code>leading-true, trailing-false</code>：只在延时开始时调用</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ul>\n<li>\n<p>函数防抖</p>\n<p>将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p>\n<ol>\n<li>input框搜索，用户在不断输入值时，用防抖来节约请求资源。</li>\n<li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li>\n</ol>\n</li>\n<li>\n<p>函数节流</p>\n<p>使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数。</p>\n<ol>\n<li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li>\n<li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li>\n</ol>\n</li>\n<li>\n<p>区别</p>\n<p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数</p>\n<p>而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p>\n</li>\n</ul>\n<h2 id=\"文章参考\"><a class=\"markdownIt-Anchor\" href=\"#文章参考\"></a> 文章参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/momo798/p/9177767.html\">js防抖和节流</a></li>\n<li><a href=\"https://github.com/Michael-lzg/my--article/blob/master/javascript/js%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81.md\">js防抖和节流</a></li>\n<li><a href=\"https://juejin.cn/post/7000919400249294862\">16个工程必备的JavaScript代码片段（建议添加到项目中）</a></li>\n</ul>\n","more":"<h2 id=\"什么是防抖\"><a class=\"markdownIt-Anchor\" href=\"#什么是防抖\"></a> 什么是防抖</h2>\n<p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p>\n<p><img src=\"https://file.acs.pw/picgo/2021/05/29/20210529221042.jpeg\" alt=\"防抖\" /></p>\n<p>防抖应用场景如下</p>\n<ul>\n<li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li>\n<li>表单验证</li>\n<li>按钮提交事件。</li>\n<li>浏览器窗口缩放，resize事件(如窗口停止改变大小之后重新计算布局)等。</li>\n</ul>\n<h3 id=\"具体实现lodash库\"><a class=\"markdownIt-Anchor\" href=\"#具体实现lodash库\"></a> 具体实现(Lodash库)</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n *\n * @param &#123; Function &#125; func 要进行debouce的函数\n * @param &#123; Number &#125; wait 等待时间,默认500ms\n * @param &#123; Boolean &#125; immediate 是否立即执行\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> immediate<span class=\"token operator\">=</span><span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timeout\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果已经执行过，不再执行</span>\n            <span class=\"token keyword\">var</span> callNow <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>timeout\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callNow<span class=\"token punctuation\">)</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>非立即执行的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p>\n<p>立即执行的意思是触发事件后函数会立即执行，然后 n 秒内<strong>不触发事件</strong>才能继续执行函数的效果</p>\n</blockquote>\n<h2 id=\"什么是节流\"><a class=\"markdownIt-Anchor\" href=\"#什么是节流\"></a> 什么是节流</h2>\n<p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p>\n<p><img src=\"https://file.acs.pw/picgo/2021/05/29/20210529221115.jpeg\" alt=\"节流\" /></p>\n<p>节流应用场景：</p>\n<ul>\n<li>按钮点击事件</li>\n<li>拖拽事件</li>\n<li>onScoll</li>\n<li>计算鼠标移动的距离(mousemove)</li>\n</ul>\n<h3 id=\"具体实现\"><a class=\"markdownIt-Anchor\" href=\"#具体实现\"></a> 具体实现</h3>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 节流，多次触发，间隔时间段执行\n * @param &#123; Function &#125; func\n * @param &#123; Number &#125; wait\n * @param &#123; Object &#125; options\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timeout<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> args\n    <span class=\"token keyword\">var</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">)</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>leading<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>trailing<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">later</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        previous <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> context <span class=\"token operator\">=</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">throttled</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>previous <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> previous <span class=\"token operator\">=</span> now\n        <span class=\"token keyword\">var</span> remaining <span class=\"token operator\">=</span> wait <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> previous<span class=\"token punctuation\">)</span>\n        context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n        args <span class=\"token operator\">=</span> arguments\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> remaining <span class=\"token operator\">></span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">&#125;</span>\n            previous <span class=\"token operator\">=</span> now\n            <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> context <span class=\"token operator\">=</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout <span class=\"token operator\">&amp;&amp;</span> options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>later<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> throttled\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>第三个参数还有点复杂，<code>options</code></p>\n<ul>\n<li>leading，函数在每个等待时延的开始被调用，默认值为false</li>\n<li>trailing，函数在每个等待时延的结束被调用，默认值是true</li>\n</ul>\n<p><code>leading-false，trailing-true</code>：默认情况，即在延时结束后才会调用函数</p>\n<p><code>leading-true，trailing-true</code>：在延时开始时就调用，延时结束后也会调用</p>\n<p><code>leading-true, trailing-false</code>：只在延时开始时调用</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<ul>\n<li>\n<p>函数防抖</p>\n<p>将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p>\n<ol>\n<li>input框搜索，用户在不断输入值时，用防抖来节约请求资源。</li>\n<li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li>\n</ol>\n</li>\n<li>\n<p>函数节流</p>\n<p>使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数。</p>\n<ol>\n<li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li>\n<li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li>\n</ol>\n</li>\n<li>\n<p>区别</p>\n<p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数</p>\n<p>而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p>\n</li>\n</ul>\n<h2 id=\"文章参考\"><a class=\"markdownIt-Anchor\" href=\"#文章参考\"></a> 文章参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/momo798/p/9177767.html\">js防抖和节流</a></li>\n<li><a href=\"https://github.com/Michael-lzg/my--article/blob/master/javascript/js%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81.md\">js防抖和节流</a></li>\n<li><a href=\"https://juejin.cn/post/7000919400249294862\">16个工程必备的JavaScript代码片段（建议添加到项目中）</a></li>\n</ul>\n","categories":[{"name":"JavaScript","path":"api/categories/JavaScript.json"},{"name":"常见特性","path":"api/categories/常见特性.json"}],"tags":[{"name":"防抖节流","path":"api/tags/防抖节流.json"}]}