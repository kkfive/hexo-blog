{"title":"17Object对象","slug":"日常学习/技术相关/大前端/JavaScript学习/面向对象/17 Object对象","date":"2020-05-26T01:31:58.000Z","updated":"2022-02-21T04:45:27.400Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/面向对象/17 Object对象.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/64d246f4c2025025be3cda1ff7c630d1.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/45b4a6b90bf0280871c7d9bb446c6328.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8131ada4df008881f91402ab56d3a1e9.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/6032673ec35a73b2696a0c137cd632e7.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/04873fda9f2cfb2ffe27ef4f7fcaae89.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/c43e3f51bc843ec84345402e024178fc.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/e0cc677276fe30bd28332c698cf0a369.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/df3517d733fd0b85b26bc7337d205807.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8fc22fdbcda326da3491154e767e81af.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/07637737e8bfc274f255fda583f55b34.png"],"content":"<h1 id=\"object对象\"><a class=\"markdownIt-Anchor\" href=\"#object对象\"></a> Object对象</h1>\n<p>创建对象的三种形式</p>\n<ol>\n<li>\n<p>创建空对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个与给定值对应类型的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[Number: 100]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>当以非构造函数形式被调用时，Object 等同于 new Object()。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj4 <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//函数调用</span>\n<span class=\"token keyword\">var</span> obj5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造函数调用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#属性描述符\"></a> 属性描述符</h2>\n<p>Javascript提供了一个内部数据结构，用于描述对象的值，控制其行为，例如该属性是否可写、是否可配置、是否可修改以及是否可枚举等。这个内部数据结构被称为“属性描述符”。</p>\n<p><strong>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。</strong></p>\n<h3 id=\"数据描述符\"><a class=\"markdownIt-Anchor\" href=\"#数据描述符\"></a> 数据描述符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>value</code></td>\n<td style=\"text-align:center\">该属性对应的值，可以是任何有效的Javascript值（数值，对象，函数等）。</td>\n<td style=\"text-align:center\"><code>undefiend</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>writable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>writable</code>为<code>true</code>时， valueオ能被赋值运算符改変。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>configurable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>configurable</code>为<code>true</code>时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>enumerable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"存取描述符\"><a class=\"markdownIt-Anchor\" href=\"#存取描述符\"></a> 存取描述符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>get</code></td>\n<td style=\"text-align:center\">给属性提供<code>getter</code>的方法，如果没有<code>getter</code>则为<code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传人<code>this</code>对象。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>set</code></td>\n<td style=\"text-align:center\">给属性提供<code>setter</code>的方法，如果没有<code>setter</code>则为undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>configurable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>configurable</code>为<code>true</code>时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>enumerable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"获取属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#获取属性描述符\"></a> 获取属性描述符</h2>\n<p>通过<code>Object.getOwnPropertyNames(object,prop)</code>方法获取属性描述符，其中:</p>\n<ul>\n<li>\n<p><code>object</code></p>\n<p>表示指定属性对应的目标对象</p>\n</li>\n<li>\n<p><code>prop</code></p>\n<p>表示描述符的目标属性名称</p>\n</li>\n<li>\n<p>返回值</p>\n<p>其属性描述符对象</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 通过定义对象(属性火方法)这种方式\n * 属性默认都是数据描述符\n */</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 使用Object.getOwnPropertyNames()方法获取指定属性的描述符\n *  Object.getOwnPropertyNames(object,prop)\n *  object - 表示指定属性对应的目标对象\n *  prop - 表示描述符的目标属性名称\n *  返回值 - 其属性描述符对象\n *\n *\n * */</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; value: '张无忌', writable: true, enumerable: true, configurable: true &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张无忌</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/64d246f4c2025025be3cda1ff7c630d1.png\" alt=\"image-20200525182426781\" /></p>\n<h2 id=\"设置属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#设置属性描述符\"></a> 设置属性描述符</h2>\n<p>设置属性使用<code>Object.defineProperty(obj,prop,desc)</code>方法，他的作用有两个：用于定义目标对象的新属性、修改目标对象的已存在属性。其中：</p>\n<ul>\n<li>\n<p><code>obj</code></p>\n<p>表示目标对象</p>\n</li>\n<li>\n<p><code>prop</code></p>\n<p>表示目标对象的目标属性名称</p>\n</li>\n<li>\n<p><code>desc</code></p>\n<p>表示属性描述符,必须是对象的格式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>返回值</p>\n<p>返回传递的对象</p>\n</li>\n</ul>\n<div class=\"note info icon\"><p>设置value值</p></div>\n<ol>\n<li>\n<p>修改一个值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>新增一个值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//18</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p><span class=\"inline-tag yellow\">与常规方式的区别</span></p>\n<ul>\n<li>\n<p>如果使用&quot;对象名.属性名 = 值&quot;</p>\n<p>可修改,可删除,可枚举</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/45b4a6b90bf0280871c7d9bb446c6328.png\" alt=\"image-20200525185644351\" /></p>\n</li>\n<li>\n<p>如果使用<code>Object.defineProperty()</code>方法新增属性</p>\n<p>不可修改命不可删除以及不可枚举</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8131ada4df008881f91402ab56d3a1e9.png\" alt=\"image-20200525185448117\" /></p>\n</li>\n</ul>\n<div class=\"note danger icon\"><p>一旦属性的值是不可修改的，执行修改操作:没有语法错误,但修改无效</p></div>\n<p>由图可以得知：用<code>Object.defineProperty()</code>方法新增属性后，再次修改后输出，值并未发生变化。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/6032673ec35a73b2696a0c137cd632e7.png\" alt=\"image-20200525185908552\" /></p>\n<div class=\"note info icon\"><p>设置wriable值</p></div>\n<p>该值为布尔值，默认为<code>false</code>。表示属性值可否被修改。</p>\n<ol>\n<li>\n<p>修改现有属性</p>\n<p>当<code>writable</code>为false时，无法修改其属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 修改现有属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//周芷若</span>\n<span class=\"token comment\">// 修改name属性值</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//周芷若</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/04873fda9f2cfb2ffe27ef4f7fcaae89.png\" alt=\"image-20200525190849263\" /></p>\n</li>\n<li>\n<p>新增属性</p>\n<p>与修改同理当<code>writable</code>为false时，无法修改其属性。为true时可以修改.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/c43e3f51bc843ec84345402e024178fc.png\" alt=\"image-20200525191011582\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/e0cc677276fe30bd28332c698cf0a369.png\" alt=\"image-20200525191025302\" /></p>\n</li>\n</ol>\n<div class=\"note info icon\"><p>设置configurable值</p></div>\n<p>Booleant值，表示目标属性的描述符是否可以被修改。当且仅当该属性的configurable为true时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除.默认为<code>false</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/df3517d733fd0b85b26bc7337d205807.png\" alt=\"image-20200525191541996\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8fc22fdbcda326da3491154e767e81af.png\" alt=\"image-20200525191604800\" /></p>\n<div class=\"note info icon\"><p>设置enumerable值</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 属性描述符enumerable - 控制当前属性是否可被枚举（遍历）\n * 仅能循环遍历对象中可被枚举的属性\n *   * for...in语句\n *   * keys()方法\n * 可以循环遍历对象中可被枚举和不可被枚举的属性\n * getOwnPropertyNames()方法\n */</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码执行结果:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/07637737e8bfc274f255fda583f55b34.png\" alt=\"image-20200525193053912\" /></p>\n<ol start=\"3\">\n<li>\n<p>属性描述符也可以设置方法，与上述属性设置一模一样。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">sayMe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sayMe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n&#123;\n  value: [Function: sayMe],\n  writable: true,\n  enumerable: true,\n  configurable: true\n&#125;\n*/</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sayMe\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is new function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is new function</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this is new function</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"属性描述符的存取器\"><a class=\"markdownIt-Anchor\" href=\"#属性描述符的存取器\"></a> 属性描述符的存取器</h2>\n<ol>\n<li>\n<p>get</p>\n<p><code>get</code>当获取或访问当前属性时，会调用此方法。</p>\n<blockquote>\n<p>类似数据描述符中的value</p>\n<ul>\n<li>\n<p>get方法在被调用时，不能传递任何参数</p>\n</li>\n<li>\n<p>get方法在被调用时，允许传递this关键字</p>\n<ul>\n<li>this - 表示当前的目标对象</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 获取指定的属性</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当获取或访问当前属性时，会调用此方法</span>\n    <span class=\"token comment\">/**\n     * 类似数据描述符中的value\n     * get方法在被调用时，不能传递任何参数\n     * get方法在被调用时，允许传递this关键字\n     *   this - 表示当前的目标对象\n     */</span>\n    <span class=\"token comment\">// return this;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 周芷若</span>\n<span class=\"token comment\">// 同样的如果只设置get，那么也是不能修改的。</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 周芷若</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>set</p>\n<p>set方法用于定义当前目标函数的修改功能</p>\n<blockquote>\n<ul>\n<li>\n<p>该方法接收唯一的一个参数</p>\n<p>作为当前目标属性的新的值</p>\n</li>\n<li>\n<p>通过属性修改操作指定新的值</p>\n<p>作为形参对应的实参</p>\n</li>\n</ul>\n</blockquote>\n<p>此方法修改值需借助一个变量，例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//全局变量</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * set方法用于定义当前目标函数的修改功能\n   * 该方法接收唯一的一个参数 -> 作为当前目标属性的新的值\n   * 通过属性修改操作指定新的值 -> 作为形参对应的实参\n   *\n   */</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is set function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    value <span class=\"token operator\">=</span> newvalue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//赵敏</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"note warning icon\"><p>需要注意的是：如果变量没有初始化获取值，那么值是undefined。</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//全局变量</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is set function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    value <span class=\"token operator\">=</span> newvalue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<div class=\"note success icon\"><p>关于get与set的另一种常见写法</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存取描述符中的get</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setter:\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张三</span>\nobj<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//setter:100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种写法中，赋值与上方一致，也是定义一个新的变量，然后赋值。此写法结果与用法与上边一致，只是写法不同。</p>\n<h2 id=\"防篡改对象\"><a class=\"markdownIt-Anchor\" href=\"#防篡改对象\"></a> 防篡改对象</h2>\n<p>定义的对象默认在任何时候、任何位置，无论有意义的还是无意义的都可以修改对象的属性或方法。而这些篡改可能会影响对象的内置属性或方法，从而导致对象的正常功能可能无法使用。<br />\nJavascript在ES5版本中新増了放置纂改对象的属性或方法的机制，共提供了以下三级保护方式</p>\n<ul>\n<li>\n<p>禁止扩展</p>\n<p>禁止为对象扩展新的属性或方法</p>\n</li>\n<li>\n<p>密封对象</p>\n<p>禁止扩展新的属性或方法，禁止配置现有的属性或方法的描述符，仅允许读写属性的值</p>\n</li>\n<li>\n<p>冻结对象</p>\n<p>禁止对对象执行任何修改操作。</p>\n</li>\n</ul>\n<h3 id=\"禁止扩展\"><a class=\"markdownIt-Anchor\" href=\"#禁止扩展\"></a> 禁止扩展</h3>\n<p>禁止扩展只需要调用<code>Object.preventExtensions(obj)</code>方法即可，参数就是需要禁止的对象.</p>\n<p>一旦设置禁止扩展,那么该对象不可新增属性或方法.</p>\n<ul>\n<li>使用<code>obj.name</code>方法新增不会报错但无效</li>\n<li>使用<code>Object.defineProperty</code>方法新增会报错.</li>\n</ul>\n<p>判断对象是否可扩展使用方法<code>Object.isExtensible(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示可被扩展,<code>false</code>表示不可被扩展.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将对象设置禁止扩展</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 新增属性或方法无效 -> 语法没有报错</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此方法新增或修改或报错</span>\n<span class=\"token comment\">// Cannot define property name, object is not extensible</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回布尔值 true表示可扩展 false表示不可扩展</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"密封对象\"><a class=\"markdownIt-Anchor\" href=\"#密封对象\"></a> 密封对象</h3>\n<p>将对象进行密封调用<code>Object.seal(obj)</code>即可,参数为需要密封的对象.</p>\n<p>一旦将对象进行了密封,那么需要注意如下:</p>\n<ul>\n<li>不能为该对象<strong>新增</strong>属性或方法</li>\n<li>不能修改该对象的以下属性或方法的描述符\n<ul>\n<li><code>configurable</code></li>\n<li><code>enumerable</code></li>\n</ul>\n</li>\n</ul>\n<p>判断是否是密封对象<code>Object.isSealed(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示被密封了,<code>false</code>表示没有被密封</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//可修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将该对象进行密封</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 将对象进行密封\n * 1. 不能为该对象新增属性或方法\n * 2. 不能修改该对象的属性或方法的描述符（configurable、enumerable）\n */</span>\n<span class=\"token comment\">// // 新增属性</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// // 修改属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '周芷若' &#125;</span>\n\n<span class=\"token comment\">// 报错</span>\n<span class=\"token comment\">// Object.defineProperty(obj, \"age\", &#123;</span>\n<span class=\"token comment\">//   value: 18,</span>\n<span class=\"token comment\">// &#125;);</span>\n<span class=\"token comment\">// 修改值</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//   configurable: true, //不可修改</span>\n  <span class=\"token comment\">//   enumerable: true, //不可修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '周芷若' &#125;</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '赵敏' &#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"冻结对象\"><a class=\"markdownIt-Anchor\" href=\"#冻结对象\"></a> 冻结对象</h3>\n<p>将对象进行密封调用<code>Object.freeze(obj)</code>即可,参数为需要冻结的对象.</p>\n<p>一旦将对象进行了冻结,那么该对象只能使用,不能做任何修改,包括删除</p>\n<p>判断是否是密封对象<code>Object.isFrozen(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示被冻结了,<code>false</code>表示没有被冻结</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 冻结对象</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 新增</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// 修改</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// 删除</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n\n<span class=\"token comment\">// 以下方法报错</span>\n<span class=\"token comment\">// Object.defineProperty(obj, \"age\", &#123;</span>\n<span class=\"token comment\">//   value: 18,</span>\n<span class=\"token comment\">// &#125;);</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h1 id=\"object对象\"><a class=\"markdownIt-Anchor\" href=\"#object对象\"></a> Object对象</h1>\n<p>创建对象的三种形式</p>\n<ol>\n<li>\n<p>创建空对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>创建一个与给定值对应类型的对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[Number: 100]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>当以非构造函数形式被调用时，Object 等同于 new Object()。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj4 <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//函数调用</span>\n<span class=\"token keyword\">var</span> obj5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造函数调用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#属性描述符\"></a> 属性描述符</h2>\n<p>Javascript提供了一个内部数据结构，用于描述对象的值，控制其行为，例如该属性是否可写、是否可配置、是否可修改以及是否可枚举等。这个内部数据结构被称为“属性描述符”。</p>\n<p><strong>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。</strong></p>\n<h3 id=\"数据描述符\"><a class=\"markdownIt-Anchor\" href=\"#数据描述符\"></a> 数据描述符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>value</code></td>\n<td style=\"text-align:center\">该属性对应的值，可以是任何有效的Javascript值（数值，对象，函数等）。</td>\n<td style=\"text-align:center\"><code>undefiend</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>writable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>writable</code>为<code>true</code>时， valueオ能被赋值运算符改変。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>configurable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>configurable</code>为<code>true</code>时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>enumerable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"存取描述符\"><a class=\"markdownIt-Anchor\" href=\"#存取描述符\"></a> 存取描述符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键</th>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>get</code></td>\n<td style=\"text-align:center\">给属性提供<code>getter</code>的方法，如果没有<code>getter</code>则为<code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传人<code>this</code>对象。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>set</code></td>\n<td style=\"text-align:center\">给属性提供<code>setter</code>的方法，如果没有<code>setter</code>则为undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>configurable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>configurable</code>为<code>true</code>时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>enumerable</code></td>\n<td style=\"text-align:center\">当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。</td>\n<td style=\"text-align:center\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"获取属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#获取属性描述符\"></a> 获取属性描述符</h2>\n<p>通过<code>Object.getOwnPropertyNames(object,prop)</code>方法获取属性描述符，其中:</p>\n<ul>\n<li>\n<p><code>object</code></p>\n<p>表示指定属性对应的目标对象</p>\n</li>\n<li>\n<p><code>prop</code></p>\n<p>表示描述符的目标属性名称</p>\n</li>\n<li>\n<p>返回值</p>\n<p>其属性描述符对象</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 通过定义对象(属性火方法)这种方式\n * 属性默认都是数据描述符\n */</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 使用Object.getOwnPropertyNames()方法获取指定属性的描述符\n *  Object.getOwnPropertyNames(object,prop)\n *  object - 表示指定属性对应的目标对象\n *  prop - 表示描述符的目标属性名称\n *  返回值 - 其属性描述符对象\n *\n *\n * */</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; value: '张无忌', writable: true, enumerable: true, configurable: true &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张无忌</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/64d246f4c2025025be3cda1ff7c630d1.png\" alt=\"image-20200525182426781\" /></p>\n<h2 id=\"设置属性描述符\"><a class=\"markdownIt-Anchor\" href=\"#设置属性描述符\"></a> 设置属性描述符</h2>\n<p>设置属性使用<code>Object.defineProperty(obj,prop,desc)</code>方法，他的作用有两个：用于定义目标对象的新属性、修改目标对象的已存在属性。其中：</p>\n<ul>\n<li>\n<p><code>obj</code></p>\n<p>表示目标对象</p>\n</li>\n<li>\n<p><code>prop</code></p>\n<p>表示目标对象的目标属性名称</p>\n</li>\n<li>\n<p><code>desc</code></p>\n<p>表示属性描述符,必须是对象的格式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>返回值</p>\n<p>返回传递的对象</p>\n</li>\n</ul>\n<div class=\"note info icon\"><p>设置value值</p></div>\n<ol>\n<li>\n<p>修改一个值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>新增一个值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    value<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//18</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p><span class=\"inline-tag yellow\">与常规方式的区别</span></p>\n<ul>\n<li>\n<p>如果使用&quot;对象名.属性名 = 值&quot;</p>\n<p>可修改,可删除,可枚举</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/45b4a6b90bf0280871c7d9bb446c6328.png\" alt=\"image-20200525185644351\" /></p>\n</li>\n<li>\n<p>如果使用<code>Object.defineProperty()</code>方法新增属性</p>\n<p>不可修改命不可删除以及不可枚举</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8131ada4df008881f91402ab56d3a1e9.png\" alt=\"image-20200525185448117\" /></p>\n</li>\n</ul>\n<div class=\"note danger icon\"><p>一旦属性的值是不可修改的，执行修改操作:没有语法错误,但修改无效</p></div>\n<p>由图可以得知：用<code>Object.defineProperty()</code>方法新增属性后，再次修改后输出，值并未发生变化。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/6032673ec35a73b2696a0c137cd632e7.png\" alt=\"image-20200525185908552\" /></p>\n<div class=\"note info icon\"><p>设置wriable值</p></div>\n<p>该值为布尔值，默认为<code>false</code>。表示属性值可否被修改。</p>\n<ol>\n<li>\n<p>修改现有属性</p>\n<p>当<code>writable</code>为false时，无法修改其属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 修改现有属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//周芷若</span>\n<span class=\"token comment\">// 修改name属性值</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//周芷若</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/04873fda9f2cfb2ffe27ef4f7fcaae89.png\" alt=\"image-20200525190849263\" /></p>\n</li>\n<li>\n<p>新增属性</p>\n<p>与修改同理当<code>writable</code>为false时，无法修改其属性。为true时可以修改.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/c43e3f51bc843ec84345402e024178fc.png\" alt=\"image-20200525191011582\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/e0cc677276fe30bd28332c698cf0a369.png\" alt=\"image-20200525191025302\" /></p>\n</li>\n</ol>\n<div class=\"note info icon\"><p>设置configurable值</p></div>\n<p>Booleant值，表示目标属性的描述符是否可以被修改。当且仅当该属性的configurable为true时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除.默认为<code>false</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/df3517d733fd0b85b26bc7337d205807.png\" alt=\"image-20200525191541996\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/8fc22fdbcda326da3491154e767e81af.png\" alt=\"image-20200525191604800\" /></p>\n<div class=\"note info icon\"><p>设置enumerable值</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举)</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 属性描述符enumerable - 控制当前属性是否可被枚举（遍历）\n * 仅能循环遍历对象中可被枚举的属性\n *   * for...in语句\n *   * keys()方法\n * 可以循环遍历对象中可被枚举和不可被枚举的属性\n * getOwnPropertyNames()方法\n */</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码执行结果:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/07637737e8bfc274f255fda583f55b34.png\" alt=\"image-20200525193053912\" /></p>\n<ol start=\"3\">\n<li>\n<p>属性描述符也可以设置方法，与上述属性设置一模一样。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">sayMe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sayMe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n&#123;\n  value: [Function: sayMe],\n  writable: true,\n  enumerable: true,\n  configurable: true\n&#125;\n*/</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sayMe\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is new function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is new function</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayMe</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">sayMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this is new function</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"属性描述符的存取器\"><a class=\"markdownIt-Anchor\" href=\"#属性描述符的存取器\"></a> 属性描述符的存取器</h2>\n<ol>\n<li>\n<p>get</p>\n<p><code>get</code>当获取或访问当前属性时，会调用此方法。</p>\n<blockquote>\n<p>类似数据描述符中的value</p>\n<ul>\n<li>\n<p>get方法在被调用时，不能传递任何参数</p>\n</li>\n<li>\n<p>get方法在被调用时，允许传递this关键字</p>\n<ul>\n<li>this - 表示当前的目标对象</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 获取指定的属性</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当获取或访问当前属性时，会调用此方法</span>\n    <span class=\"token comment\">/**\n     * 类似数据描述符中的value\n     * get方法在被调用时，不能传递任何参数\n     * get方法在被调用时，允许传递this关键字\n     *   this - 表示当前的目标对象\n     */</span>\n    <span class=\"token comment\">// return this;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 周芷若</span>\n<span class=\"token comment\">// 同样的如果只设置get，那么也是不能修改的。</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 周芷若</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>set</p>\n<p>set方法用于定义当前目标函数的修改功能</p>\n<blockquote>\n<ul>\n<li>\n<p>该方法接收唯一的一个参数</p>\n<p>作为当前目标属性的新的值</p>\n</li>\n<li>\n<p>通过属性修改操作指定新的值</p>\n<p>作为形参对应的实参</p>\n</li>\n</ul>\n</blockquote>\n<p>此方法修改值需借助一个变量，例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//全局变量</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * set方法用于定义当前目标函数的修改功能\n   * 该方法接收唯一的一个参数 -> 作为当前目标属性的新的值\n   * 通过属性修改操作指定新的值 -> 作为形参对应的实参\n   *\n   */</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is set function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    value <span class=\"token operator\">=</span> newvalue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//赵敏</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"note warning icon\"><p>需要注意的是：如果变量没有初始化获取值，那么值是undefined。</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">//全局变量</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newvalue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is set function \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    value <span class=\"token operator\">=</span> newvalue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<div class=\"note success icon\"><p>关于get与set的另一种常见写法</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存取描述符中的get</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setter:\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//张三</span>\nobj<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//setter:100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这种写法中，赋值与上方一致，也是定义一个新的变量，然后赋值。此写法结果与用法与上边一致，只是写法不同。</p>\n<h2 id=\"防篡改对象\"><a class=\"markdownIt-Anchor\" href=\"#防篡改对象\"></a> 防篡改对象</h2>\n<p>定义的对象默认在任何时候、任何位置，无论有意义的还是无意义的都可以修改对象的属性或方法。而这些篡改可能会影响对象的内置属性或方法，从而导致对象的正常功能可能无法使用。<br />\nJavascript在ES5版本中新増了放置纂改对象的属性或方法的机制，共提供了以下三级保护方式</p>\n<ul>\n<li>\n<p>禁止扩展</p>\n<p>禁止为对象扩展新的属性或方法</p>\n</li>\n<li>\n<p>密封对象</p>\n<p>禁止扩展新的属性或方法，禁止配置现有的属性或方法的描述符，仅允许读写属性的值</p>\n</li>\n<li>\n<p>冻结对象</p>\n<p>禁止对对象执行任何修改操作。</p>\n</li>\n</ul>\n<h3 id=\"禁止扩展\"><a class=\"markdownIt-Anchor\" href=\"#禁止扩展\"></a> 禁止扩展</h3>\n<p>禁止扩展只需要调用<code>Object.preventExtensions(obj)</code>方法即可，参数就是需要禁止的对象.</p>\n<p>一旦设置禁止扩展,那么该对象不可新增属性或方法.</p>\n<ul>\n<li>使用<code>obj.name</code>方法新增不会报错但无效</li>\n<li>使用<code>Object.defineProperty</code>方法新增会报错.</li>\n</ul>\n<p>判断对象是否可扩展使用方法<code>Object.isExtensible(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示可被扩展,<code>false</code>表示不可被扩展.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将对象设置禁止扩展</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 新增属性或方法无效 -> 语法没有报错</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 此方法新增或修改或报错</span>\n<span class=\"token comment\">// Cannot define property name, object is not extensible</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回布尔值 true表示可扩展 false表示不可扩展</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">isExtensible</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"密封对象\"><a class=\"markdownIt-Anchor\" href=\"#密封对象\"></a> 密封对象</h3>\n<p>将对象进行密封调用<code>Object.seal(obj)</code>即可,参数为需要密封的对象.</p>\n<p>一旦将对象进行了密封,那么需要注意如下:</p>\n<ul>\n<li>不能为该对象<strong>新增</strong>属性或方法</li>\n<li>不能修改该对象的以下属性或方法的描述符\n<ul>\n<li><code>configurable</code></li>\n<li><code>enumerable</code></li>\n</ul>\n</li>\n</ul>\n<p>判断是否是密封对象<code>Object.isSealed(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示被密封了,<code>false</code>表示没有被密封</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//可修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将该对象进行密封</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">seal</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n * 将对象进行密封\n * 1. 不能为该对象新增属性或方法\n * 2. 不能修改该对象的属性或方法的描述符（configurable、enumerable）\n */</span>\n<span class=\"token comment\">// // 新增属性</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// // 修改属性</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '周芷若' &#125;</span>\n\n<span class=\"token comment\">// 报错</span>\n<span class=\"token comment\">// Object.defineProperty(obj, \"age\", &#123;</span>\n<span class=\"token comment\">//   value: 18,</span>\n<span class=\"token comment\">// &#125;);</span>\n<span class=\"token comment\">// 修改值</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">,</span>\n  writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//   configurable: true, //不可修改</span>\n  <span class=\"token comment\">//   enumerable: true, //不可修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '周芷若' &#125;</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"赵敏\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '赵敏' &#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"冻结对象\"><a class=\"markdownIt-Anchor\" href=\"#冻结对象\"></a> 冻结对象</h3>\n<p>将对象进行密封调用<code>Object.freeze(obj)</code>即可,参数为需要冻结的对象.</p>\n<p>一旦将对象进行了冻结,那么该对象只能使用,不能做任何修改,包括删除</p>\n<p>判断是否是密封对象<code>Object.isFrozen(obj)</code>,参数同样是需要判断的对象.</p>\n<p>返回一个布尔值,<code>true</code>表示被冻结了,<code>false</code>表示没有被冻结</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 冻结对象</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 新增</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// 修改</span>\nobj<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"周芷若\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n<span class=\"token comment\">// 删除</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; name: '张无忌' &#125;</span>\n\n<span class=\"token comment\">// 以下方法报错</span>\n<span class=\"token comment\">// Object.defineProperty(obj, \"age\", &#123;</span>\n<span class=\"token comment\">//   value: 18,</span>\n<span class=\"token comment\">// &#125;);</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">isFrozen</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}