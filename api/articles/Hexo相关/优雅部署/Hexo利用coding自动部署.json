{"title":"Hexo利用coding自动部署","slug":"Hexo相关/优雅部署/Hexo利用coding自动部署","date":"2020-02-09T02:10:00.000Z","updated":"2022-02-21T04:45:27.384Z","comments":true,"path":"api/articles/Hexo相关/优雅部署/Hexo利用coding自动部署.json","excerpt":null,"covers":["https://tva1.sinaimg.cn/large/005B3XPgly1gbpxptg2t4j318u0ncmy8.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpxmhumxhj30r40l8jss.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpxp27h0gj30qn03uq2y.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpy1w0nthj319n0lgq49.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpy31njikj30v20j2ta2.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpy5mo1z2j311b0kswfr.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpydcsylcj30hw0kyjsk.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpye2semmj316x094dg9.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpzdlsk0kj30w005hwek.jpg","https://tva1.sinaimg.cn/large/005B3XPgly1gbpzgcibu3j31ec0dqjs7.jpg"],"content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>昨天写了一篇利于云环境写博客，但是让群里大佬们看了下。评论道：“写的不错，但还是觉得这个云环境太繁琐了，没有CI/CD自动化部署方便”。于是我便百度查了下，网上文章大部分是通过Travis CI整的，但我的源文件在coding呀！于是我便尝试了使用coding自动化部署。</p>\n<p>为什么要使用自动部署呢？</p>\n<p>因为随着我们的长时间写文章，生成时间也就更长。在加上要加载插件。如果你换一个电脑更明显，首先你要安装node环境然后······</p>\n<p>自动部署只需要把你的源代码提交，云会自动帮你执行编译过程，从而省去了自己编译的过程。</p>\n<h2 id=\"1-创建访问认证\"><a class=\"markdownIt-Anchor\" href=\"#1-创建访问认证\"></a> 1. 创建访问认证</h2>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxptg2t4j318u0ncmy8.jpg\" alt=\"1.png\" /></p>\n<p>如图，创建令牌，然后描述随便写，全写给<code>project:depot</code>即可，不然没办法拉去仓库。创建完成后会出现id，我们复制这个id并保存下来，因为只出现一次。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxmhumxhj30r40l8jss.jpg\" alt=\"2.png\" /><br />\n<img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxp27h0gj30qn03uq2y.jpg\" alt=\"3.png\" /></p>\n<p>在此时我们就拿到了访问项目的账号和密码。此时我们的访问地址变成了<code>https://user.name:user.password@项目地址</code>举个简单的例子：</p>\n<p>假如说我的</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>https://e.coding.net/test/test.git</code></li>\n</ul>\n<p>那么我们的访问地址就是<code>https://root:abcdefg@e.coding.net/test/test.git</code></p>\n<p>也就是<code>https://user.name:user.password@地址</code>这样的格式。</p>\n<h2 id=\"2-编写构建\"><a class=\"markdownIt-Anchor\" href=\"#2-编写构建\"></a> 2. 编写构建</h2>\n<p><em>如果你没有构建功能，请到左下角项目设置-&gt;项目与成员-&gt;功能开关 将构建与部署的功能打开。</em></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy1w0nthj319n0lgq49.jpg\" alt=\"4.png\" /></p>\n<p>如图 点击构建，再点击下边的 新建构建计划配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy31njikj30v20j2ta2.jpg\" alt=\"5.png\" /></p>\n<p>然后我们我们的代码源选择CODING，仓库只有一种选择。</p>\n<p>配置来源选择自定义，勾选下边的前往配置详情。然后选择文本编辑器</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy5mo1z2j311b0kswfr.jpg\" alt=\"6.png\" /></p>\n<p>将下边的代码复制上去。注意修改你自己的git地址。注意<code>sh 'git clone https://账号:密码@地址 .'</code>最后边的<code>.</code>千万别删掉。删掉可能导致发布不成功。（虽然提示成功）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pipeline <span class=\"token punctuation\">&#123;</span>\n  agent any\n  stages <span class=\"token punctuation\">&#123;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'克隆项目'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'git clone https://账号:密码@地址 .'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'ls -a'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'安装依赖'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'ls -a'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'npm install -g hexo-cli'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'npm install hexo --save'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'构建发布'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为什么不能删那个点<code>.</code>？</p>\n<blockquote>\n<p>那个点代表当前目录，也就是把你的项目克隆到当前文件。</p>\n<p>2020-04-10更新：因为coding自带环境存在node，因此不再选择环境</p>\n</blockquote>\n<p>然后我们点击左上角的保存。</p>\n<h2 id=\"3-上传\"><a class=\"markdownIt-Anchor\" href=\"#3-上传\"></a> 3. 上传</h2>\n<p>我们新建一篇文章，我本人呢是边写这篇文章边测试的。所以当这篇文章发表出来的时候也就说明自动部署成功了。</p>\n<p>我们进行简单的文章推送。这里我使用的是git小乌龟。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpydcsylcj30hw0kyjsk.jpg\" alt=\"7.png\" /></p>\n<p>推送成功后coding的自动部署已经在运行了</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpye2semmj316x094dg9.jpg\" alt=\"8.png\" /></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpzdlsk0kj30w005hwek.jpg\" alt=\"9.png\" /></p>\n<h2 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h2>\n<ol>\n<li>请确保你的pages项目仓库是公开的，否则请同样配置访问密钥，并修改hexo根目录下的配置文件。</li>\n</ol>\n<p>如果你的pages服务在coding，并且仓库是私有的，那么请添加项目令牌。并替换博客根目录的地址。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpzgcibu3j31ec0dqjs7.jpg\" alt=\"10.png\" /></p>\n<p>然后替换博客根目录下 配置文件中的git地址。</p>\n<p>同样的地址也是<code>https://username:password@项目地址</code></p>\n<p>假如说我的</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>https://e.coding.net/test/test.git</code></li>\n</ul>\n<p>那么在配置文件中的地址就是<code>https://root:abcdefg@e.coding.net/test/test.git</code></p>\n<h3 id=\"coding可以部署部署几次\"><a class=\"markdownIt-Anchor\" href=\"#coding可以部署部署几次\"></a> coding可以部署部署几次</h3>\n<p>coding可以构建多少次。这个问题我曾问过官方：官方的回答是：“CODING的持续集成，每周构建次数是200次，单次构建时长是30分钟。每周一重置次数。”官方还说后期会上线持续集成升级包。</p>\n<p>最后，如果我的文章对你有帮助，那么你可以点下边的赞赏按钮，请作者喝杯咖啡哦！</p>\n<p>如果图片失效请在下方留言，或联系作者。</p>\n<center><font color=red size=5><b>原创不易，所有文字及图片都是我自己一个一个弄得。</b></font></center>\n<center><font color=red size=5><b>搬砖党请尊重一下作者，转载请标明出处。</b></font></center>\n","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<p>昨天写了一篇利于云环境写博客，但是让群里大佬们看了下。评论道：“写的不错，但还是觉得这个云环境太繁琐了，没有CI/CD自动化部署方便”。于是我便百度查了下，网上文章大部分是通过Travis CI整的，但我的源文件在coding呀！于是我便尝试了使用coding自动化部署。</p>\n<p>为什么要使用自动部署呢？</p>\n<p>因为随着我们的长时间写文章，生成时间也就更长。在加上要加载插件。如果你换一个电脑更明显，首先你要安装node环境然后······</p>\n<p>自动部署只需要把你的源代码提交，云会自动帮你执行编译过程，从而省去了自己编译的过程。</p>\n<h2 id=\"1-创建访问认证\"><a class=\"markdownIt-Anchor\" href=\"#1-创建访问认证\"></a> 1. 创建访问认证</h2>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxptg2t4j318u0ncmy8.jpg\" alt=\"1.png\" /></p>\n<p>如图，创建令牌，然后描述随便写，全写给<code>project:depot</code>即可，不然没办法拉去仓库。创建完成后会出现id，我们复制这个id并保存下来，因为只出现一次。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxmhumxhj30r40l8jss.jpg\" alt=\"2.png\" /><br />\n<img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpxp27h0gj30qn03uq2y.jpg\" alt=\"3.png\" /></p>\n<p>在此时我们就拿到了访问项目的账号和密码。此时我们的访问地址变成了<code>https://user.name:user.password@项目地址</code>举个简单的例子：</p>\n<p>假如说我的</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>https://e.coding.net/test/test.git</code></li>\n</ul>\n<p>那么我们的访问地址就是<code>https://root:abcdefg@e.coding.net/test/test.git</code></p>\n<p>也就是<code>https://user.name:user.password@地址</code>这样的格式。</p>\n<h2 id=\"2-编写构建\"><a class=\"markdownIt-Anchor\" href=\"#2-编写构建\"></a> 2. 编写构建</h2>\n<p><em>如果你没有构建功能，请到左下角项目设置-&gt;项目与成员-&gt;功能开关 将构建与部署的功能打开。</em></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy1w0nthj319n0lgq49.jpg\" alt=\"4.png\" /></p>\n<p>如图 点击构建，再点击下边的 新建构建计划配置</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy31njikj30v20j2ta2.jpg\" alt=\"5.png\" /></p>\n<p>然后我们我们的代码源选择CODING，仓库只有一种选择。</p>\n<p>配置来源选择自定义，勾选下边的前往配置详情。然后选择文本编辑器</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpy5mo1z2j311b0kswfr.jpg\" alt=\"6.png\" /></p>\n<p>将下边的代码复制上去。注意修改你自己的git地址。注意<code>sh 'git clone https://账号:密码@地址 .'</code>最后边的<code>.</code>千万别删掉。删掉可能导致发布不成功。（虽然提示成功）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pipeline <span class=\"token punctuation\">&#123;</span>\n  agent any\n  stages <span class=\"token punctuation\">&#123;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'克隆项目'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'git clone https://账号:密码@地址 .'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'ls -a'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'安装依赖'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'ls -a'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'npm install -g hexo-cli'</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'npm install hexo --save'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'构建发布'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sh</span> <span class=\"token string\">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为什么不能删那个点<code>.</code>？</p>\n<blockquote>\n<p>那个点代表当前目录，也就是把你的项目克隆到当前文件。</p>\n<p>2020-04-10更新：因为coding自带环境存在node，因此不再选择环境</p>\n</blockquote>\n<p>然后我们点击左上角的保存。</p>\n<h2 id=\"3-上传\"><a class=\"markdownIt-Anchor\" href=\"#3-上传\"></a> 3. 上传</h2>\n<p>我们新建一篇文章，我本人呢是边写这篇文章边测试的。所以当这篇文章发表出来的时候也就说明自动部署成功了。</p>\n<p>我们进行简单的文章推送。这里我使用的是git小乌龟。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpydcsylcj30hw0kyjsk.jpg\" alt=\"7.png\" /></p>\n<p>推送成功后coding的自动部署已经在运行了</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpye2semmj316x094dg9.jpg\" alt=\"8.png\" /></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpzdlsk0kj30w005hwek.jpg\" alt=\"9.png\" /></p>\n<h2 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\"></a> 常见问题</h2>\n<ol>\n<li>请确保你的pages项目仓库是公开的，否则请同样配置访问密钥，并修改hexo根目录下的配置文件。</li>\n</ol>\n<p>如果你的pages服务在coding，并且仓库是私有的，那么请添加项目令牌。并替换博客根目录的地址。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/005B3XPgly1gbpzgcibu3j31ec0dqjs7.jpg\" alt=\"10.png\" /></p>\n<p>然后替换博客根目录下 配置文件中的git地址。</p>\n<p>同样的地址也是<code>https://username:password@项目地址</code></p>\n<p>假如说我的</p>\n<ul>\n<li>令牌用户名是：<code>root</code></li>\n<li>令牌密码是：<code>abcdefg</code></li>\n<li>项目地址是<code>https://e.coding.net/test/test.git</code></li>\n</ul>\n<p>那么在配置文件中的地址就是<code>https://root:abcdefg@e.coding.net/test/test.git</code></p>\n<h3 id=\"coding可以部署部署几次\"><a class=\"markdownIt-Anchor\" href=\"#coding可以部署部署几次\"></a> coding可以部署部署几次</h3>\n<p>coding可以构建多少次。这个问题我曾问过官方：官方的回答是：“CODING的持续集成，每周构建次数是200次，单次构建时长是30分钟。每周一重置次数。”官方还说后期会上线持续集成升级包。</p>\n<p>最后，如果我的文章对你有帮助，那么你可以点下边的赞赏按钮，请作者喝杯咖啡哦！</p>\n<p>如果图片失效请在下方留言，或联系作者。</p>\n<center><font color=red size=5><b>原创不易，所有文字及图片都是我自己一个一个弄得。</b></font></center>\n<center><font color=red size=5><b>搬砖党请尊重一下作者，转载请标明出处。</b></font></center>\n","categories":[{"name":"Hexo","path":"api/categories/Hexo.json"},{"name":"优雅部署","path":"api/categories/优雅部署.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"配置环境","path":"api/tags/配置环境.json"}]}