{"title":"四、Docker安装常用服务及常用操作","slug":"日常学习/部署与构建/Docker/4. Docker安装常用服务及常用操作","date":"2021-02-27T15:17:00.000Z","updated":"2021-02-27T15:17:00.000Z","comments":true,"path":"api/articles/日常学习/部署与构建/Docker/4. Docker安装常用服务及常用操作.json","excerpt":null,"covers":null,"content":"<h2 id=\"如何安装\"><a class=\"markdownIt-Anchor\" href=\"#如何安装\"></a> 如何安装</h2>\n<p>下载镜像需要在<a href=\"https://hub.docker.com\">dockerHub</a>中进行搜索，搜索出需要安装的镜像后可以通过其项目提供的Readme进行安装与使用。一般情况下的步骤</p>\n<ol>\n<li>确定版本</li>\n<li>拉取</li>\n</ol>\n<h2 id=\"安装mysql\"><a class=\"markdownIt-Anchor\" href=\"#安装mysql\"></a> 安装MySQL</h2>\n<blockquote>\n<p>以5.7.33版本为例</p>\n</blockquote>\n<ol>\n<li>\n<p>拉取镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull mysql:5.7.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动镜像</p>\n<p>mysql服务内置了环境变量，需要在启动时进行指定。</p>\n<blockquote>\n<p>将<code>/root/mysql</code>映射到容器的数据库文件，从而保证数据的安全。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>MYSQL_ROOT_PASSWORD</code></p>\n<p>root用户的密码</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root -p <span class=\"token number\">3306</span>:3306 -d -v /root/mysql:/var/lib/mysql  mysql:5.7.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上面命令会启动MySQL服务并设置root密码为<code>root</code>，监听端口为3306，并将docker容器内的数据文件与本机<code>/root/mysql</code>进行关联。</p>\n</blockquote>\n</li>\n<li>\n<p>其他命令</p>\n<ul>\n<li>\n<p>进入MySQL服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it 容器名称<span class=\"token operator\">|</span>容器id <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>外部查看MySQL日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker logs 容器名称<span class=\"token operator\">|</span>容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将MySQL数据库备份为sql文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 导出全部数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql<span class=\"token operator\">|</span>容器id <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --all-databases -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql \n\n<span class=\"token comment\"># 导出指定库数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --databases 库表 -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql\n\n<span class=\"token comment\"># 导出指定库数据不要数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --no-data --databases 库表 -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>执行sql文件到MySQL中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -i mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysql -uroot - p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">&lt;</span> /root/xxx.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"安装mongodb数据库\"><a class=\"markdownIt-Anchor\" href=\"#安装mongodb数据库\"></a> 安装MongoDB数据库</h2>\n<ol>\n<li>\n<p>拉取镜像（最新）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>运行镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -d -p <span class=\"token number\">27017</span>:27017 -v /root/mongo/data:/data/db --name mymongo mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>手动配置用户名密码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入容器</span>\ndocker <span class=\"token builtin class-name\">exec</span> -it mymongo /bin/bash\nmongo\n\n<span class=\"token comment\"># 选择 admin库</span>\nuse admin\n\n<span class=\"token comment\"># 运行命令</span>\ndb.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"root\"</span>,pwd:<span class=\"token string\">\"root\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">'root'</span>,db:<span class=\"token string\">'admin'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装redis服务\"><a class=\"markdownIt-Anchor\" href=\"#安装redis服务\"></a> 安装redis服务</h2>\n<ol>\n<li>\n<p>下载镜像（最版版本）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动容器并挂载到本地，开启持久化存储</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name redis -v /root/redis/data:/data -p <span class=\"token number\">6379</span>:6379 -d redis redis-server --appendonly <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自定义配置文件</p>\n<p>在<code>/root/redis</code>目录下新建<code>redis.conf</code>文件（酌情新建即可），然后写入如下内容。（推荐下载使用对应版本的配置文件）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#  开启远程权限\nbind 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>最后加载配置启动并开启持久化数据</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name redis -v /root/redis/data:/data -v /root/redis/config:/usr/local/etc/redis/redis.conf -p <span class=\"token number\">6379</span>:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  --appendonly <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装tomcat\"><a class=\"markdownIt-Anchor\" href=\"#安装tomcat\"></a> 安装tomcat</h2>\n<ol>\n<li>\n<p>下载tomcat镜像（最新版本）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>运行tomcat镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">8080</span>:8080 -d --name mytomcat tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>进入tomcat镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it mytomcat /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将webapps目录挂载在外部</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">8080</span>:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装nginx\"><a class=\"markdownIt-Anchor\" href=\"#安装nginx\"></a> 安装Nginx</h2>\n<ol>\n<li>\n<p>下载镜像（最新）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动Nginx容器</p>\n<blockquote>\n<p>nginx配置文件目录：<code>/etc/nginx/conf.d</code></p>\n<p>html静态文件目录：<code>/usr/share/nginx/html</code></p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">80</span>:80 --name nginx01 -d -v /root/nginx/conf.d:/etc/nginx/conf.d -v /root/nginx/html:/usr/share/nginx/html  nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>启动时会将镜像内文件与宿主机进行关联，因此如果宿主机没有配置文件或html文件时会导致nginx也会丢失默认配置和html页面</p>\n</blockquote>\n<p>默认配置</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">listen</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">server_name</span>  localhost<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">#charset koi8-r;</span>\n  <span class=\"token comment\">#access_log  /var/log/nginx/host.access.log  main;</span>\n\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">root</span>   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">index</span>  <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>htm<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n  <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">root</span>   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n  <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n  <span class=\"token comment\">#&#125;</span>\n\n  <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n  <span class=\"token comment\">#    root           html;</span>\n  <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n  <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n  <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n  <span class=\"token comment\">#    include        fastcgi_params;</span>\n  <span class=\"token comment\">#&#125;</span>\n\n  <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n  <span class=\"token comment\"># concurs with nginx's one</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n  <span class=\"token comment\">#    deny  all;</span>\n  <span class=\"token comment\">#&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>进入容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it nginx01 /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"反向代理宿主机服务\"><a class=\"markdownIt-Anchor\" href=\"#反向代理宿主机服务\"></a> 反向代理宿主机服务</h3>\n<ol>\n<li>\n<p>在安装Docker的时候，会在宿主机安装一个虚拟网关 docker0，查询docker0的IP地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ip</span> addr show docker0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>配置docker上安装的nginx</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server_name</span> xiaokang<span class=\"token punctuation\">.</span>me<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\"># 设置最大允许上传单个的文件大小</span>\n            <span class=\"token keyword\">client_max_body_size</span> <span class=\"token number\">100</span>m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_redirect</span> off<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\"># 反向代理到 tomcat</span>\n            <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3002</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>重新启动nginx容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker restart nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n","more":"<h2 id=\"如何安装\"><a class=\"markdownIt-Anchor\" href=\"#如何安装\"></a> 如何安装</h2>\n<p>下载镜像需要在<a href=\"https://hub.docker.com\">dockerHub</a>中进行搜索，搜索出需要安装的镜像后可以通过其项目提供的Readme进行安装与使用。一般情况下的步骤</p>\n<ol>\n<li>确定版本</li>\n<li>拉取</li>\n</ol>\n<h2 id=\"安装mysql\"><a class=\"markdownIt-Anchor\" href=\"#安装mysql\"></a> 安装MySQL</h2>\n<blockquote>\n<p>以5.7.33版本为例</p>\n</blockquote>\n<ol>\n<li>\n<p>拉取镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull mysql:5.7.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动镜像</p>\n<p>mysql服务内置了环境变量，需要在启动时进行指定。</p>\n<blockquote>\n<p>将<code>/root/mysql</code>映射到容器的数据库文件，从而保证数据的安全。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>MYSQL_ROOT_PASSWORD</code></p>\n<p>root用户的密码</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name mysql -e <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root -p <span class=\"token number\">3306</span>:3306 -d -v /root/mysql:/var/lib/mysql  mysql:5.7.33<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上面命令会启动MySQL服务并设置root密码为<code>root</code>，监听端口为3306，并将docker容器内的数据文件与本机<code>/root/mysql</code>进行关联。</p>\n</blockquote>\n</li>\n<li>\n<p>其他命令</p>\n<ul>\n<li>\n<p>进入MySQL服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it 容器名称<span class=\"token operator\">|</span>容器id <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>外部查看MySQL日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker logs 容器名称<span class=\"token operator\">|</span>容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将MySQL数据库备份为sql文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 导出全部数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql<span class=\"token operator\">|</span>容器id <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --all-databases -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql \n\n<span class=\"token comment\"># 导出指定库数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --databases 库表 -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql\n\n<span class=\"token comment\"># 导出指定库数据不要数据</span>\ndocker <span class=\"token builtin class-name\">exec</span> mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysqldump --no-data --databases 库表 -uroot -p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">></span> /root/all-databases.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>执行sql文件到MySQL中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -i mysql <span class=\"token function\">sh</span> -c <span class=\"token string\">'exec mysql -uroot - p\"<span class=\"token variable\">$MYSQL_ROOT_PASSWORD</span>\"'</span> <span class=\"token operator\">&lt;</span> /root/xxx.sql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"安装mongodb数据库\"><a class=\"markdownIt-Anchor\" href=\"#安装mongodb数据库\"></a> 安装MongoDB数据库</h2>\n<ol>\n<li>\n<p>拉取镜像（最新）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>运行镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -d -p <span class=\"token number\">27017</span>:27017 -v /root/mongo/data:/data/db --name mymongo mongo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>手动配置用户名密码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入容器</span>\ndocker <span class=\"token builtin class-name\">exec</span> -it mymongo /bin/bash\nmongo\n\n<span class=\"token comment\"># 选择 admin库</span>\nuse admin\n\n<span class=\"token comment\"># 运行命令</span>\ndb.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"root\"</span>,pwd:<span class=\"token string\">\"root\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">'root'</span>,db:<span class=\"token string\">'admin'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装redis服务\"><a class=\"markdownIt-Anchor\" href=\"#安装redis服务\"></a> 安装redis服务</h2>\n<ol>\n<li>\n<p>下载镜像（最版版本）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull redis<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动容器并挂载到本地，开启持久化存储</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name redis -v /root/redis/data:/data -p <span class=\"token number\">6379</span>:6379 -d redis redis-server --appendonly <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>自定义配置文件</p>\n<p>在<code>/root/redis</code>目录下新建<code>redis.conf</code>文件（酌情新建即可），然后写入如下内容。（推荐下载使用对应版本的配置文件）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#  开启远程权限\nbind 0.0.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>最后加载配置启动并开启持久化数据</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name redis -v /root/redis/data:/data -v /root/redis/config:/usr/local/etc/redis/redis.conf -p <span class=\"token number\">6379</span>:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  --appendonly <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装tomcat\"><a class=\"markdownIt-Anchor\" href=\"#安装tomcat\"></a> 安装tomcat</h2>\n<ol>\n<li>\n<p>下载tomcat镜像（最新版本）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>运行tomcat镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">8080</span>:8080 -d --name mytomcat tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>进入tomcat镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it mytomcat /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将webapps目录挂载在外部</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">8080</span>:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"安装nginx\"><a class=\"markdownIt-Anchor\" href=\"#安装nginx\"></a> 安装Nginx</h2>\n<ol>\n<li>\n<p>下载镜像（最新）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>启动Nginx容器</p>\n<blockquote>\n<p>nginx配置文件目录：<code>/etc/nginx/conf.d</code></p>\n<p>html静态文件目录：<code>/usr/share/nginx/html</code></p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -p <span class=\"token number\">80</span>:80 --name nginx01 -d -v /root/nginx/conf.d:/etc/nginx/conf.d -v /root/nginx/html:/usr/share/nginx/html  nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>启动时会将镜像内文件与宿主机进行关联，因此如果宿主机没有配置文件或html文件时会导致nginx也会丢失默认配置和html页面</p>\n</blockquote>\n<p>默认配置</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">listen</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">server_name</span>  localhost<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">#charset koi8-r;</span>\n  <span class=\"token comment\">#access_log  /var/log/nginx/host.access.log  main;</span>\n\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">root</span>   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">index</span>  <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>htm<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n  <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">location</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">root</span>   <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n  <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n  <span class=\"token comment\">#&#125;</span>\n\n  <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n  <span class=\"token comment\">#    root           html;</span>\n  <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n  <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n  <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n  <span class=\"token comment\">#    include        fastcgi_params;</span>\n  <span class=\"token comment\">#&#125;</span>\n\n  <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n  <span class=\"token comment\"># concurs with nginx's one</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n  <span class=\"token comment\">#    deny  all;</span>\n  <span class=\"token comment\">#&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>进入容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it nginx01 /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"反向代理宿主机服务\"><a class=\"markdownIt-Anchor\" href=\"#反向代理宿主机服务\"></a> 反向代理宿主机服务</h3>\n<ol>\n<li>\n<p>在安装Docker的时候，会在宿主机安装一个虚拟网关 docker0，查询docker0的IP地址</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ip</span> addr show docker0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>配置docker上安装的nginx</p>\n<pre class=\"line-numbers language-nginx\" data-language=\"nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server_name</span> xiaokang<span class=\"token punctuation\">.</span>me<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\"># 设置最大允许上传单个的文件大小</span>\n            <span class=\"token keyword\">client_max_body_size</span> <span class=\"token number\">100</span>m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_redirect</span> off<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> Host <span class=\"token variable\">$host</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Real<span class=\"token operator\">-</span>IP <span class=\"token variable\">$remote_addr</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">proxy_set_header</span> X<span class=\"token operator\">-</span>Forwarded<span class=\"token operator\">-</span>For <span class=\"token variable\">$proxy_add_x_forwarded_for</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\"># 反向代理到 tomcat</span>\n            <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">172.17</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3002</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>重新启动nginx容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker restart nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}