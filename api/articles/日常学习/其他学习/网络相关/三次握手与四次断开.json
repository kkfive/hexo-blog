{"title":"三次握手与四次断开","slug":"日常学习/其他学习/网络相关/三次握手与四次断开","date":"2019-11-11T08:34:16.000Z","updated":"2022-02-21T05:08:50.398Z","comments":true,"path":"api/articles/日常学习/其他学习/网络相关/三次握手与四次断开.json","excerpt":null,"covers":["https://tva1.sinaimg.cn/large/832afe33ly1g8u7gnm82cg20k00p0wsm.gif","https://tva1.sinaimg.cn/large/832afe33ly1g8u8km1z56g20k00p0b29.gif"],"content":"<p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p>\n<h2 id=\"一-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#一-三次握手\"></a> 一、三次握手</h2>\n<h3 id=\"三次握手的过程\"><a class=\"markdownIt-Anchor\" href=\"#三次握手的过程\"></a> 三次握手的过程</h3>\n<blockquote>\n<p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p>\n</blockquote>\n<p><strong>简单的比喻</strong></p>\n<p>张三首先向李四招手(<strong>syn</strong>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(<strong>ack</strong>)。张三看到李四微笑后确认了李四成功辨认出了自己(进入<strong>estalished</strong>状态)。</p>\n<p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(<strong>syn</strong>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(<strong>ack</strong>)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入<strong>established</strong>状态)。</p>\n<p>于是两人加快步伐，走到了一起，相互拥抱。</p>\n<h3 id=\"为什么是三次\"><a class=\"markdownIt-Anchor\" href=\"#为什么是三次\"></a> 为什么是三次</h3>\n<p>过程：张三招手–李四点头微笑–李四招手–张三点头微笑 。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(<strong>syn+ack</strong>)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8u7gnm82cg20k00p0wsm.gif\" alt=\"\" /></p>\n<blockquote>\n<p>图的解释：</p>\n<ol>\n<li><code>client</code>端发送<code>syn</code>字段，请求连接</li>\n<li><code>server</code>端回复<code>ack</code>、<code>syn</code>字段字段确定与之连接</li>\n<li><code>client</code>接到确认后进入<code>established</code>已建立状态，并发送<code>ack</code>字段确认对方的连接</li>\n</ol>\n</blockquote>\n<h3 id=\"为什么要三次握手\"><a class=\"markdownIt-Anchor\" href=\"#为什么要三次握手\"></a> 为什么要三次握手</h3>\n<p>“3次握手”的作用就是<code>双方都能明确自己和对方的收、发能力是正常的</code>。</p>\n<ol>\n<li>\n<p>第一次</p>\n<p>客户端发送网络包，服务器收到了。这样服务器得出结论：<strong>客户端</strong>的发送能力、<strong>服务端</strong>的接收能力是正常的。</p>\n</li>\n<li>\n<p>第二次</p>\n<p>服务端发包，客户端收到了。此时客户端得出结论：<strong>服务端</strong>的接收、发送能力正常，<strong>客户端</strong>的接收、发送能力正常</p>\n</li>\n<li>\n<p>第三次</p>\n<p>客户端发送的包，服务端收到了。这样服务端就能得出结论：<strong>服务端</strong>的接收、发送能力正常，<strong>客户端</strong>的接收、发送能力正常</p>\n</li>\n</ol>\n<center><font style=\"color:red; text-align:center\" >每次握手确认的能力</font></center>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">次数</th>\n<th style=\"text-align:center\">客户端</th>\n<th style=\"text-align:center\">服务端</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一次（服务器）</td>\n<td style=\"text-align:center\">发送</td>\n<td style=\"text-align:center\">接收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第二次（客户端）</td>\n<td style=\"text-align:center\">接收、发送</td>\n<td style=\"text-align:center\">接收、发送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第三次（服务端）</td>\n<td style=\"text-align:center\">接收、发送</td>\n<td style=\"text-align:center\">接收、发送</td>\n</tr>\n</tbody>\n</table>\n<center><font style=\"color:red; text-align:center\" >客户端与服务端能力确认</font></center>\n<table>\n<thead>\n<tr>\n<th>视角</th>\n<th>客户端接收能力</th>\n<th>客户端发送能力</th>\n<th>服务端接收能力</th>\n<th>服务端发送能力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>客户端</td>\n<td>二</td>\n<td>一+二</td>\n<td>一+二</td>\n<td>二</td>\n</tr>\n<tr>\n<td>服务端</td>\n<td>二+三</td>\n<td>一</td>\n<td>一</td>\n<td>二+三</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二-四次断开\"><a class=\"markdownIt-Anchor\" href=\"#二-四次断开\"></a> 二、四次断开</h2>\n<h3 id=\"四次断开过程\"><a class=\"markdownIt-Anchor\" href=\"#四次断开过程\"></a> 四次断开过程</h3>\n<p>TCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(<code>fin</code>)——李四伤感地微笑(<code>ack</code>)——李四挥手(<code>fin</code>)——张三伤感地微笑(<code>ack</code>)。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8u8km1z56g20k00p0b29.gif\" alt=\"\" /></p>\n<ol>\n<li>客户端发送<code>FIN</code>字段，客户端进入<code>fin_wait</code> 状态，服务端进入<code>close_wait</code>状态</li>\n<li>服务端回复<code>ACK</code>字段，客户端进入<code>fin_wait</code>状态</li>\n<li>服务端再次发送<code>FIN</code>字段，服务端并进入<code>last_wait</code>状态</li>\n<li>客户端确认，回复<code>ACK字段</code>，客户端进入<code>time_wait</code><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>状态，服务端进入关闭状态</li>\n</ol>\n<h3 id=\"为什么是四次\"><a class=\"markdownIt-Anchor\" href=\"#为什么是四次\"></a> 为什么是四次</h3>\n<ul>\n<li>\n<p>握手</p>\n<p>服务端在<code>LINSTEN</code>状态下，收到建立请求的报文后，把<code>ACK</code>和<code>SYN</code>放在一个报文里发送。</p>\n</li>\n<li>\n<p>断开</p>\n<p>当接收到对方的<code>FIN</code>报文后，仅仅表示对方不在发送数据了，但是还能接收。己方是否关闭发送通道，需要上层应用来决定。</p>\n</li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的<code>time_wait</code>状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","more":"<p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p>\n<h2 id=\"一-三次握手\"><a class=\"markdownIt-Anchor\" href=\"#一-三次握手\"></a> 一、三次握手</h2>\n<h3 id=\"三次握手的过程\"><a class=\"markdownIt-Anchor\" href=\"#三次握手的过程\"></a> 三次握手的过程</h3>\n<blockquote>\n<p>TCP 三次握手就好比两个人在街上隔着50米看见了对方，但是因为雾霾等原因不能100%确认，所以要通过招手的方式相互确定对方是否认识自己。</p>\n</blockquote>\n<p><strong>简单的比喻</strong></p>\n<p>张三首先向李四招手(<strong>syn</strong>)，李四看到张三向自己招手后，向对方点了点头挤出了一个微笑(<strong>ack</strong>)。张三看到李四微笑后确认了李四成功辨认出了自己(进入<strong>estalished</strong>状态)。</p>\n<p>但是李四还有点狐疑，向四周看了一看，有没有可能张三是在看别人呢，他也需要确认一下。所以李四也向张三招了招手(<strong>syn</strong>)，张三看到李四向自己招手后知道对方是在寻求自己的确认，于是也点了点头挤出了微笑(<strong>ack</strong>)，李四看到对方的微笑后确认了张三就是在向自己打招呼(进入<strong>established</strong>状态)。</p>\n<p>于是两人加快步伐，走到了一起，相互拥抱。</p>\n<h3 id=\"为什么是三次\"><a class=\"markdownIt-Anchor\" href=\"#为什么是三次\"></a> 为什么是三次</h3>\n<p>过程：张三招手–李四点头微笑–李四招手–张三点头微笑 。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(<strong>syn+ack</strong>)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8u7gnm82cg20k00p0wsm.gif\" alt=\"\" /></p>\n<blockquote>\n<p>图的解释：</p>\n<ol>\n<li><code>client</code>端发送<code>syn</code>字段，请求连接</li>\n<li><code>server</code>端回复<code>ack</code>、<code>syn</code>字段字段确定与之连接</li>\n<li><code>client</code>接到确认后进入<code>established</code>已建立状态，并发送<code>ack</code>字段确认对方的连接</li>\n</ol>\n</blockquote>\n<h3 id=\"为什么要三次握手\"><a class=\"markdownIt-Anchor\" href=\"#为什么要三次握手\"></a> 为什么要三次握手</h3>\n<p>“3次握手”的作用就是<code>双方都能明确自己和对方的收、发能力是正常的</code>。</p>\n<ol>\n<li>\n<p>第一次</p>\n<p>客户端发送网络包，服务器收到了。这样服务器得出结论：<strong>客户端</strong>的发送能力、<strong>服务端</strong>的接收能力是正常的。</p>\n</li>\n<li>\n<p>第二次</p>\n<p>服务端发包，客户端收到了。此时客户端得出结论：<strong>服务端</strong>的接收、发送能力正常，<strong>客户端</strong>的接收、发送能力正常</p>\n</li>\n<li>\n<p>第三次</p>\n<p>客户端发送的包，服务端收到了。这样服务端就能得出结论：<strong>服务端</strong>的接收、发送能力正常，<strong>客户端</strong>的接收、发送能力正常</p>\n</li>\n</ol>\n<center><font style=\"color:red; text-align:center\" >每次握手确认的能力</font></center>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">次数</th>\n<th style=\"text-align:center\">客户端</th>\n<th style=\"text-align:center\">服务端</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一次（服务器）</td>\n<td style=\"text-align:center\">发送</td>\n<td style=\"text-align:center\">接收</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第二次（客户端）</td>\n<td style=\"text-align:center\">接收、发送</td>\n<td style=\"text-align:center\">接收、发送</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第三次（服务端）</td>\n<td style=\"text-align:center\">接收、发送</td>\n<td style=\"text-align:center\">接收、发送</td>\n</tr>\n</tbody>\n</table>\n<center><font style=\"color:red; text-align:center\" >客户端与服务端能力确认</font></center>\n<table>\n<thead>\n<tr>\n<th>视角</th>\n<th>客户端接收能力</th>\n<th>客户端发送能力</th>\n<th>服务端接收能力</th>\n<th>服务端发送能力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>客户端</td>\n<td>二</td>\n<td>一+二</td>\n<td>一+二</td>\n<td>二</td>\n</tr>\n<tr>\n<td>服务端</td>\n<td>二+三</td>\n<td>一</td>\n<td>一</td>\n<td>二+三</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二-四次断开\"><a class=\"markdownIt-Anchor\" href=\"#二-四次断开\"></a> 二、四次断开</h2>\n<h3 id=\"四次断开过程\"><a class=\"markdownIt-Anchor\" href=\"#四次断开过程\"></a> 四次断开过程</h3>\n<p>TCP断开链接的过程和建立链接的过程比较类似，只不过中间的两部并不总是会合成一步走，所以它分成了4个动作，张三挥手(<code>fin</code>)——李四伤感地微笑(<code>ack</code>)——李四挥手(<code>fin</code>)——张三伤感地微笑(<code>ack</code>)。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8u8km1z56g20k00p0b29.gif\" alt=\"\" /></p>\n<ol>\n<li>客户端发送<code>FIN</code>字段，客户端进入<code>fin_wait</code> 状态，服务端进入<code>close_wait</code>状态</li>\n<li>服务端回复<code>ACK</code>字段，客户端进入<code>fin_wait</code>状态</li>\n<li>服务端再次发送<code>FIN</code>字段，服务端并进入<code>last_wait</code>状态</li>\n<li>客户端确认，回复<code>ACK字段</code>，客户端进入<code>time_wait</code><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>状态，服务端进入关闭状态</li>\n</ol>\n<h3 id=\"为什么是四次\"><a class=\"markdownIt-Anchor\" href=\"#为什么是四次\"></a> 为什么是四次</h3>\n<ul>\n<li>\n<p>握手</p>\n<p>服务端在<code>LINSTEN</code>状态下，收到建立请求的报文后，把<code>ACK</code>和<code>SYN</code>放在一个报文里发送。</p>\n</li>\n<li>\n<p>断开</p>\n<p>当接收到对方的<code>FIN</code>报文后，仅仅表示对方不在发送数据了，但是还能接收。己方是否关闭发送通道，需要上层应用来决定。</p>\n</li>\n</ul>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>它是主动关闭的一方在回复完对方的挥手后进入的一个长期状态，这个状态标准的持续时间是4分钟，4分钟后才会进入到closed状态，释放套接字资源。不过在具体实现上这个时间是可以调整的。它就好比主动分手方要承担的责任，是你提出的要分手，你得付出代价。这个后果就是持续4分钟的<code>time_wait</code>状态，不能释放套接字资源(端口)，就好比守寡期，这段时间内套接字资源(端口)不得回收利用。 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","categories":[{"name":"综合学习","path":"api/categories/综合学习.json"},{"name":"计算机网络","path":"api/categories/计算机网络.json"}],"tags":[{"name":"网络链接","path":"api/tags/网络链接.json"}]}