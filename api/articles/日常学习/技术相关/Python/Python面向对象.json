{"title":"Python面向对象","slug":"日常学习/技术相关/Python/Python面向对象","date":"2019-11-04T02:12:34.000Z","updated":"2022-02-21T06:22:27.468Z","comments":true,"path":"api/articles/日常学习/技术相关/Python/Python面向对象.json","excerpt":null,"covers":["https://tva1.sinaimg.cn/large/832afe33ly1g8lt39l43sj20j40bjgnr.jpg"],"content":"<h2 id=\"类的空间问题\"><a class=\"markdownIt-Anchor\" href=\"#类的空间问题\"></a> 类的空间问题</h2>\n<h3 id=\"添加对象或类的属性\"><a class=\"markdownIt-Anchor\" href=\"#添加对象或类的属性\"></a> 添加对象或类的属性</h3>\n<p>添加对象或类的属性哪里（类<code>__init__</code>方法中、类方法中、类外）都可以添加。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex\n<span class=\"token comment\"># 类外面可以：</span>\nobj <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'barry', 'age': 18&#125;</span>\n\n<span class=\"token comment\"># 类内部也可以：</span>\nobj <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># __init__方法可以。</span>\nobj<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># func 方法也可以。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"对象以及类查询名字的顺序\"><a class=\"markdownIt-Anchor\" href=\"#对象以及类查询名字的顺序\"></a> 对象以及类查询&quot;名字&quot;的顺序</h3>\n<p>对象查找属性的顺序：先从对象空间找  ------&gt; 类空间找 ------&gt; 父类空间找 -------&gt;…</p>\n<p>类名查找属性的顺序：先从本类空间找 -------&gt; 父类空间找--------&gt; …</p>\n<p>上面的顺序都是单向不可逆，类名不可能找到对象的属性。</p>\n<h2 id=\"类与类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#类与类之间的关系\"></a> 类与类之间的关系</h2>\n<h3 id=\"依赖关系\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系\"></a> 依赖关系</h3>\n<p><strong>将一个类的对象或者类名传到另一个类的方法使用.</strong> 这种关系比较弱。</p>\n<h3 id=\"组合关联-聚合关系\"><a class=\"markdownIt-Anchor\" href=\"#组合关联-聚合关系\"></a> 组合（关联、聚合）关系</h3>\n<p>关联关系, 其实就是 我需要你. 你也属于我</p>\n<p><strong>组合：将一个类的对象封装到另一个类的对象的属性中，就叫组合。</strong></p>\n<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\"></a> 继承</h2>\n<p>继承分为单继承和多继承</p>\n<ul>\n<li>python中类的分类</li>\n</ul>\n<blockquote>\n<p>这里需要补充一下python中类的种类（继承需要）： 在python2x版本中存在两种类.：<br />\n⼀个叫<strong>经典类</strong>. 在python2.2之前. ⼀直使⽤的是经典类. 经典类在基类的根如果什么都不写.<br />\n⼀个叫<strong>新式类</strong>. 在python2.2之后出现了新式类. 新式类的特点是基类的根是object类。<br />\npython3x版本中只有一种类：<br />\npython3中使⽤的都是<strong>新式类</strong>. 如果基类谁都不继承. 那这个类会默认继承 object类。</p>\n</blockquote>\n<h3 id=\"单继承\"><a class=\"markdownIt-Anchor\" href=\"#单继承\"></a> 单继承</h3>\n<ol>\n<li>类名.对象执行父类方法</li>\n<li>执行顺序\n<ul>\n<li>实例化对象时必须执行<code>__init__</code>方法,类中没有，从父类找，父类没有，从<code>object</code>类中找。</li>\n<li>先要执行自己类中的eat方法，自己类没有才能执行父类中的方法。</li>\n</ul>\n</li>\n<li>同时执行类以及父类方法\n<ul>\n<li>子类方法中<code>父类.func(对象,其他参数)</code></li>\n<li><code>super().func(参数)</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\"></a> 多继承</h3>\n<p>一个类继承多个类</p>\n<ul>\n<li>\n<p>经典类</p>\n<p>沿用深度优先算法</p>\n<ol>\n<li>从左至右，依次查找。</li>\n<li>每次都选取节点的最左边，一直找到头，如果没有，返回上一个节点在查询其他路线。</li>\n<li>如果上一个节点没有其他路线或者都已经查询完毕，再返回上一个节点，直至遍历完所有的节点 <img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8lt39l43sj20j40bjgnr.jpg\" alt=\"\" /></li>\n</ol>\n</li>\n<li>\n<p>新式类</p>\n<p>沿用<code>c3</code>算法</p>\n<p>MRO</p>\n</li>\n</ul>\n<h3 id=\"super\"><a class=\"markdownIt-Anchor\" href=\"#super\"></a> super()</h3>\n<ul>\n<li>\n<p>示例一</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A f1'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A f2'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A Foo'</span><span class=\"token punctuation\">)</span>\n        \n        \nobj <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>示例二</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Foo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Bar'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Info f1'</span><span class=\"token punctuation\">)</span>\n\nobj <span class=\"token operator\">=</span> Info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nin Bar\nin Foo\nin Info f1\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Info<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [&lt;class '__main__.Info'>, &lt;class '__main__.Foo'>, &lt;class '__main__.Bar'>, &lt;class '__main__.A'>, &lt;class 'object'>]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>示例三</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Foo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Bar'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Info f1'</span><span class=\"token punctuation\">)</span>\n\nobj <span class=\"token operator\">=</span> Info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\"></a> 封装</h2>\n<p>将属性写到<code>__init__</code>中</p>\n<h2 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h2>\n<p><strong>同样名称的方法在不同的子类中会有不同的行为</strong>。</p>\n<blockquote>\n<p>同⼀个对象, 多种形态. 这个在python中其实是很不容易说明⽩的. 因为我们⼀直在⽤. 只是没有具体的说. 比如. 我们创建⼀个变量a = 10 , 我们知道此时a是整数类型. 但是我们可以通过程序让a = “太白”, 这时, a⼜变成了字符串类型. 这是我们都知道的. 但是,  我要告诉你的是. 这个就是多态性. 同⼀个变量a可以是多种形态。</p>\n</blockquote>\n<h3 id=\"对类的约束\"><a class=\"markdownIt-Anchor\" href=\"#对类的约束\"></a> 对类的约束</h3>\n<ol>\n<li>提取⽗类. 然后在⽗类中定义好⽅法. 在这个⽅法中什么都不⽤⼲. 就抛⼀个异常就可以了. 这样所有的⼦类都必须重写这个⽅法. 否则. 访问的时候就会报错.</li>\n<li>使⽤元类来描述⽗类. 在元类中给出⼀个抽象⽅法. 这样⼦类就不得不给出抽象⽅法的具体实现. 也可以起到约束的效果.</li>\n</ol>\n<ul>\n<li>方式一：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    此类什么都不做，就是制定一个标准，谁继承我，必须定义我里面的方法。\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"你没有实现pay方法\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QQpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用qq支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alipay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用阿里支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Wechatpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fuqian</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用微信支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    obj<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> Alipay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> QQpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> Wechatpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>方式二：引入抽象类的概念</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABCMeta<span class=\"token punctuation\">,</span>abstractmethod\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>ABCMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   \n<span class=\"token comment\"># 抽象类 接口类  规范和约束  metaclass指定的是一个元类</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">pass</span>  <span class=\"token comment\"># 抽象方法</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alipay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用支付宝支付了%s元'</span><span class=\"token operator\">%</span>money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QQpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用qq支付了%s元'</span><span class=\"token operator\">%</span>money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Wechatpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># def pay(self,money):</span>\n    <span class=\"token comment\">#     print('使用微信支付了%s元'%money)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">recharge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> Alipay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 归一化设计：不管是哪一个类的对象，都调用同一个函数去完成相似的功能</span>\nq <span class=\"token operator\">=</span> QQpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nw <span class=\"token operator\">=</span> Wechatpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 到用的时候才会报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>抽象类和接口类做的事情 ：建立规范，只要子类继承了我写的这个抽象类，实例化对象时就会报错。</p>\n<h2 id=\"类的私有成员\"><a class=\"markdownIt-Anchor\" href=\"#类的私有成员\"></a> 类的私有成员</h2>\n<p>对于每一个类的成员而言都有两种形式：</p>\n<ul>\n<li>公有成员，在任何地方都能访问</li>\n<li>私有成员，只有在类的内部才能方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类</th>\n<th>类</th>\n<th>类内部</th>\n<th>派生类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>公有类的静态属性</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>公有方法</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>私有类的静态属性</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n<tr>\n<td>私有方法</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>对象属性</th>\n<th>对象</th>\n<th>类内部</th>\n<th>派生类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>公有对象属性</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>私有对象属性</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n</tbody>\n</table>\n<p>对于这些私有成员来说,他们只能在类的内部使用,不能再类的外部以及派生类中使用.</p>\n<h2 id=\"类的其他成员\"><a class=\"markdownIt-Anchor\" href=\"#类的其他成员\"></a> 类的其他成员</h2>\n<h3 id=\"类方法\"><a class=\"markdownIt-Anchor\" href=\"#类方法\"></a> 类方法</h3>\n<p>使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；</p>\n<p>调用：实例对象和类对象都可以调用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    \n    __num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span> age\n        Student<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 写在__new__方法中比较合适，但是现在还没有学，暂且放到这里</span>\n        \n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cls<span class=\"token punctuation\">.</span>__num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__num\n\n\n\na <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>getNum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\"></a> 静态方法</h3>\n<p>定义：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；</p>\n<p>调用：实例对象和类对象都可以调用。</p>\n<p><strong>静态方法是类中的函数，不需要实例化。可以理解为，静态方法是个独立的、单纯的函数，仅仅托管于某个类的名称空间中，便于使用和维护。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeTest</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>hour <span class=\"token operator\">=</span> hour\n        self<span class=\"token punctuation\">.</span>minute <span class=\"token operator\">=</span> minute\n        self<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> second\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>TimeTest<span class=\"token punctuation\">.</span>showTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt <span class=\"token operator\">=</span> TimeTest<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nnowTime <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>showTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h3>\n<h4 id=\"property\"><a class=\"markdownIt-Anchor\" href=\"#property\"></a> property</h4>\n<p>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值</p>\n<p>将一个类的函数定义成特性以后，<a href=\"http://xn--obj-hb0eo1az7dv0fiuvvgvox8aned324g.name\">对象再去使用的时候obj.name</a>,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式<strong>遵循了统一访问的原则</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@AAA<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@AAA<span class=\"token punctuation\">.</span>deleter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#只有在属性AAA定义property后才能定义AAA.setter,AAA.deleter</span>\nf1<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token punctuation\">.</span>AAA\nf1<span class=\"token punctuation\">.</span>AAA<span class=\"token operator\">=</span><span class=\"token string\">'aaa'</span>\n<span class=\"token keyword\">del</span> f1<span class=\"token punctuation\">.</span>AAA\n\n<span class=\"token comment\">#或者：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n    AAA<span class=\"token operator\">=</span><span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span>get_AAA<span class=\"token punctuation\">,</span>set_AAA<span class=\"token punctuation\">,</span>delete_AAA<span class=\"token punctuation\">)</span> <span class=\"token comment\">#内置property三个参数与get,set,delete一一对应</span>\n\nf1<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token punctuation\">.</span>AAA\nf1<span class=\"token punctuation\">.</span>AAA<span class=\"token operator\">=</span><span class=\"token string\">'aaa'</span>\n<span class=\"token keyword\">del</span> f1<span class=\"token punctuation\">.</span>AAA<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"isinstance\"><a class=\"markdownIt-Anchor\" href=\"#isinstance\"></a> isinstance</h4>\n<ul>\n<li>\n<p>isinstance(a,b)：判断a是否是b类（或者b类的派生类）实例化的对象</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\nobj <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">isinstance</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>issubclass(a,b)： 判断a类是否是b类（或者b的派生类）的派生类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">issubclass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"反射\"><a class=\"markdownIt-Anchor\" href=\"#反射\"></a> 反射</h2>\n<p><strong>python面向对象中的反射：通过字符串的形式操作对象相关的属性。python中的一切事物都是对象（都可以使用反射）</strong></p>\n<p>Python实现自省的函数<code>hasattr</code>、<code>getattr</code>、<code>setattr</code>、<code>delattr</code></p>\n<h3 id=\"应用于对象的反射\"><a class=\"markdownIt-Anchor\" href=\"#应用于对象的反射\"></a> 应用于对象的反射</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token string\">'类的静态变量'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n        self<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi,%s'</span><span class=\"token operator\">%</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\nobj<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token string\">'egon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#检测是否含有某属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'say_hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#获取属性</span>\nn<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\nfunc<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'say_hi'</span><span class=\"token punctuation\">)</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'aaaaaaaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'不存在啊'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#报错</span>\n\n<span class=\"token comment\">#设置属性</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'sb'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">lambda</span> self<span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">'sb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>show_name<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#删除属性</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name111'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#不存在,则报错</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"应用于类的反射\"><a class=\"markdownIt-Anchor\" href=\"#应用于类的反射\"></a> 应用于类的反射</h3>\n<p>与对象基本相同</p>\n<h3 id=\"反射的作用\"><a class=\"markdownIt-Anchor\" href=\"#反射的作用\"></a> 反射的作用</h3>\n<p>更优雅的写代码😆</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到登录页面'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到注册页面'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到存储页面'</span><span class=\"token punctuation\">)</span>\n\nuser <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    choose <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>>>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果user存在choose这个属性</span>\n        func <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>choose<span class=\"token punctuation\">)</span><span class=\"token comment\">#取这个属性并赋值给func变量</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#执行</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入错误。。。。'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h2>\n<blockquote>\n<p>AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x<br />\nIOError 输入/输出异常；基本上是无法打开文件<br />\nImportError 无法引入模块或包；基本上是路径问题或名称错误<br />\nIndentationError 语法错误（的子类） ；代码没有正确对齐<br />\nIndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]<br />\nKeyError 试图访问字典里不存在的键<br />\nKeyboardInterrupt Ctrl+C被按下<br />\nNameError 使用一个还未被赋予对象的变量<br />\nSyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）<br />\nTypeError 传入对象类型与要求的不符合<br />\nUnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，<br />\n导致你以为正在访问它<br />\nValueError 传入一个调用者不期望的值，即使值的类型是正确的</p>\n</blockquote>\n<p>基本语法:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n     被检测的代码块\n<span class=\"token keyword\">except</span> 异常类型：\n     <span class=\"token keyword\">try</span>中一旦检测到异常，就执行这个位置的逻辑<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多分支+万能异常</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> register<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> dariy<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> article<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> comment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''\n    欢迎访问博客园系统：\n    1，登录\n    2，注册\n    3，访问日记页面\n    4，访问文章页面\n    5，访问评论页面\n'''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    choice <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dic<span class=\"token punctuation\">[</span>choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># if choice.isdigit():</span>\n<span class=\"token comment\">#     if</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># else:</span>\n<span class=\"token comment\">#     print('请输入数字...')</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字....'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您输入的选项超出范围...'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<ul>\n<li>\n<p>try…except…else组合</p>\n<p>与循环中的else比较类似，try代码中，只要出现了异常，则不会执行else语句，如果不出现异常，则执行else语句。</p>\n<p>比如我们完成一个转账功能的代码，需要一个转账给另一个人，然后另一个人确认收到才算是转账成功，我们用伪代码写一下，他就可以用在这个地方：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 伪代码</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'扣第一个人钱'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'给第二个人加钱'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'必须输入数字。。。'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转账成功'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>Try…excet…finally组合</p>\n<p>finally这个用法比较有意思，他是在捕获异常发生之前，先执行finally的代码，有点未卜先知的意思。</p>\n<ul>\n<li>\n<p>如果出现异常并且成功捕获了，finally会在try中最后执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出现了keyError错误....'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正常执行'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果出现异常但是没有成功捕获，finally会在异常发生之前执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> NameError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出现了NameError错误....'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异常发生之前，先执行我'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>finally用在哪里呢？</p>\n<ol>\n<li>关闭文件的链接链接，数据等链接时，需要用到finally。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''各种操作'''</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">'''但是发生错误了, 此时没关闭文件句柄，所以'''</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>函数中，finally也会在return之前先执行。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>循环中，finally也会在return之前执行。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>finally一般就是收尾工作，在一些重要环节出错之前必须一定要做的比如关闭链接的问题时，最好是用上finally作为最后一道防线，收尾。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主动出发异常</p>\n<p>在类的约束中，我们已经用过此方法，主动发出异常</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">'类型错误'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>断言</p>\n<p>表示一种强硬的态度，只要assert后面的代码不成立，直接报错，下面的代码就不让你执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># assert 条件</span>\n \n<span class=\"token keyword\">assert</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n \n<span class=\"token keyword\">assert</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># 应用：</span>\n<span class=\"token keyword\">assert</span> 条件\n代码\n代码\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>自定义异常</p>\n<p>python中给你提供的一些错误类型并不是所有的，只是常见的异常，如果以后你在工作中，出现了某种异常无法用已知的错误类型捕获（万能异常只能捕获python中存在的异常），那么你就可以尝试自定义异常，只要继承BaseException类即可。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EvaException</span><span class=\"token punctuation\">(</span>BaseException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>msg<span class=\"token operator\">=</span>msg\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>msg\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> EvaException<span class=\"token punctuation\">(</span><span class=\"token string\">'类型错误'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> EvaException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>异常处理正确的使用方式</p>\n<p>有的同学会这么想，学完了异常处理后，好强大，我要为我的每一段程序都加上try…except，干毛线去思考它会不会有逻辑错误啊，这样就很好啊，多省脑细胞===》2B青年欢乐多</p>\n<p>try…except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的<br />\n这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try…except，其他的逻辑错误应该尽量修正</p>\n</li>\n</ul>\n","more":"<h2 id=\"类的空间问题\"><a class=\"markdownIt-Anchor\" href=\"#类的空间问题\"></a> 类的空间问题</h2>\n<h3 id=\"添加对象或类的属性\"><a class=\"markdownIt-Anchor\" href=\"#添加对象或类的属性\"></a> 添加对象或类的属性</h3>\n<p>添加对象或类的属性哪里（类<code>__init__</code>方法中、类方法中、类外）都可以添加。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex\n<span class=\"token comment\"># 类外面可以：</span>\nobj <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &#123;'name': 'barry', 'age': 18&#125;</span>\n\n<span class=\"token comment\"># 类内部也可以：</span>\nobj <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># __init__方法可以。</span>\nobj<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># func 方法也可以。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"对象以及类查询名字的顺序\"><a class=\"markdownIt-Anchor\" href=\"#对象以及类查询名字的顺序\"></a> 对象以及类查询&quot;名字&quot;的顺序</h3>\n<p>对象查找属性的顺序：先从对象空间找  ------&gt; 类空间找 ------&gt; 父类空间找 -------&gt;…</p>\n<p>类名查找属性的顺序：先从本类空间找 -------&gt; 父类空间找--------&gt; …</p>\n<p>上面的顺序都是单向不可逆，类名不可能找到对象的属性。</p>\n<h2 id=\"类与类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#类与类之间的关系\"></a> 类与类之间的关系</h2>\n<h3 id=\"依赖关系\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系\"></a> 依赖关系</h3>\n<p><strong>将一个类的对象或者类名传到另一个类的方法使用.</strong> 这种关系比较弱。</p>\n<h3 id=\"组合关联-聚合关系\"><a class=\"markdownIt-Anchor\" href=\"#组合关联-聚合关系\"></a> 组合（关联、聚合）关系</h3>\n<p>关联关系, 其实就是 我需要你. 你也属于我</p>\n<p><strong>组合：将一个类的对象封装到另一个类的对象的属性中，就叫组合。</strong></p>\n<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\"></a> 继承</h2>\n<p>继承分为单继承和多继承</p>\n<ul>\n<li>python中类的分类</li>\n</ul>\n<blockquote>\n<p>这里需要补充一下python中类的种类（继承需要）： 在python2x版本中存在两种类.：<br />\n⼀个叫<strong>经典类</strong>. 在python2.2之前. ⼀直使⽤的是经典类. 经典类在基类的根如果什么都不写.<br />\n⼀个叫<strong>新式类</strong>. 在python2.2之后出现了新式类. 新式类的特点是基类的根是object类。<br />\npython3x版本中只有一种类：<br />\npython3中使⽤的都是<strong>新式类</strong>. 如果基类谁都不继承. 那这个类会默认继承 object类。</p>\n</blockquote>\n<h3 id=\"单继承\"><a class=\"markdownIt-Anchor\" href=\"#单继承\"></a> 单继承</h3>\n<ol>\n<li>类名.对象执行父类方法</li>\n<li>执行顺序\n<ul>\n<li>实例化对象时必须执行<code>__init__</code>方法,类中没有，从父类找，父类没有，从<code>object</code>类中找。</li>\n<li>先要执行自己类中的eat方法，自己类没有才能执行父类中的方法。</li>\n</ul>\n</li>\n<li>同时执行类以及父类方法\n<ul>\n<li>子类方法中<code>父类.func(对象,其他参数)</code></li>\n<li><code>super().func(参数)</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\"></a> 多继承</h3>\n<p>一个类继承多个类</p>\n<ul>\n<li>\n<p>经典类</p>\n<p>沿用深度优先算法</p>\n<ol>\n<li>从左至右，依次查找。</li>\n<li>每次都选取节点的最左边，一直找到头，如果没有，返回上一个节点在查询其他路线。</li>\n<li>如果上一个节点没有其他路线或者都已经查询完毕，再返回上一个节点，直至遍历完所有的节点 <img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8lt39l43sj20j40bjgnr.jpg\" alt=\"\" /></li>\n</ol>\n</li>\n<li>\n<p>新式类</p>\n<p>沿用<code>c3</code>算法</p>\n<p>MRO</p>\n</li>\n</ul>\n<h3 id=\"super\"><a class=\"markdownIt-Anchor\" href=\"#super\"></a> super()</h3>\n<ul>\n<li>\n<p>示例一</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A f1'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A f2'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A Foo'</span><span class=\"token punctuation\">)</span>\n        \n        \nobj <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>示例二</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Foo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Bar'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Info f1'</span><span class=\"token punctuation\">)</span>\n\nobj <span class=\"token operator\">=</span> Info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''\nin Bar\nin Foo\nin Info f1\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Info<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [&lt;class '__main__.Info'>, &lt;class '__main__.Foo'>, &lt;class '__main__.Bar'>, &lt;class '__main__.A'>, &lt;class 'object'>]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>示例三</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in A'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Foo'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Bar'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in Info f1'</span><span class=\"token punctuation\">)</span>\n\nobj <span class=\"token operator\">=</span> Info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>f1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\"></a> 封装</h2>\n<p>将属性写到<code>__init__</code>中</p>\n<h2 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h2>\n<p><strong>同样名称的方法在不同的子类中会有不同的行为</strong>。</p>\n<blockquote>\n<p>同⼀个对象, 多种形态. 这个在python中其实是很不容易说明⽩的. 因为我们⼀直在⽤. 只是没有具体的说. 比如. 我们创建⼀个变量a = 10 , 我们知道此时a是整数类型. 但是我们可以通过程序让a = “太白”, 这时, a⼜变成了字符串类型. 这是我们都知道的. 但是,  我要告诉你的是. 这个就是多态性. 同⼀个变量a可以是多种形态。</p>\n</blockquote>\n<h3 id=\"对类的约束\"><a class=\"markdownIt-Anchor\" href=\"#对类的约束\"></a> 对类的约束</h3>\n<ol>\n<li>提取⽗类. 然后在⽗类中定义好⽅法. 在这个⽅法中什么都不⽤⼲. 就抛⼀个异常就可以了. 这样所有的⼦类都必须重写这个⽅法. 否则. 访问的时候就会报错.</li>\n<li>使⽤元类来描述⽗类. 在元类中给出⼀个抽象⽅法. 这样⼦类就不得不给出抽象⽅法的具体实现. 也可以起到约束的效果.</li>\n</ol>\n<ul>\n<li>方式一：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    此类什么都不做，就是制定一个标准，谁继承我，必须定义我里面的方法。\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"你没有实现pay方法\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QQpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用qq支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alipay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用阿里支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Wechatpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fuqian</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用微信支付%s元'</span> <span class=\"token operator\">%</span> money<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    obj<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> Alipay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> QQpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">=</span> Wechatpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>方式二：引入抽象类的概念</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABCMeta<span class=\"token punctuation\">,</span>abstractmethod\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>ABCMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   \n<span class=\"token comment\"># 抽象类 接口类  规范和约束  metaclass指定的是一个元类</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">pass</span>  <span class=\"token comment\"># 抽象方法</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alipay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用支付宝支付了%s元'</span><span class=\"token operator\">%</span>money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">QQpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用qq支付了%s元'</span><span class=\"token operator\">%</span>money<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Wechatpay</span><span class=\"token punctuation\">(</span>Payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># def pay(self,money):</span>\n    <span class=\"token comment\">#     print('使用微信支付了%s元'%money)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">recharge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> Alipay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 归一化设计：不管是哪一个类的对象，都调用同一个函数去完成相似的功能</span>\nq <span class=\"token operator\">=</span> QQpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>pay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nw <span class=\"token operator\">=</span> Wechatpay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npay<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 到用的时候才会报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>抽象类和接口类做的事情 ：建立规范，只要子类继承了我写的这个抽象类，实例化对象时就会报错。</p>\n<h2 id=\"类的私有成员\"><a class=\"markdownIt-Anchor\" href=\"#类的私有成员\"></a> 类的私有成员</h2>\n<p>对于每一个类的成员而言都有两种形式：</p>\n<ul>\n<li>公有成员，在任何地方都能访问</li>\n<li>私有成员，只有在类的内部才能方法</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类</th>\n<th>类</th>\n<th>类内部</th>\n<th>派生类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>公有类的静态属性</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>公有方法</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>私有类的静态属性</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n<tr>\n<td>私有方法</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>对象属性</th>\n<th>对象</th>\n<th>类内部</th>\n<th>派生类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>公有对象属性</td>\n<td>可以访问</td>\n<td>可以访问</td>\n<td>可以访问</td>\n</tr>\n<tr>\n<td>私有对象属性</td>\n<td>不可以访问</td>\n<td>可以访问</td>\n<td>不可以访问</td>\n</tr>\n</tbody>\n</table>\n<p>对于这些私有成员来说,他们只能在类的内部使用,不能再类的外部以及派生类中使用.</p>\n<h2 id=\"类的其他成员\"><a class=\"markdownIt-Anchor\" href=\"#类的其他成员\"></a> 类的其他成员</h2>\n<h3 id=\"类方法\"><a class=\"markdownIt-Anchor\" href=\"#类方法\"></a> 类方法</h3>\n<p>使用装饰器@classmethod。第一个参数必须是当前类对象，该参数名一般约定为“cls”，通过它来传递类的属性和方法（不能传实例的属性和方法）；</p>\n<p>调用：实例对象和类对象都可以调用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    \n    __num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span> age\n        Student<span class=\"token punctuation\">.</span>addNum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 写在__new__方法中比较合适，但是现在还没有学，暂且放到这里</span>\n        \n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cls<span class=\"token punctuation\">.</span>__num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>__num\n\n\n\na <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'barry'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>getNum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\"></a> 静态方法</h3>\n<p>定义：使用装饰器@staticmethod。参数随意，没有“self”和“cls”参数，但是方法体中不能使用类或实例的任何属性和方法；</p>\n<p>调用：实例对象和类对象都可以调用。</p>\n<p><strong>静态方法是类中的函数，不需要实例化。可以理解为，静态方法是个独立的、单纯的函数，仅仅托管于某个类的名称空间中，便于使用和维护。</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeTest</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hour<span class=\"token punctuation\">,</span> minute<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>hour <span class=\"token operator\">=</span> hour\n        self<span class=\"token punctuation\">.</span>minute <span class=\"token operator\">=</span> minute\n        self<span class=\"token punctuation\">.</span>second <span class=\"token operator\">=</span> second\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">showTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%H:%M:%S\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>TimeTest<span class=\"token punctuation\">.</span>showTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nt <span class=\"token operator\">=</span> TimeTest<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nnowTime <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>showTime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\"></a> 属性</h3>\n<h4 id=\"property\"><a class=\"markdownIt-Anchor\" href=\"#property\"></a> property</h4>\n<p>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值</p>\n<p>将一个类的函数定义成特性以后，<a href=\"http://xn--obj-hb0eo1az7dv0fiuvvgvox8aned324g.name\">对象再去使用的时候obj.name</a>,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式<strong>遵循了统一访问的原则</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@AAA<span class=\"token punctuation\">.</span>setter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@AAA<span class=\"token punctuation\">.</span>deleter</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#只有在属性AAA定义property后才能定义AAA.setter,AAA.deleter</span>\nf1<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token punctuation\">.</span>AAA\nf1<span class=\"token punctuation\">.</span>AAA<span class=\"token operator\">=</span><span class=\"token string\">'aaa'</span>\n<span class=\"token keyword\">del</span> f1<span class=\"token punctuation\">.</span>AAA\n\n<span class=\"token comment\">#或者：</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_AAA</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'delete的时候运行我啊'</span><span class=\"token punctuation\">)</span>\n    AAA<span class=\"token operator\">=</span><span class=\"token builtin\">property</span><span class=\"token punctuation\">(</span>get_AAA<span class=\"token punctuation\">,</span>set_AAA<span class=\"token punctuation\">,</span>delete_AAA<span class=\"token punctuation\">)</span> <span class=\"token comment\">#内置property三个参数与get,set,delete一一对应</span>\n\nf1<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nf1<span class=\"token punctuation\">.</span>AAA\nf1<span class=\"token punctuation\">.</span>AAA<span class=\"token operator\">=</span><span class=\"token string\">'aaa'</span>\n<span class=\"token keyword\">del</span> f1<span class=\"token punctuation\">.</span>AAA<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"isinstance\"><a class=\"markdownIt-Anchor\" href=\"#isinstance\"></a> isinstance</h4>\n<ul>\n<li>\n<p>isinstance(a,b)：判断a是否是b类（或者b类的派生类）实例化的对象</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\nobj <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">isinstance</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>issubclass(a,b)： 判断a类是否是b类（或者b的派生类）的派生类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">issubclass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"反射\"><a class=\"markdownIt-Anchor\" href=\"#反射\"></a> 反射</h2>\n<p><strong>python面向对象中的反射：通过字符串的形式操作对象相关的属性。python中的一切事物都是对象（都可以使用反射）</strong></p>\n<p>Python实现自省的函数<code>hasattr</code>、<code>getattr</code>、<code>setattr</code>、<code>delattr</code></p>\n<h3 id=\"应用于对象的反射\"><a class=\"markdownIt-Anchor\" href=\"#应用于对象的反射\"></a> 应用于对象的反射</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token string\">'类的静态变量'</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name\n        self<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">say_hi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi,%s'</span><span class=\"token operator\">%</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\nobj<span class=\"token operator\">=</span>Foo<span class=\"token punctuation\">(</span><span class=\"token string\">'egon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#检测是否含有某属性</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'say_hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#获取属性</span>\nn<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\nfunc<span class=\"token operator\">=</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'say_hi'</span><span class=\"token punctuation\">)</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'aaaaaaaa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'不存在啊'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#报错</span>\n\n<span class=\"token comment\">#设置属性</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'sb'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">lambda</span> self<span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">'sb'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>show_name<span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#删除属性</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">delattr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'show_name111'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#不存在,则报错</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"应用于类的反射\"><a class=\"markdownIt-Anchor\" href=\"#应用于类的反射\"></a> 应用于类的反射</h3>\n<p>与对象基本相同</p>\n<h3 id=\"反射的作用\"><a class=\"markdownIt-Anchor\" href=\"#反射的作用\"></a> 反射的作用</h3>\n<p>更优雅的写代码😆</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到登录页面'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到注册页面'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎来到存储页面'</span><span class=\"token punctuation\">)</span>\n\nuser <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    choose <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>>>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>choose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#如果user存在choose这个属性</span>\n        func <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>choose<span class=\"token punctuation\">)</span><span class=\"token comment\">#取这个属性并赋值给func变量</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#执行</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入错误。。。。'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h2>\n<blockquote>\n<p>AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x<br />\nIOError 输入/输出异常；基本上是无法打开文件<br />\nImportError 无法引入模块或包；基本上是路径问题或名称错误<br />\nIndentationError 语法错误（的子类） ；代码没有正确对齐<br />\nIndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]<br />\nKeyError 试图访问字典里不存在的键<br />\nKeyboardInterrupt Ctrl+C被按下<br />\nNameError 使用一个还未被赋予对象的变量<br />\nSyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）<br />\nTypeError 传入对象类型与要求的不符合<br />\nUnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，<br />\n导致你以为正在访问它<br />\nValueError 传入一个调用者不期望的值，即使值的类型是正确的</p>\n</blockquote>\n<p>基本语法:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n     被检测的代码块\n<span class=\"token keyword\">except</span> 异常类型：\n     <span class=\"token keyword\">try</span>中一旦检测到异常，就执行这个位置的逻辑<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>多分支+万能异常</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> register<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> dariy<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> article<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> comment<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''\n    欢迎访问博客园系统：\n    1，登录\n    2，注册\n    3，访问日记页面\n    4，访问文章页面\n    5，访问评论页面\n'''</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    choice <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dic<span class=\"token punctuation\">[</span>choice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># if choice.isdigit():</span>\n<span class=\"token comment\">#     if</span>\n<span class=\"token comment\">#</span>\n<span class=\"token comment\"># else:</span>\n<span class=\"token comment\">#     print('请输入数字...')</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字....'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您输入的选项超出范围...'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>\n<ul>\n<li>\n<p>try…except…else组合</p>\n<p>与循环中的else比较类似，try代码中，只要出现了异常，则不会执行else语句，如果不出现异常，则执行else语句。</p>\n<p>比如我们完成一个转账功能的代码，需要一个转账给另一个人，然后另一个人确认收到才算是转账成功，我们用伪代码写一下，他就可以用在这个地方：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 伪代码</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'扣第一个人钱'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'给第二个人加钱'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'必须输入数字。。。'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转账成功'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>Try…excet…finally组合</p>\n<p>finally这个用法比较有意思，他是在捕获异常发生之前，先执行finally的代码，有点未卜先知的意思。</p>\n<ul>\n<li>\n<p>如果出现异常并且成功捕获了，finally会在try中最后执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出现了keyError错误....'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正常执行'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>如果出现异常但是没有成功捕获，finally会在异常发生之前执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'太白金星'</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> NameError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'出现了NameError错误....'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'异常发生之前，先执行我'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>finally用在哪里呢？</p>\n<ol>\n<li>关闭文件的链接链接，数据等链接时，需要用到finally。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''各种操作'''</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">'''但是发生错误了, 此时没关闭文件句柄，所以'''</span>\n\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>函数中，finally也会在return之前先执行。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>循环中，finally也会在return之前执行。</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>finally一般就是收尾工作，在一些重要环节出错之前必须一定要做的比如关闭链接的问题时，最好是用上finally作为最后一道防线，收尾。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>主动出发异常</p>\n<p>在类的约束中，我们已经用过此方法，主动发出异常</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">'类型错误'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>断言</p>\n<p>表示一种强硬的态度，只要assert后面的代码不成立，直接报错，下面的代码就不让你执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># assert 条件</span>\n \n<span class=\"token keyword\">assert</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n \n<span class=\"token keyword\">assert</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># 应用：</span>\n<span class=\"token keyword\">assert</span> 条件\n代码\n代码\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>自定义异常</p>\n<p>python中给你提供的一些错误类型并不是所有的，只是常见的异常，如果以后你在工作中，出现了某种异常无法用已知的错误类型捕获（万能异常只能捕获python中存在的异常），那么你就可以尝试自定义异常，只要继承BaseException类即可。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EvaException</span><span class=\"token punctuation\">(</span>BaseException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>msg<span class=\"token operator\">=</span>msg\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>msg\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> EvaException<span class=\"token punctuation\">(</span><span class=\"token string\">'类型错误'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> EvaException <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>异常处理正确的使用方式</p>\n<p>有的同学会这么想，学完了异常处理后，好强大，我要为我的每一段程序都加上try…except，干毛线去思考它会不会有逻辑错误啊，这样就很好啊，多省脑细胞===》2B青年欢乐多</p>\n<p>try…except应该尽量少用，因为它本身就是你附加给你的程序的一种异常处理的逻辑，与你的主要的工作是没有关系的<br />\n这种东西加的多了，会导致你的代码可读性变差，只有在有些异常无法预知的情况下，才应该加上try…except，其他的逻辑错误应该尽量修正</p>\n</li>\n</ul>\n","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}