<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小康博客</title>
    <link>https://www.antmoe.com/</link>
    
    <image>
      <url>https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg</url>
      <title>小康博客</title>
      <link>https://www.antmoe.com/</link>
    </image>
    
    <atom:link href="https://www.antmoe.com/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个收藏回忆与分享技术的地方！</description>
    <pubDate>Sun, 13 Mar 2022 02:19:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>我的Hexo“自动化”之道</title>
      <link>https://www.antmoe.com/posts/41164f83/</link>
      <guid>https://www.antmoe.com/posts/41164f83/</guid>
      <pubDate>Fri, 11 Mar 2022 13:16:00 GMT</pubDate>
      
      <description>Hexo自动化实现，整体流程不输动态博客。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这篇文章一直想咕，直到现在才开始咕咕咕。</p><p>此文只是简单想简单介绍下<a href="https://www.antmoe.com/">我的个人博客</a>为什么最终选择了 Hexo 以及怎么“自动化”部署 Hexo 博客。</p><h2 id="为何选择-hexo"><a class="markdownIt-Anchor" href="#为何选择-hexo"></a> 为何选择 Hexo</h2><p>说到个人博客，业界老大哥<a href="https://wordpress.org/">wordpress</a>和<a href="https://github.com/typecho/typecho">typecho</a>必须要提一下。因为当初选择博客时我自然也尝试了这两款，但是的选择最终选择了 typecho，至于原因其实很简单，只是想要一个 markdown 简单的写作平台。</p><p>成功在学生机上部署 typecho 后为了“花里胡哨”，又入手了<a href="https://www.ihewro.com/archives/489/">handsome</a>主题。于是小康的第一个对外博客就有了：<a href="https://life.antmoe.com/%EF%BC%88%E6%AD%A4%E7%AB%99%E5%8E%9F%E6%95%B0%E6%8D%AE%E5%B7%B2%E4%B8%A2%E5%A4%B1%E3%80%82%EF%BC%89">https://life.antmoe.com/（此站原数据已丢失。）</a></p><p>虽然 typecho 很便捷，但是对我而言，其实并不比 Hexo 便捷多少。首先谈谈我的个人习惯</p><ul><li><strong>习惯本地写作</strong></li><li>markdown，讨厌富文本</li><li>以技术类型博文为主</li><li>几乎没有非公开类型的博文</li></ul><p>综上几点习惯，当初使用 typecho 时发送姿势：本地 typora 写好后复制到 typecho 后台，然后发表。</p><p>而 Hexo 就比较简单了，本地写好后 git 三连即可推送进行自动部署。</p><p>而 markdown 写作感受个人观点：typora yyds。</p><p>至于隐私类博文（想要加密）受职业影响 应该是不会有这种类型的博文的。</p><p>因此为了更好的写作体验，为了不改变习惯 最终选择了 Hexo。</p><h2 id="hexo-的自动化"><a class="markdownIt-Anchor" href="#hexo-的自动化"></a> Hexo 的自动化</h2><p>首先看一张流程图</p><p><img src="https://file.acs.pw/picGo/2022/03/11/20220311225614.png" alt="image-20220311225614551" /></p><ol><li>推送到 Coding 后触发持续集成将代码推送到 GitHub 仓库（源码）</li><li>GitHub 仓库推送代码后触发 Actions，进行构建静态页面</li><li>构建完静态页面后<ul><li>推送产物到<a href="https://github.com/kkfive/kkfive.github.io">GitHub Pages 仓库</a></li><li>清除又拍云回源存储桶并刷新全站缓存</li></ul></li><li>GitHub Pages 收到代码推送后进行<a href="https://github.com/kkfive/kkfive.github.io/actions">Actions</a><ul><li>同步静态页面到 Gitee、Bitbucket、Gitlab 等平台</li><li>进行 Gitee 部署</li><li>将新增/更新文章发送到<a href="https://t.me/kkfiveblog">Telegram 频道</a></li></ul></li></ol><p>以上便是<a href="https://www.antmoe.com">我的博客</a>自动化流程，个人认为完全不输动态博客。</p><p>虽然动态博客可以随时打开网页输入密码进行撰文，但是我个人是不会在手机进行撰文的。</p><p>因此只要撰文则一定使用的是 pc 端，那么对于在外时，下载一个 typora 难度也不大，或者</p><blockquote><p>之所以第一步推送到 Coding 的目的</p><ul><li>首先是受网络影响，直接推送到 GitHub 有时会推送不上</li><li>个人 GitHub 号曾经被封过一次，过渡阶段使用了 Coding。现在为了防止再次被封而导致源码丢失，因此放在国内的 Coding。</li></ul></blockquote>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/Hexo/">Hexo</category>
      
      <category domain="https://www.antmoe.com/categories/Hexo/%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/">优雅部署</category>
      
      
      <category domain="https://www.antmoe.com/tags/Hexo/">Hexo</category>
      
      
      <comments>https://www.antmoe.com/posts/41164f83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前端Coder手中的Docker</title>
      <link>https://www.antmoe.com/posts/13d68ef9/</link>
      <guid>https://www.antmoe.com/posts/13d68ef9/</guid>
      <pubDate>Sat, 05 Mar 2022 06:06:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://file.acs.pw/picGo/2021/2/28/aa9db60341e31b3f5df4a8b3480c94d1.png" alt="image-20210228175240489" /></p><h2 id="在服务器中安装docker"><a class="markdownIt-Anchor" href="#在服务器中安装docker"></a> 在服务器中安装Docker</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL get.docker.com -o get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后的推荐操作</p><ol><li><p>启动docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker<span class="token function">sudo</span> systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建docker用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将当前用户加入docker组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试docker安装是否正确</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="修改镜像"><a class="markdownIt-Anchor" href="#修改镜像"></a> 修改镜像</h2><ol><li><p>登录<a href="https://cr.console.aliyun.com/?spm=5176.12818093.custom--ali--widget-home-product-recent.dre1.1c8316d0Tujp2R">阿里容器镜像服务</a></p></li><li><p>查看加速地址</p><p><img src="https://file.acs.pw/picGo/2021/2/27/4ee8ed340343e6d5b82db27657dfd308.png" alt="image-20210227190110321" /></p></li><li><p>设置加速服务</p><ul><li><p>创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建文件并写入内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://lz2nib3q.mirror.aliyuncs.com"]&#125;EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载及重启Docker服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看镜像地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="镜像常用命令"><a class="markdownIt-Anchor" href="#镜像常用命令"></a> 镜像常用命令</h2><h3 id="查看本机中所有镜像"><a class="markdownIt-Anchor" href="#查看本机中所有镜像"></a> 查看本机中所有镜像</h3><div class="tabs" id="images1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images1-1">命令</button></li><li class="tab"><button type="button" data-href="#images1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images1-1"><p>命令<code>docker images [镜像名]</code>可查看当前镜像。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images1-2"><ul><li><p><code>-q</code></p><p>只显示镜像id</p></li><li><p><code>-a</code></p><p>列出所有镜像（包含中间映像层）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="搜索镜像"><a class="markdownIt-Anchor" href="#搜索镜像"></a> 搜索镜像</h3><div class="tabs" id="images-search1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-search1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-search1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-search1-1"><p>命令格式：<code>docker search [options] 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-search1-2"><ul><li><p><code>-s</code></p><p>列出收藏数不少于指定值的镜像</p></li><li><p><code>--no-trunc</code></p><p>显示完整的镜像信息</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="从仓库下载镜像"><a class="markdownIt-Anchor" href="#从仓库下载镜像"></a> 从仓库下载镜像</h3><div class="tabs" id="images-pull1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-pull1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-pull1-2">参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-pull1-1"><p>命令格式：<code>docker pull 镜像名[:TAG|@DIGEST]</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-pull1-2"><p>可以指定TAG或者DIGEST</p><ul><li><p>TAG</p><p>标签名</p></li><li><p>DIGEST</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="删除镜像"><a class="markdownIt-Anchor" href="#删除镜像"></a> 删除镜像</h3><div class="tabs" id="images-rmi1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-rmi1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-rmi1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-rmi1-1"><p>命令格式：<code>docker rmi 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-rmi1-2"><p>可以指定TAG或者DIGEST</p><ul><li><p><code>-f</code></p><p>强制删除</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="容器常用命令"><a class="markdownIt-Anchor" href="#容器常用命令"></a> 容器常用命令</h2><h3 id="运行容器"><a class="markdownIt-Anchor" href="#运行容器"></a> 运行容器</h3><div class="tabs" id="docker-run1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-run1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-run1-2">选项</button></li><li class="tab"><button type="button" data-href="#docker-run1-3">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-run1-1"><p>镜像名新建并启动容器</p><p>命令格式：<code>docker run [选项] 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-run1-2"><ul><li><p><code>--name</code></p><p>别名为容器起一个名字</p></li><li><p><code>-d</code></p><p>启动守护式容器（在后台启动容器）</p></li><li><p><code>-p</code></p><p>映射端口号：原始端口号 指定端口号启动</p></li><li><p><code>--network</code></p><p>指定使用的网桥</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-run1-3"><pre class="line-numbers language-none"><code class="language-none">docker run -it --name myTomcat -p 8888:8080 tomcatdocker run -d --name myTomcat -P tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="查看运行的容器"><a class="markdownIt-Anchor" href="#查看运行的容器"></a> 查看运行的容器</h3><div class="tabs" id="docker-ps1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-ps1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-ps1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-ps1-1"><p>列出所有正在运行的容器，命令格式：<code>docker ps</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-ps1-2"><ul><li><p><code>-a</code></p><p>正在运行的和历史运行过的容器</p></li><li><p><code>-q</code></p><p>静默模式，只显示容器编号</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="停止关闭重启容器"><a class="markdownIt-Anchor" href="#停止关闭重启容器"></a> 停止|关闭|重启容器</h3><ul><li><p>开启容器</p><p><code>docker start 容器名字或者容器id</code></p></li><li><p>重启容器</p><p><code>docker restart 容器名或者容器id</code></p></li><li><p>正常停止容器运行</p><p><code>docker stop 容器名或者容器id</code></p></li><li><p>立即停止容器运行</p><p><code>docker kill 容器名或者容器id</code></p></li></ul><h3 id="删除容器"><a class="markdownIt-Anchor" href="#删除容器"></a> 删除容器</h3><ul><li><p>删除单个容器</p><p><code>docker rm -f 容器id和容器名</code></p></li><li><p>删除所有容器</p><p><code>docker rm -f $(docker ps -aq)</code></p></li></ul><h3 id="查看容器内进程"><a class="markdownIt-Anchor" href="#查看容器内进程"></a> 查看容器内进程</h3><p><code>docker top 容器id或者容器名</code></p><h3 id="查看容器内部细节"><a class="markdownIt-Anchor" href="#查看容器内部细节"></a> 查看容器内部细节</h3><p><code>docker inspect 容器id</code></p><h3 id="查看容器运行日志"><a class="markdownIt-Anchor" href="#查看容器运行日志"></a> 查看容器运行日志</h3><div class="tabs" id="docker-logs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-logs1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-logs1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-logs1-1"><p>命令格式：<code>docker logs [OPTIONS] 容器id或容器名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-logs1-2"><ul><li><p><code>-t</code></p><p>加入时间戳</p></li><li><p><code>-f</code></p><p>跟随最新的日志打印</p></li><li><p><code>--tail</code></p><p>数字显示最后多少条</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="进入容器内部"><a class="markdownIt-Anchor" href="#进入容器内部"></a> 进入容器内部</h3><div class="tabs" id="images-ps1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-ps1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-ps1-2">选项</button></li><li class="tab"><button type="button" data-href="#images-ps1-3">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-ps1-1"><p>命令格式：<code>docker exec [options] 容器id 容器内命令</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-ps1-2"><ul><li><p><code>-i</code></p><p>以交互模式运行容器，通常与-t一起使用</p></li><li><p><code>-t</code></p><p>分配一个伪终端    shell窗口   bash</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-ps1-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="容器和宿主机之间复制文件"><a class="markdownIt-Anchor" href="#容器和宿主机之间复制文件"></a> 容器和宿主机之间复制文件</h3><ul><li><p>将宿主机复制到容器内部</p><p><code>docker cp 文件|目录 容器id:容器路径</code></p></li><li><p>将容器内资源拷贝到主机上</p><p><code>docker cp 容器id:容器内资源路径 宿主机目录路径</code></p></li></ul><h3 id="数据卷volum实现与宿主机共享目录"><a class="markdownIt-Anchor" href="#数据卷volum实现与宿主机共享目录"></a> 数据卷（volum）实现与宿主机共享目录</h3><p>命令：<code>docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</code>，宿主机与容器文件是互通的。</p><p><code>docker run -v 宿主机的路径|任意别名:/容器内的路径:ro 镜像名</code>，容器机不能修改宿主机的文件内容。</p><div class="note danger flat"><ul><li>如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</li><li>如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中</li></ul></div><h3 id="打包镜像"><a class="markdownIt-Anchor" href="#打包镜像"></a> 打包镜像</h3><p>命令：<code>docker save 镜像名:tag -o 名称.tar</code></p><h3 id="载入镜像"><a class="markdownIt-Anchor" href="#载入镜像"></a> 载入镜像</h3><p>命令：<code>docker load -i 名称.tar</code></p><h3 id="容器打包成新的镜像"><a class="markdownIt-Anchor" href="#容器打包成新的镜像"></a> 容器打包成新的镜像</h3><p>命令：<code>docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot; （容器id或者名称）打包的镜像名称:标签</code></p><h2 id="容器间通信"><a class="markdownIt-Anchor" href="#容器间通信"></a> 容器间通信</h2><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png" alt="image-20201125105847896" /></p><h3 id="网桥"><a class="markdownIt-Anchor" href="#网桥"></a> 网桥</h3><ol><li><p>查看默认网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network <span class="token function">rm</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除没有使用的网桥</p><pre class="line-numbers language-none"><code class="language-none">docker network prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile"></a> Dockerfile</h2><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png" alt="image-20200404111908085" /></p><p>通过架构图可以看出通过DockerFile可以直接构建镜像</p><p><img src="https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png" alt="image-20200603181253804" /></p><p>打包字段详情见官方：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><table><thead><tr><th style="text-align:center">保留字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center"><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center"><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center"><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td style="text-align:center"><strong>WORKDIR</strong></td><td style="text-align:center"><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center"><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td style="text-align:center"><strong>ADD</strong></td><td style="text-align:center"><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center"><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td style="text-align:center"><strong>VOLUME</strong></td><td style="text-align:center"><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td style="text-align:center"><strong>CMD</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h3 id="from-命令"><a class="markdownIt-Anchor" href="#from-命令"></a> FROM 命令</h3><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM  &lt;image&gt;FROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latestFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="run-命令"><a class="markdownIt-Anchor" href="#run-命令"></a> RUN 命令</h3><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)RUN echo helloRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)RUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="expose-命令"><a class="markdownIt-Anchor" href="#expose-命令"></a> EXPOSE 命令</h3><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcpEXPOSE 80&#x2F;udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="cmd-命令"><a class="markdownIt-Anchor" href="#cmd-命令"></a> CMD 命令</h3><ul><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)CMD command param1 param2 (shell form)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="workdir-命令"><a class="markdownIt-Anchor" href="#workdir-命令"></a> WORKDIR 命令</h3><ul><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">WORKDIR &#x2F;path&#x2F;to&#x2F;workdirWORKDIR &#x2F;aWORKDIR bWORKDIR c&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="env-命令"><a class="markdownIt-Anchor" href="#env-命令"></a> ENV 命令</h3><ul><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV &lt;key&gt; &lt;value&gt;ENV &lt;key&gt;&#x3D;&lt;value&gt; ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="add-命令"><a class="markdownIt-Anchor" href="#add-命令"></a> ADD 命令</h3><ul><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件ADD hom?.txt &#x2F;mydir&#x2F;   通配符添加ADD test.txt relativeDir&#x2F;  可以指定相对路径ADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径ADD url <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="copy-命令"><a class="markdownIt-Anchor" href="#copy-命令"></a> COPY 命令</h3><ul><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY src destCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="volume-命令"><a class="markdownIt-Anchor" href="#volume-命令"></a> VOLUME 命令</h3><ul><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">VOLUME [&quot;&#x2F;data&quot;]VOLUME &#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="entrypoint命令"><a class="markdownIt-Anchor" href="#entrypoint命令"></a> ENTRYPOINT命令</h3><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">  [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br />CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h2 id="docker-compose"><a class="markdownIt-Anchor" href="#docker-compose"></a> docker-compose</h2><h4 id="安装与卸载"><a class="markdownIt-Anchor" href="#安装与卸载"></a> 安装与卸载</h4><h4 id="linux系统"><a class="markdownIt-Anchor" href="#linux系统"></a> Linux系统</h4><p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="linux手动下载"><a class="markdownIt-Anchor" href="#linux手动下载"></a> Linux手动下载</h4><ol><li><p>进入<a href="https://github.com/docker/compose/releases">GitHub</a>下载</p></li><li><p>将文件上传到服务器（Linux机器）</p></li><li><p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为其赋予可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="macos-windows"><a class="markdownIt-Anchor" href="#macos-windows"></a> macos、windows</h4><p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件基本格式"><a class="markdownIt-Anchor" href="#文件基本格式"></a> 文件基本格式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span> <span class="token comment"># 官方网址 https://docs.docker.com/compose/compose-file/</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">tomcat01</span><span class="token punctuation">:</span> <span class="token comment">#服务名称（id）</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat01 <span class="token comment"># 相当于run 的 --name</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像  相当于run image</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系  相当于run -p</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享  相当于run -v</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps01<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥     相当于run --networ</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">tomcat02</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat02    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系</span>      <span class="token punctuation">-</span> <span class="token string">"8081:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps02<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.32    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysqldata<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> mysqlconf<span class="token punctuation">:</span>/etc/mysql    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=root    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>5.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redisdata<span class="token punctuation">:</span>/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"redis-server --appendonly yes"</span> <span class="token comment">#run 镜像之后用来覆盖容器内容默认命令</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token comment">#声明上面服务所使用的自动创建的卷名</span>  <span class="token key atrule">tomcatwebapps01</span><span class="token punctuation">:</span> <span class="token comment">#声明指令的卷名  compose自动创建该卷名但是会在之前加入项目名</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>    <span class="token comment">#使用自定义卷名</span>      false       <span class="token comment">#true确定使用指定卷名  注意:一旦使用外部自定义卷名启动服务之前必须手动创建</span>  <span class="token key atrule">tomcatwebapps02</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqldata</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqlconf</span><span class="token punctuation">:</span>  <span class="token key atrule">redisdata</span><span class="token punctuation">:</span><span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#定义服务用到桥</span>  <span class="token key atrule">hello</span><span class="token punctuation">:</span> <span class="token comment">#定义上面的服务用到的网桥名称 默认创建就是 bridge</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token boolean important">true</span>   <span class="token comment">#使用外部指定网桥  注意:网桥必须存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令选项"><a class="markdownIt-Anchor" href="#命令选项"></a> 命令选项</h3><div class="tabs" id="options"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#options-1">项目、配置文件</button></li><li class="tab"><button type="button" data-href="#options-2">网络特性</button></li><li class="tab"><button type="button" data-href="#options-3">日志输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="options-1"><ul><li><p><code>-f, --file FILE</code></p><p>指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p></li><li><p><code>-p, --project-name NAME</code></p><p>指定项目名称，默认将使用所在目录名称作为项目名。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-2"><ul><li><p><code>--x-networking</code></p><p>使用 Docker 的可拔插网络后端特性</p></li><li><p><code>--x-network-driver DRIVER</code></p><p>指定网络后端的驱动，默认为 <code>bridge</code></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-3"><ul><li><p><code>--verbose</code></p><p>输出更多调试信息。</p></li><li><p><code>-v, --version</code></p><p>打印版本并退出。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="命令使用说明"><a class="markdownIt-Anchor" href="#命令使用说明"></a> 命令使用说明</h3><h3 id="up"><a class="markdownIt-Anchor" href="#up"></a> up</h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><blockquote><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p><em>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</em></p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></blockquote><h3 id="down"><a class="markdownIt-Anchor" href="#down"></a> down</h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h3 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h3><p>进入指定的容器。</p><h3 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> ps</h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。<code>-q</code>可以只打印容器的id信息</p><h3 id="restart"><a class="markdownIt-Anchor" href="#restart"></a> restart</h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h3 id="rm"><a class="markdownIt-Anchor" href="#rm"></a> rm</h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h3 id="start"><a class="markdownIt-Anchor" href="#start"></a> start</h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h3 id="stop"><a class="markdownIt-Anchor" href="#stop"></a> stop</h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top"><a class="markdownIt-Anchor" href="#top"></a> top</h3><p>查看各个服务容器内运行的进程。</p><h3 id="pause"><a class="markdownIt-Anchor" href="#pause"></a> pause</h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停服务</p><h3 id="unpause"><a class="markdownIt-Anchor" href="#unpause"></a> unpause</h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9E%84%E5%BB%BA/">部署与构建</category>
      
      <category domain="https://www.antmoe.com/categories/%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9E%84%E5%BB%BA/Docker/">Docker</category>
      
      
      <category domain="https://www.antmoe.com/tags/Docker/">Docker</category>
      
      <category domain="https://www.antmoe.com/tags/docker-compose/">docker-compose</category>
      
      
      <comments>https://www.antmoe.com/posts/13d68ef9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向Coding的Git</title>
      <link>https://www.antmoe.com/posts/f59ea689/</link>
      <guid>https://www.antmoe.com/posts/f59ea689/</guid>
      <pubDate>Wed, 02 Mar 2022 03:06:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>此篇文章记录在日常 coding 的操作以及一些必要的 git 概念</p><h2 id="git的初始化设置"><a class="markdownIt-Anchor" href="#git的初始化设置"></a> git的初始化设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>config的三个作用域,缺省等同于<code>local</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --local <span class="token comment">## local只对某个仓库有效</span><span class="token function">git</span> config --global <span class="token comment">## global对当前用户所有仓库有效</span><span class="token function">git</span> config --system <span class="token comment">## system对系统所有登录的用户有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示config的配置，加<code>--list</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list --local <span class="token comment">## local只对某个仓库有效</span><span class="token function">git</span> config --list --global <span class="token comment">## global对当前用户所有仓库有效</span><span class="token function">git</span> config --list --system <span class="token comment">## system对系统所有登录的用户有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看提交记录"><a class="markdownIt-Anchor" href="#查看提交记录"></a> 查看提交记录</h2><div class="tabs" id="git-log"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-log-1">只看变更列表</button></li><li class="tab"><button type="button" data-href="#git-log-2">只看最近N次</button></li><li class="tab"><button type="button" data-href="#git-log-3">只看当前分支历史</button></li><li class="tab"><button type="button" data-href="#git-log-4">全部分支历史</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-log-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220144.png" alt="image-20220305220137649" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log -n2 --oneline <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>n2表示所有分支最近两个。</p></blockquote><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220229.png" alt="image-20220305220229829" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220412.png" alt="image-20220305220412495" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-4"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="提交记录"><a class="markdownIt-Anchor" href="#提交记录"></a> 提交记录</h2><h3 id="修改commit的message"><a class="markdownIt-Anchor" href="#修改commit的message"></a> 修改commit的message</h3><p><strong>此操作不建议对已发布到线上的commit做修改。</strong></p><div class="tabs" id="git-commit-message"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-commit-message-1">修改最新的commit</button></li><li class="tab"><button type="button" data-href="#git-commit-message-2">修改老旧commit</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-commit-message-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305222413.png" alt="image-20220305222413228" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-commit-message-2"><blockquote><p>修改老旧commit的message,需要使用其上一个commitId。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reabase -i commitId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305222826.png" alt="image-20220305222826712" /></p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223007.png" alt="image-20220305223007339" /></p><p>在新窗口中重新编辑commit信息即可。</p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223056.png" alt="image-20220305223056685" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="将多个commit整理成一个commit"><a class="markdownIt-Anchor" href="#将多个commit整理成一个commit"></a> 将多个commit整理成一个commit</h3><div class="tabs" id="git-commit-rebase"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-commit-rebase-1">合并连续的commit</button></li><li class="tab"><button type="button" data-href="#git-commit-rebase-2">合并非连续的commit</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-commit-rebase-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i commit的父哈希值<span class="token comment"># 然后将需要合并的改为s。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223844.png" alt="image-20220305223844839" /></p><p>将除第一个外需要合并的修改为<code>s</code>即可进行编辑信息。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-commit-rebase-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i commit的父哈希值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入编辑页面后，将需要合并的写在一起。如果没有自动出现则手动键入即可。需要删除的使用<code>s</code>命令，保留的使用<code>pick</code>。</p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305224945.png" alt="image-20220305224945894" /></p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305225107.png" alt="image-20220305225107076" /></p><p>接下来编辑commit信息即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><ul><li>pick：保留该commit（缩写:p）</li><li>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</li><li>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</li><li>squash：将该commit和前一个commit合并（缩写:s）</li><li>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</li><li>exec：执行shell命令（缩写:x）</li><li>drop：我要丢弃该commit（缩写:d）</li></ul></blockquote><h2 id="操作暂存区和工作区"><a class="markdownIt-Anchor" href="#操作暂存区和工作区"></a> 操作暂存区和工作区</h2><h3 id="恢复文件变更"><a class="markdownIt-Anchor" href="#恢复文件变更"></a> 恢复文件变更</h3><ol><li>编辑了某文件，但想放弃修改，恢复至与暂存区一致</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="恢复暂存区"><a class="markdownIt-Anchor" href="#恢复暂存区"></a> 恢复暂存区</h3><div class="tabs" id="git-reset"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-reset-1">整个暂存区</button></li><li class="tab"><button type="button" data-href="#git-reset-2">部分文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-reset-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-reset-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD -- fileName1 fileName2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分支操作"><a class="markdownIt-Anchor" href="#分支操作"></a> 分支操作</h2><h3 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h3><div class="tabs" id="git-branch-list"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-branch-list-1">所有本地分支</button></li><li class="tab"><button type="button" data-href="#git-branch-list-2">远程所有分支</button></li><li class="tab"><button type="button" data-href="#git-branch-list-3">本地与远程分支</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-branch-list-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-list-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-list-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="新建分支"><a class="markdownIt-Anchor" href="#新建分支"></a> 新建分支</h3><div class="tabs" id="git-branch-new"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-branch-new-1">新建不切换</button></li><li class="tab"><button type="button" data-href="#git-branch-new-2">新建并切换</button></li><li class="tab"><button type="button" data-href="#git-branch-new-3">指定commit创建</button></li><li class="tab"><button type="button" data-href="#git-branch-new-4">新建一个指向tag的分支</button></li><li class="tab"><button type="button" data-href="#git-branch-new-5">指定的远程分支建立追踪关系</button></li><li class="tab"><button type="button" data-href="#git-branch-new-6">指定的远程分支建立追踪关系</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-branch-new-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-4"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-5"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-6"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="切换分支"><a class="markdownIt-Anchor" href="#切换分支"></a> 切换分支</h3><div class="tabs" id="git-checkout"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-checkout-1">切换到指定分支，并更新工作区</button></li><li class="tab"><button type="button" data-href="#git-checkout-2">切换到上一个分支</button></li><li class="tab"><button type="button" data-href="#git-checkout-3">指定commit创建</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-checkout-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-checkout-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-checkout-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="代码合并"><a class="markdownIt-Anchor" href="#代码合并"></a> 代码合并</h2><h3 id="选择几个commit"><a class="markdownIt-Anchor" href="#选择几个commit"></a> 选择几个commit</h3><blockquote><p>此操作建议将最底层开始选择,例如：<code>git cherry-pick A B</code>，其中A的提交必须早于B的提交。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转移连续的提交A到B，并且包含A</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick A^<span class="token punctuation">..</span>B <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="merge合并"><a class="markdownIt-Anchor" href="#merge合并"></a> merge合并</h3><blockquote><p>此合并方式会生成一个新的commit信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><h3 id="查看tag"><a class="markdownIt-Anchor" href="#查看tag"></a> 查看tag</h3><div class="tabs" id="git-tag-show"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-show-1">所有tag</button></li><li class="tab"><button type="button" data-href="#git-tag-show-2">查看tag信息</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-show-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-show-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tagName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="新建tag"><a class="markdownIt-Anchor" href="#新建tag"></a> 新建tag</h3><div class="tabs" id="git-tag-create"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-create-1">在当前commit新建</button></li><li class="tab"><button type="button" data-href="#git-tag-create-2">指定commit新建</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-create-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-create-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagName<span class="token operator">></span> <span class="token operator">&lt;</span>commitId<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="删除tag"><a class="markdownIt-Anchor" href="#删除tag"></a> 删除tag</h3><div class="tabs" id="git-tag-delete"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-delete-1">删除本地tag</button></li><li class="tab"><button type="button" data-href="#git-tag-delete-2">删除远程tag</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-delete-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-delete-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="提交tag"><a class="markdownIt-Anchor" href="#提交tag"></a> 提交tag</h3><div class="tabs" id="git-tag-push"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-push-1">提交所有tag</button></li><li class="tab"><button type="button" data-href="#git-tag-push-2">提交指定tag</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-push-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-push-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="常见场景"><a class="markdownIt-Anchor" href="#常见场景"></a> 常见场景</h2><h3 id="开发中临时加塞了紧急任务"><a class="markdownIt-Anchor" href="#开发中临时加塞了紧急任务"></a> 开发中临时加塞了紧急任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将当前状态暂存起来</span><span class="token function">git</span> stash<span class="token comment"># 将之前的暂存信息弹出来，并会保存暂存队列</span><span class="token function">git</span> stash apply<span class="token comment"># 将之前的暂存信息弹出来，不保存暂存队列</span><span class="token function">git</span> stash pop<span class="token comment"># 查看暂存队列</span><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令脑图"><a class="markdownIt-Anchor" href="#常用命令脑图"></a> 常用命令脑图</h2><p><img src="https://file.acs.pw/picGo/2022/03/06/20220306185004.svg" alt="git" /></p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Git/">Git</category>
      
      
      <category domain="https://www.antmoe.com/tags/Git/">Git</category>
      
      
      <comments>https://www.antmoe.com/posts/f59ea689/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识vue3之单文件组件script setup</title>
      <link>https://www.antmoe.com/posts/a6b120db/</link>
      <guid>https://www.antmoe.com/posts/a6b120db/</guid>
      <pubDate>Sat, 18 Dec 2021 10:52:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录关于 vue3 script setup的尝试。</p></blockquote><p><strong><a href="/posts/a6b120db/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><p>本文参考于：</p><ul><li><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">单文件组件<code>&lt;script setup&gt;</code></a></li></ul><h2 id="默认自动暴露"><a class="markdownIt-Anchor" href="#默认自动暴露"></a> 默认自动暴露</h2><p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用<strong>组合式API</strong>的编译时语法糖。相比于普通的<code>&lt;script&gt;</code>语法，它具有更多优势：</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 Typescript 声明 props 和抛出事件。</li><li>更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。</li><li>更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前msg的值：&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前msg的值(ref的值会被自动解包)：&#123;&#123; msgRef &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 1. 顶层的绑定会暴露给模板</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">'这是一条msg'</span><span class="token keyword">const</span> msgRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的导入组件也可以直接使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态组件"><a class="markdownIt-Anchor" href="#动态组件"></a> 动态组件</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">'./Foo.vue'</span><span class="token keyword">import</span> Bar <span class="token keyword">from</span> <span class="token string">'./Bar.vue'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Foo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someCondition ? Foo : Bar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令"><a class="markdownIt-Anchor" href="#自定义指令"></a> 自定义指令</h2><p>但这里有一个需要注意的限制：必须以 <code>vNameOfDirective</code> 的形式来命名本地自定义指令，以使得它们可以直接在模板中使用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> vMyDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">beforeMount</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// value 即传入的参数值</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-my-directive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="defineprops-defineemits-defineexpose"><a class="markdownIt-Anchor" href="#defineprops-defineemits-defineexpose"></a> defineProps、defineEmits、defineExpose</h2><p><code>defineProps</code>和<code>defineEmits</code>分别用于定义当前组件需要接收的参数和需要触发的emit。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JavaScript中上述定义即可，但在typescript中可以为其增加类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token builtin">string</span>  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型声明时的默认值</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token builtin">string</span>  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>defineExpose用于定义暴露出去的属性，此模式下默认是全暴露</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;const a &#x3D; 1const b &#x3D; ref(2)defineExpose(&#123;  a,  b&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>&lt;script setup&gt;</code> 的组件是<strong>默认关闭</strong>的，也即通过模板 ref 或者 <code>$parent</code> 链获取到的组件的公开实例，不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。</p><p>为了在 <code>&lt;script setup&gt;</code> 组件中明确要暴露出去的属性，使用 <code>defineExpose</code> 编译器宏</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;test&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;const a &#x3D; 1defineExpose(&#123;  a: 1&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;testAVue ref&#x3D;&quot;testRef&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import testAVue from &#39;.&#x2F;test-a.vue&#39;import &#123; onMounted, ref &#125; from &#39;vue&#39;const testRef &#x3D; ref(null)onMounted(() &#x3D;&gt; &#123;  console.log(testRef.value) &#x2F;&#x2F; Proxy &#123;a: 1, __v_skip: true&#125;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与普通的script使用"><a class="markdownIt-Anchor" href="#与普通的script使用"></a> 与普通的<code>&lt;script&gt;</code>使用</h2><p><code>&lt;script setup&gt;</code> 可以和普通的 <code>&lt;script&gt;</code> 一起使用。普通的 <code>&lt;script&gt;</code> 在有这些需要的情况下或许会被使用到：</p><ul><li>无法在 <code>&lt;script setup&gt;</code> 声明的选项，例如 <code>inheritAttrs</code> 或通过插件启用的自定义的选项。</li><li>声明命名导出。</li><li>运行副作用或者创建只需要执行一次的对象。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;    &#x2F;&#x2F; 普通 &lt;script&gt;, 在模块范围下执行(只执行一次)    runSideEffectOnce()    &#x2F;&#x2F; 声明额外的选项    export default &#123;        inheritAttrs: false,        customOptions: &#123;&#125;    &#125;&lt;&#x2F;script&gt;&lt;script setup&gt;    &#x2F;&#x2F; 在 setup() 作用域中执行 (对每个实例皆如此)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue/">Vue</category>
      
      
      <category domain="https://www.antmoe.com/tags/%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/">单文件组件</category>
      
      <category domain="https://www.antmoe.com/tags/script-setup/">script setup</category>
      
      <category domain="https://www.antmoe.com/tags/%E5%88%9D%E8%AF%86Vue3/">初识Vue3</category>
      
      
      <comments>https://www.antmoe.com/posts/a6b120db/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识vue3之响应式数据</title>
      <link>https://www.antmoe.com/posts/b3e1c29f/</link>
      <guid>https://www.antmoe.com/posts/b3e1c29f/</guid>
      <pubDate>Thu, 09 Dec 2021 13:14:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" href="//at.alicdn.com/t/font_2970550_p76lkpuldlo.css"><h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录关于 vue3 响应式数据的尝试。</p></blockquote><p><strong><a href="/posts/b3e1c29f/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="refs"><a class="markdownIt-Anchor" href="#refs"></a> refs</h2><h3 id="类型声明"><a class="markdownIt-Anchor" href="#类型声明"></a> 类型声明</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明类型 字符串</span>    <span class="token keyword">const</span> stringVal <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token comment">// 声明类型 数字</span>    <span class="token keyword">const</span> numberVal <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 声明类型 泛型</span>    <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>initial<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span>State<span class="token operator">></span> <span class="token comment">// state.value -> State extends string</span>      <span class="token keyword">return</span> state    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> stringVal<span class="token punctuation">,</span> numberVal<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unref"><a class="markdownIt-Anchor" href="#unref"></a> unref</h3><p>如果参数是一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>，则返回内部值，否则返回参数本身。这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数。</p><h3 id="toref-torefs"><a class="markdownIt-Anchor" href="#toref-torefs"></a> toRef、toRefs</h3><table><thead><tr><th style="text-align:center">API</th><th style="text-align:center">作用简述</th><th style="text-align:center">使用简述</th></tr></thead><tbody><tr><td style="text-align:center"><code>toRef</code></td><td style="text-align:center">用于创建源响应式对象上某个属性的响应式变量<br />此变量可以被传递并保持响应式链接</td><td style="text-align:center">用于将响应式对象某个属性传递给子组件并且不丢失响应式链接</td></tr><tr><td style="text-align:center"><code>toRefs</code></td><td style="text-align:center">将响应式对象转换为普通对象（值是响应式的）</td><td style="text-align:center">用于复合函数返回响应式对象，父组件解构/展开</td></tr></tbody></table><h4 id="toref"><a class="markdownIt-Anchor" href="#toref"></a> toRef</h4><blockquote><p>可以用来为源响应式对象上的某个 property 新创建一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// toRef</span><span class="token keyword">const</span> refReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 创建ref引用</span><span class="token keyword">const</span> refA <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>refReactive<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token function">useTest</span><span class="token punctuation">(</span>refA<span class="token punctuation">)</span> <span class="token comment">// useTest中修改传入的参数</span><span class="token comment">// 会导致refReactive.a的值也会响应式修改为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>useTest</code>中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，当需要向复合函数传递一个响应式对象的值时可以使用<code>toRef</code>将一个响应式对象某个值转为<code>ref</code>引用。</p><h4 id="torefs"><a class="markdownIt-Anchor" href="#torefs"></a> toRefs</h4><blockquote><p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。</p></blockquote><p><code>useTest</code>中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">,</span> b<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span>  b<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">200</span>  <span class="token keyword">const</span> testReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span><span class="token punctuation">,</span>    website<span class="token operator">:</span> <span class="token string">'https://baidu.com'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 暴露的响应式对象使用toRefs包装</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> testReactive<span class="token operator">:</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>testReactive<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> testReactive <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTest</span><span class="token punctuation">(</span>refA<span class="token punctuation">,</span> numberVal<span class="token punctuation">)</span> <span class="token comment">// useTest中修改传入的参数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  testReactive<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'父组件修改'</span>  <span class="token comment">// testReactive.name会被响应式修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="customref"><a class="markdownIt-Anchor" href="#customref"></a> customRef</h3><p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p><p>使用官网的一个小 Demo</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 追踪</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          value <span class="token operator">=</span> newValue          <span class="token comment">// 触发视图更新</span>          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>虽然看到网上有各种各样在此函数中发送 Ajax 请求，但我个人认为，发送 Ajax 获取数据使用 Hooks 更合适。</p></blockquote><p>类型声明</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">customRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>factory<span class="token operator">:</span> CustomRefFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">CustomRefFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token function-variable function">track</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">trigger</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="computed-与-watch"><a class="markdownIt-Anchor" href="#computed-与-watch"></a> Computed 与 Watch</h2><h3 id="computed"><a class="markdownIt-Anchor" href="#computed"></a> computed</h3><p>接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">ref</a> 对象。或者，接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回val加10的结果</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> newVal1 <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取值</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置值</span>    val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3.2 中该函数在<strong>开发模式</strong>下可传入第二个参数用于调试。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">onTrack</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 作为依赖被追踪时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onTrigger</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 被修改时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 访问 plusOne，应该触发 onTrack</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 修改 count.value，应该触发 onTrigger</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型声明</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 只读的</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span>  debuggerOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span>Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>>></span><span class="token comment">// 可写的</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  debuggerOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token keyword">interface</span> <span class="token class-name">DebuggerOptions</span> <span class="token punctuation">&#123;</span>  onTrack<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> DebuggerEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  onTrigger<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> DebuggerEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">DebuggerEvent</span> <span class="token punctuation">&#123;</span>  effect<span class="token operator">:</span> ReactiveEffect  target<span class="token operator">:</span> <span class="token builtin">any</span>  <span class="token keyword">type</span><span class="token operator">:</span> OperationTypes  key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch"><a class="markdownIt-Anchor" href="#watch"></a> watch</h3><p><code>watch</code> API 与选项式 API <a href="https://v3.cn.vuejs.org/api/instance-methods.html#watch">this.$watch</a> (以及相应的 <a href="https://v3.cn.vuejs.org/api/options-data.html#watch">watch</a> 选项) 完全等效。<code>watch</code> 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。</p><div class="tabs" id="watch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#watch-1">单一源</button></li><li class="tab"><button type="button" data-href="#watch-2">多个源</button></li><li class="tab"><button type="button" data-href="#watch-3">侦听响应式对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="watch-1"><p>侦听器数据源可以是一个具有返回值的<code>getter</code>函数，也可以直接是一个<code>ref</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 侦听一个 getter</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接侦听一个 ref</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-2"><p>侦听器还可以使用数组以同时侦听多个源</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fooRef<span class="token punctuation">,</span> barRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>prevFoo<span class="token punctuation">,</span> prevBar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>如果在同一个函数里同时改变这些被侦听的来源，侦听器仍只会执行一次</strong></p></blockquote><p>如果需要监听多个源时每一次更新都响应式变化，那么建议使用<code>nextTick</code>等等监听器再一次步改变之前运行。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">changeValues</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'John'</span> <span class="token comment">// 打印 ["John", ""] ["", ""]</span>  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Smith'</span> <span class="token comment">// 打印 ["John", "Smith"] ["John", ""]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-3"><ol><li><p>监听响应式对象或数组变化前与变化后的值，则需要监听由值构成的副本。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>val<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'numbers'</span><span class="token punctuation">)</span>    <span class="token comment">// logs: [1,2,3,4,5] [1,2,3,4]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>尝试检查深度嵌套对象或数组中(<strong>非响应式对象</strong>)的 property 变化时，仍然需要 <code>deep</code> 选项设置为 true。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> member<span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> member<span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    deep<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>member<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'new小康'</span> <span class="token comment">// deep new小康 new小康</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>侦听一个响应式对象或数组将始终返回该对象的当前值和上一个状态值的引用。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>member<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'new小康'</span> <span class="token comment">// deep new小康 小康</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="watcheffect"><a class="markdownIt-Anchor" href="#watcheffect"></a> watchEffect</h3><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。(根据响应式状态<em>自动应用</em>和<em>重新应用</em>副作用)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// -> logs 0</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token comment">// -> logs 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="provide-inject"><a class="markdownIt-Anchor" href="#provide-inject"></a> Provide / Inject</h2><p>当子组件层级过深时仍需要外层组件传递数据，那么可以使用<code>Provide / Inject</code>，但默认情况下，此 API 并不是响应式的，如果需要响应式则需要在<code>provide</code>时使用<code>ref</code>或者<code>reactive</code>进行包装。</p><p>父组件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> userName <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'小康'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  userName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'XiaoKang'</span>  <span class="token comment">// 2秒后视图更新为 XiaoKang</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">// 向子组件提供一个名为 name 值为 userName 数据</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject<span class="token punctuation">,</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 获取父组件提供的名为 name 的值并赋值给userName变量</span><span class="token keyword">const</span> userName <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改值"><a class="markdownIt-Anchor" href="#修改值"></a> 修改值</h3><p>当使用响应式 provide / inject 值时，<strong>建议尽可能将对响应式 property 的所有修改限制在<em>定义 provide 的组件</em>内部</strong>。</p><p>例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  userName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'change Name 小康 '</span> <span class="token operator">+</span> str<span class="token punctuation">&#125;</span><span class="token comment">// 向子组件提供修改userName的方法</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">,</span> changeName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 获取父组件提供的名为 name 的值并赋值给userName变量</span><span class="token keyword">const</span> changeUserName <span class="token operator">=</span> inject<span class="token operator">&lt;</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeUserNameHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  changeUserName <span class="token operator">&amp;&amp;</span> <span class="token function">changeUserName</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件当触发<code>changeUserNameHandler</code>函数时即可调用父组件提供的修改方法将<code>userName</code>的值进行修改。</p><h3 id="只读"><a class="markdownIt-Anchor" href="#只读"></a> 只读</h3><p>当需要确保通过<code>provide</code>传递的数据不会被<code>inject</code>的组件更改，可以使用<code>readonly</code>进行修饰。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'testChange'</span><span class="token punctuation">,</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>testChange<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果子组件修改值则不会修改成功。</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue/">Vue</category>
      
      
      <category domain="https://www.antmoe.com/tags/Vue3/">Vue3</category>
      
      <category domain="https://www.antmoe.com/tags/%E5%88%9D%E8%AF%86Vue3/">初识Vue3</category>
      
      
      <comments>https://www.antmoe.com/posts/b3e1c29f/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>避坑指北：vue使用history路由</title>
      <link>https://www.antmoe.com/posts/99201b62/</link>
      <guid>https://www.antmoe.com/posts/99201b62/</guid>
      <pubDate>Sun, 05 Dec 2021 01:49:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>在部署vue项目时，路由模式默认使用哈希(hash)模式，但是由于某些原因，要求使用history模式。但是对于现在的部署环境则遇到了一个问题。首先是目录：</p><pre class="line-numbers language-none"><code class="language-none">site ---- 项目根目录 ├── siteA ---- 项目A │   └── index.html └── siteB ---- 项目B     └── index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即项目放在了同一个根目录下，那么此时我们就需要调整vue的一些配置。具体如下</p><h2 id="vue项目配置"><a class="markdownIt-Anchor" href="#vue项目配置"></a> Vue项目配置</h2><h2 id="路由设置"><a class="markdownIt-Anchor" href="#路由设置"></a> 路由设置</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/siteA'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'siteARoot'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/siteA/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            path<span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>            meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                title<span class="token operator">:</span> <span class="token string">'siteA'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/siteA/index'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即路由需要包含此项目部署时所需要存放的目录名。</p><h3 id="打包配置"><a class="markdownIt-Anchor" href="#打包配置"></a> 打包配置</h3><p>打包配置时由于使用了history模式，那么<code>publicPath</code>就需要指定绝对路径。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> /siteA/<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里设置的绝对路径即项目配置时的目录名，可通过环境变量进行动态修改。</p><h2 id="nginx配置"><a class="markdownIt-Anchor" href="#nginx配置"></a> Nginx配置</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>        <span class="token number">10085</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>    <span class="token keyword">root</span>   <span class="token string">"D:/code/test/site/"</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>siteA <span class="token punctuation">&#123;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>siteA<span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>siteB <span class="token punctuation">&#123;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>siteB<span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue/">Vue</category>
      
      
      <category domain="https://www.antmoe.com/tags/Vue/">Vue</category>
      
      <category domain="https://www.antmoe.com/tags/history%E8%B7%AF%E7%94%B1/">history路由</category>
      
      <category domain="https://www.antmoe.com/tags/Vue%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/">Vue避坑指北</category>
      
      
      <comments>https://www.antmoe.com/posts/99201b62/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识vue3之better-scroll组件封装</title>
      <link>https://www.antmoe.com/posts/909b483c/</link>
      <guid>https://www.antmoe.com/posts/909b483c/</guid>
      <pubDate>Sat, 27 Nov 2021 13:17:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录封装基于<a href="https://better-scroll.github.io/docs/zh-CN/">BetterScroll 2.0</a>插件封装的 scroll-view 组件。适用于移动端的弹性滚动及下拉刷新、上拉加载等场景。</p><div class="checkbox green checked">  <input type="checkbox" checked />  <p>弹性滚动</p></div><div class="checkbox green checked">  <input type="checkbox" checked/>  <p>下拉加载</p></div><div class="checkbox green checked">  <input type="checkbox" checked/>  <p>上拉刷新</p></div><div class="checkbox green ">  <input type="checkbox" checked />  <p>滚动前后及滚动中事件</p></div><div class="checkbox yellow">  <input type="checkbox" />  <p>滚动条（待添加）</p></div></blockquote><p><strong><a href="/posts/909b483c/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="简单的实现过程"><a class="markdownIt-Anchor" href="#简单的实现过程"></a> 简单的实现过程</h2><p>实现之前需要先明确一下需求：</p><ol><li>弹性滚动</li><li>下拉刷新、上拉加载</li><li>自定义传入内容</li><li>事件派发</li></ol><h3 id="弹性滚动"><a class="markdownIt-Anchor" href="#弹性滚动"></a> 弹性滚动</h3><p>实现弹性滚动只需要按照官方示例初始化即可实现。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;wrapper&quot;&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;      &lt;div v-for&#x3D;&quot;i in 100&quot;&gt;&#123;&#123; i &#125;&#125;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import BScroll from &#39;@better-scroll&#x2F;core&#39;import &#123; onMounted &#125; from &#39;vue&#39;let bscroll: BScrollconst wrapper &#x3D; ref(null)onMounted(() &#x3D;&gt; &#123;  bscroll &#x3D; new BScroll(wrapper.value, &#123;    mouseWheel: true  &#125;)&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在 mounted 阶段进行初始化创建对象即可。</p><h3 id="下拉刷新-上拉加载"><a class="markdownIt-Anchor" href="#下拉刷新-上拉加载"></a> 下拉刷新、上拉加载</h3><p>由于我安装的是<code>@better-scroll/core</code>，并没有安装‘全量包’ ，因此实现此功能同样需要安装其他两个插件：<code>@better-scroll/pull-up</code>、<code>@better-scroll/pull-down</code></p><p>安装后在初始化时开启选项即可。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">import</span> Pullup <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-up'</span><span class="token keyword">import</span> Pulldown <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-down'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pullup<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pulldown<span class="token punctuation">)</span>bscroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  mouseWheel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullDownRefresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullUpLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于其触发事件的监听需要用实例对象去监听：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">import</span> Pullup <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-up'</span><span class="token keyword">import</span> Pulldown <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-down'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pullup<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pulldown<span class="token punctuation">)</span>bscroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.wrapper'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  mouseWheel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullDownRefresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullUpLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了上拉'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了下拉'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义传入内容"><a class="markdownIt-Anchor" href="#自定义传入内容"></a> 自定义传入内容</h3><p>自定义传入内容这里，由于我并不想传入一个数据列表，然后去渲染元素。因此通过<code>watch</code>监听 props 传入的数据这个方法就不好用了；监听<code>slots</code>里的变化通过一番尝试，最终也是失败，因此最终选择了使用官方提供的插件：<code>@better-scroll/observe-dom</code>、<code>@better-scroll/observe-image</code>进行自动更新实例对象。安装完成后只需要在初始化前<code>use</code>此插件即可。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ObserveDOM<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ObserveImage<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件派发"><a class="markdownIt-Anchor" href="#事件派发"></a> 事件派发</h3><p>需要派发的事件大致为：滚动事件和上拉下拉事件</p><ol><li><p>滚动事件</p><p>此类事件只需要正常 emit 即可。</p></li><li><p>上拉下拉事件</p><p>上拉下拉刷新需要调用对应的结束事件才可以，因此将其封装为组件时就会遇到一个问题即需要等传入函数执行完毕后在调用结束事件。</p></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineProps<span class="token punctuation">,</span> PropType<span class="token punctuation">,</span> defineEmits <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ckick'</span><span class="token punctuation">,</span> <span class="token string">'beforeScroll'</span><span class="token punctuation">,</span> <span class="token string">'afterScroll'</span><span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ckick'</span><span class="token punctuation">,</span> <span class="token string">'beforeScroll'</span><span class="token punctuation">,</span> <span class="token string">'afterScroll'</span><span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 是否派发滚动事件   */</span>  listenScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发滚动到底部的事件，用于上拉加载   */</span>  pullup<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发顶部下拉的事件，用于下拉刷新   */</span>  pulldown<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发列表滚动开始的事件   */</span>  beforeScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发列表滚动开始的事件   */</span>  afterScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 如果开启了滚动前事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>beforeScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'beforeScrollStart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'beforeScroll'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 如果开启了滚动(滚动中)事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>listenScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>position<span class="token operator">:</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 如果开启了滚动结束事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>beforeScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scrollEnd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'afterScroll'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>pullup <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">.</span><span class="token function">pullup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        bscroll<span class="token punctuation">.</span><span class="token function">finishPullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 传入非 Promise 函数</span>      bscroll<span class="token punctuation">.</span><span class="token function">finishPullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>pulldown <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingDown'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">.</span><span class="token function">pulldown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        bscroll<span class="token punctuation">.</span><span class="token function">finishPullDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 传入非 Promise 函数</span>      bscroll<span class="token punctuation">.</span><span class="token function">finishPullDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class&#x3D;&quot;&#123; wrapper: true, x: props.scrollX &#125;&quot; ref&#x3D;&quot;wrapper&quot;&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;      &lt;slot&gt;&lt;&#x2F;slot&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123; onMounted, defineProps, PropType, defineEmits &#125; from &#39;vue&#39;import BScroll from &#39;@better-scroll&#x2F;core&#39;import ObserveDOM from &#39;@better-scroll&#x2F;observe-dom&#39;import ObserveImage from &#39;@better-scroll&#x2F;observe-image&#39;import Pullup from &#39;@better-scroll&#x2F;pull-up&#39;import Pulldown from &#39;@better-scroll&#x2F;pull-down&#39;let bscroll: BScrollconst wrapper &#x3D; ref(null)BScroll.use(ObserveDOM)BScroll.use(ObserveImage)BScroll.use(Pullup)BScroll.use(Pulldown)const emit &#x3D; defineEmits([&#39;ckick&#39;, &#39;beforeScroll&#39;, &#39;afterScroll&#39;, &#39;scroll&#39;])const props &#x3D; defineProps(&#123;  &#x2F;**   * 1 滚动的时候会派发scroll事件，会截流。   * 2 滚动的时候实时派发scroll事件，不会截流。   * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件   *&#x2F;  probeType: &#123;    type: Number as PropType&lt;1 | 2 | 3&gt;,    required: false,    default: 1  &#125;,  &#x2F;**   * 是否开启横向滚动，默认纵向滚动。   * 开启横向滚动需要将传入元素设置为横向例如：display:inline-block   *&#x2F;  scrollX: &#123;    type: Boolean,    required: false,    default: false  &#125;,  &#x2F;**   * 点击列表是否派发click事件   *&#x2F;  click: &#123;    type: Boolean,    default: true  &#125;,  &#x2F;**   * 是否派发滚动事件   *&#x2F;  listenScroll: &#123;    type: Boolean,    default: false  &#125;,  &#x2F;**   * 是否派发滚动到底部的事件，用于上拉加载   *&#x2F;  pullup: &#123;    type: Function,    default: null  &#125;,  &#x2F;**   * 是否派发顶部下拉的事件，用于下拉刷新   *&#x2F;  pulldown: &#123;    type: Function,    default: null  &#125;,  &#x2F;**   * 是否派发列表滚动开始的事件   *&#x2F;  beforeScroll: &#123;    type: Boolean,    default: false  &#125;,  &#x2F;**   * 是否派发列表滚动开始的事件   *&#x2F;  afterScroll: &#123;    type: Boolean,    default: false  &#125;&#125;)onMounted(() &#x3D;&gt; &#123;  bscroll &#x3D; new BScroll(wrapper.value, &#123;    scrollX: props.scrollX,    probeType: props.probeType,    click: props.click,    observeDOM: true,    observeImage: true,    mouseWheel: true,    pullDownRefresh: true,    pullUpLoad: true  &#125;)  &#x2F;**   * 如果开启了滚动前事件派发   *&#x2F;  if (props.beforeScroll) &#123;    bscroll.on(&#39;beforeScrollStart&#39;, () &#x3D;&gt; &#123;      emit(&#39;beforeScroll&#39;)    &#125;)  &#125;  &#x2F;**   * 如果开启了滚动(滚动中)事件派发   *&#x2F;  if (props.listenScroll) &#123;    bscroll.on(&#39;scroll&#39;, (position: &#123; x: number; y: number &#125;) &#x3D;&gt; &#123;      emit(&#39;scroll&#39;, position)    &#125;)  &#125;  &#x2F;**   * 如果开启了滚动结束事件派发   *&#x2F;  if (props.beforeScroll) &#123;    bscroll.on(&#39;scrollEnd&#39;, () &#x3D;&gt; &#123;      emit(&#39;afterScroll&#39;)    &#125;)  &#125;  if (props.pullup !&#x3D;&#x3D; null) &#123;    bscroll.on(&#39;pullingUp&#39;, () &#x3D;&gt; &#123;      try &#123;        props.pullup().then(() &#x3D;&gt; &#123;          bscroll.finishPullUp()        &#125;)      &#125; catch (e) &#123;        &#x2F;&#x2F; 传入非 Promise 函数        bscroll.finishPullUp()      &#125;    &#125;)  &#125;  if (props.pulldown !&#x3D;&#x3D; null) &#123;    bscroll.on(&#39;pullingDown&#39;, () &#x3D;&gt; &#123;      try &#123;        props.pulldown().then(() &#x3D;&gt; &#123;          bscroll.finishPullDown()        &#125;)      &#125; catch (e) &#123;        &#x2F;&#x2F; 传入非 Promise 函数        bscroll.finishPullDown()      &#125;    &#125;)  &#125;&#125;)&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;@import &#39;.&#x2F;index.scss&#39;;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.wrapper </span><span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token selector">.content </span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 开启横向滚动</span>  <span class="token selector"><span class="token parent important">&amp;</span>.x </span><span class="token punctuation">&#123;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token selector">.content </span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部使用时需要传入样式指定宽高</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 300px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i in count<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>当前第&#123;&#123; i &#125;&#125;个元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue/">Vue</category>
      
      
      <category domain="https://www.antmoe.com/tags/Vue3/">Vue3</category>
      
      <category domain="https://www.antmoe.com/tags/%E5%88%9D%E8%AF%86Vue3/">初识Vue3</category>
      
      
      <comments>https://www.antmoe.com/posts/909b483c/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初识vue3之基础语法记录</title>
      <link>https://www.antmoe.com/posts/296e7875/</link>
      <guid>https://www.antmoe.com/posts/296e7875/</guid>
      <pubDate>Sat, 27 Nov 2021 13:01:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" href="//at.alicdn.com/t/font_2970550_p76lkpuldlo.css"><h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录一些在 vue3 中的一些语法改变（只记录<code>composition api</code>语法），当然使用<a href="https://www.npmjs.com/package/@vue/composition-api">@vue/composition-api</a>插件也可以令<code>vue2</code>适用本文所记录的语法。</p></blockquote><p><strong><a href="/posts/296e7875/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="数据相关data"><a class="markdownIt-Anchor" href="#数据相关data"></a> 数据相关(data)</h2><div class="tabs" id="data1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#data1-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#data1-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#data1-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="data1-1"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- vue模式下展示ref数据不需要加.value --&gt;    &lt;div&gt;当前title：&#123;&#123; title &#125;&#125;&lt;&#x2F;div&gt;    &lt;input v-model&#x3D;&quot;title&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.name &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.password &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;      &lt;input v-model&#x3D;&quot;form.name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;      &lt;input v-model&#x3D;&quot;form.password&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#39;vue&#39;export default &#123;  setup() &#123;    &#x2F;&#x2F; 定义响应式普通数据    const title &#x3D; ref&lt;string&gt;(&#39;小康&#39;)    &#x2F;&#x2F; 定义响应式引用数据    const form &#x3D; reactive(&#123;      name: &#39;小康&#39;,      password: &#39;12334&#39;    &#125;)    &#x2F;&#x2F; 需要将变量或方法return视图中才可以使用    return &#123; title, form &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data1-2"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- vue模式下展示ref数据不需要加.value --&gt;    &lt;div&gt;当前title：&#123;&#123; title &#125;&#125;&lt;&#x2F;div&gt;    &lt;input v-model&#x3D;&quot;title&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.name &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.password &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;      &lt;input v-model&#x3D;&quot;form.name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;      &lt;input v-model&#x3D;&quot;form.password&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot; setup&gt;&#x2F;&#x2F; script setup 模式下视图可以直接使用定义的变量import &#123; ref, reactive &#125; from &#39;vue&#39;&#x2F;&#x2F; 定义响应式普通数据const title &#x3D; ref&lt;string&gt;(&#39;小康&#39;)&#x2F;&#x2F; 定义响应式引用数据const form &#x3D; reactive(&#123;  name: &#39;小康&#39;,  password: &#39;12334&#39;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data1-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义响应式普通数据</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'小康'</span><span class="token punctuation">)</span>    <span class="token comment">// 定义响应式引用数据</span>    <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'小康'</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">'12334'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前title：</span><span class="token punctuation">&#123;</span>title<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>title<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前用户名：</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前用户名：</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="自定义-v-model"><a class="markdownIt-Anchor" href="#自定义-v-model"></a> 自定义 v-model</h3><p>父组件调用子组件并通过v-model绑定一个值，在子组件中直接触发事件进行修改。</p><blockquote><p>emit使用参考下文</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> v-model-setup 当前title：&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-model-setup</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'父组件的标题'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="tabs" id="vmodel"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#vmodel-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#vmodel-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#vmodel-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="vmodel-1"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改传入title值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeTitle <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vmodel-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改传入title值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// script setup模式下需要使用defineEmits进行定义emit</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'script setup子组件修改的值'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vmodel-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'tsx子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>changeTitle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改父组件的的值</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="接收父组件的值props"><a class="markdownIt-Anchor" href="#接收父组件的值props"></a> 接收父组件的值(props)</h3><div class="tabs" id="data-props"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#data-props-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#data-props-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#data-props-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="data-props-1"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// setup 第一个参数可以取到props</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> props <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data-props-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// script setup模式下需要使用defineProps进行定义emit</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data-props-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// setup 第一个参数可以取到props</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件接收的title的值为：</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>如果需要将<code>props</code>中的值解构，则需要使用<code>toRefs</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="方法相关methods"><a class="markdownIt-Anchor" href="#方法相关methods"></a> 方法相关(methods)</h2><p>事件相关无太大变化，<code>@eventName=&quot;eventFun&quot;</code>即可。</p><ul><li><a href="https://v3.cn.vuejs.org/guide/events.html">事件处理</a></li></ul><h3 id="自定义监听事件emit"><a class="markdownIt-Anchor" href="#自定义监听事件emit"></a> 自定义监听事件(emit)</h3><div class="tabs" id="emit"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#emit-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#emit-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#emit-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="emit-1"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 为了便于维护，定义好触发的emits</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeTitle <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="emit-2"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// script setup模式下需要使用defineEmits进行定义emit</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'script setup子组件修改的值'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="emit-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 为了便于维护，定义好触发的emits</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'tsx子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>changeTitle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改父组件的的值</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="计算属性computed和监听器watch"><a class="markdownIt-Anchor" href="#计算属性computed和监听器watch"></a> 计算属性(computed)和监听器(watch)</h2><p>更过细节参考</p><ul><li><a href="https://v3.cn.vuejs.org/guide/computed.html">基础：响应式计算和侦听器</a></li><li><a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E8%AE%A1%E7%AE%97%E5%80%BC">深入：响应式计算和侦听器</a></li></ul><h3 id="计算属性"><a class="markdownIt-Anchor" href="#计算属性"></a> 计算属性</h3><div class="tabs" id="computed"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#computed-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#computed-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#computed-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="computed-1"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前value原值&#123;&#123; val &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前计算属性newVal的值&#123;&#123; newVal &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>val+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 返回val加10的结果</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> val<span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="computed-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前value原值&#123;&#123; val &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前计算属性newVal的值&#123;&#123; newVal &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>val+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回val加10的结果</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="computed-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 返回val加10的结果</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前value原值</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前计算属性newVal的值</span><span class="token punctuation">&#123;</span>newVal<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">val+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="监听器watch"><a class="markdownIt-Anchor" href="#监听器watch"></a> 监听器(watch)</h3><h4 id="基础用法监听单个值"><a class="markdownIt-Anchor" href="#基础用法监听单个值"></a> 基础用法(监听单个值)</h4><div class="tabs" id="watch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#watch-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#watch-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#watch-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="watch-1"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> val<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-2"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch<span class="token punctuation">,</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前value原值</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">val+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="获取组件引用"><a class="markdownIt-Anchor" href="#获取组件引用"></a> 获取组件引用</h2><p>在vue2中获取引用通过<code>this.$ref</code>，然后vue3中并没有<code>this</code>，因此获取ref时的方式也发生了变化。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue/">Vue</category>
      
      
      <category domain="https://www.antmoe.com/tags/%E5%88%9D%E8%AF%86Vue3/">初识Vue3</category>
      
      
      <comments>https://www.antmoe.com/posts/296e7875/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VUE单文件组件开发</title>
      <link>https://www.antmoe.com/posts/380b1077/</link>
      <guid>https://www.antmoe.com/posts/380b1077/</guid>
      <pubDate>Wed, 14 Jul 2021 07:13:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>首先需要阐明的是本文单文件开发最终实现的结果：**在 HTML 中通过引入打包后的 js 文件，然后使用组件标签即可渲染。**例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xk-head</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2213<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xk-head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#page'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          msg<span class="token operator">:</span> <span class="token string">'Hello Vue!123'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么没有把 vue 打包到<code>main.js</code>中?</p><p>考虑到一个页面可能会用到多个组件，而多个组件可能并不是使用的一个 js 生成，因此将 VUE 使用 CDN 方式引入。为了避免引入的繁琐，样式文件也没有进行拆分。</p></blockquote><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><blockquote><p>此部分只包含核心部分，代码可能不可以直接使用。</p></blockquote><p>既然想要把<code>vue</code>单文件打包成 js 文件，那么核心就是<code>webpack</code>和<code>vue-loader</code>。</p><p>截至到目前（2021-07-04）为止，vue-loader 最新版本为 16+，但是 16 版本是针对 VUE3 的，而我所要使用的则是 VUE2 版本，因此并不能使用最新版本。因此需要安装的版本依赖如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.14.6"</span><span class="token punctuation">,</span>  <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"8.2.2"</span><span class="token punctuation">,</span>  <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>  <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"15.9.7"</span><span class="token punctuation">,</span>  <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>  <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"5.42.0"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.7.2"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.2"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来配置 webpack（只列出了核心配置）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> VueLoaderPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 它会应用到普通的 `.js` 文件</span>      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;script>` 块</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 它会应用到普通的 `.css` 文件</span>      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;style>` 块</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 请确保引入这个插件来施展魔法</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vue-loader15 版本后需要引入一个<code>VueLoaderPlugin</code>的 plugin 才可以使用。并且在 15 版本后 vue 中对应的 js 和 css 会分别对应其后缀的文件进行解析。</p></blockquote><p>不出意外此时即可编译出一个 js，将其引入到 HTML 中即可实现。</p><h2 id="优化配置"><a class="markdownIt-Anchor" href="#优化配置"></a> 优化配置</h2><p>以<code>src</code>为开发目录进行配置</p><h3 id="webpack-配置文件"><a class="markdownIt-Anchor" href="#webpack-配置文件"></a> webpack 配置文件</h3><ol><li><p>入口文件</p><p>因为我们开发的是单文件组件，因此入口文件可能不止一个（不同类型或用途的组件），因此我们的入口最好是动态获取。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description: 获取入口 */</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> parse<span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment">/** * 传入路径获取入口文件配置 * @date 2021-05-18 * @param &#123;String&#125; path 入口js文件夹 * @returns &#123;Object&#125; 入口配置对象 */</span><span class="token keyword">const</span> <span class="token function-variable function">getEntry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> ext<span class="token punctuation">,</span> base <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> path<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 如果ext存在,则认为是入口js文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      entry<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> entry<span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> getEntry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>向外暴露一个函数，参数传入一个路径，该函数会返回入口文件的对象。</p></blockquote></li><li><p>loader</p><p>由于 loader 包含的类型比较多（sass、scss、stylus 等）因此我会讲他单独提取出来。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./stylus'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./less.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./sass'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./scss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./javascript'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./image'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./font'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./font'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./vue'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过一个入口文件，向外暴露一个 loader 的列表。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// stylus示例</span><span class="token keyword">const</span> stylus <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl(us)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      loader<span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>      options<span class="token operator">:</span> <span class="token punctuation">&#123;</span> importLoaders<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    <span class="token string">'stylus-loader'</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他 loader 也是如此配置</p></blockquote></li><li><p>plugins</p><p>plugins 由于只用到了两个，且不需要过多配置，因此个人认为无需提取。</p></li><li><p>其他</p><p>例如<code>mode</code>和<code>devtool</code>则是根据环境变量和个人需求进行配置。</p></li></ol><h3 id="组件开发"><a class="markdownIt-Anchor" href="#组件开发"></a> 组件开发</h3><ol><li><p>入口文件</p><p>这里入口文件暂定为<code>/src/components</code>目录下的每一个 js 文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入头部组件</span><span class="token keyword">import</span> head <span class="token keyword">from</span> <span class="token string">'../components/head/head.vue'</span><span class="token comment">/** * 全局filter */</span><span class="token keyword">import</span> filterInit <span class="token keyword">from</span> <span class="token string">'../util/filter'</span><span class="token function">filterInit</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>name<span class="token punctuation">,</span> head<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>devtools <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span>window<span class="token punctuation">.</span>Vue <span class="token operator">=</span> Vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><ol><li><p><code>vue-loader</code>版本问题</p><p><code>vue-loader</code>版本 16 只支持 vue3,因此如果使用 vue2 则需要使用 15.x 版本.</p></li><li><p>组件库</p><p>例如<code>elementui</code>组件库</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例仓库:<a href="https://github.com/kkfive/vue-components-init.git">https://github.com/kkfive/vue-components-init.git</a></p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Vue2/">Vue2</category>
      
      
      <category domain="https://www.antmoe.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/">组件化开发</category>
      
      
      <comments>https://www.antmoe.com/posts/380b1077/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JavaScript中的防抖和节流</title>
      <link>https://www.antmoe.com/posts/7f741bc2/</link>
      <guid>https://www.antmoe.com/posts/7f741bc2/</guid>
      <pubDate>Sat, 29 May 2021 13:47:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="什么是防抖"><a class="markdownIt-Anchor" href="#什么是防抖"></a> 什么是防抖</h2><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><p><img src="https://file.acs.pw/picgo/2021/05/29/20210529221042.jpeg" alt="防抖" /></p><p>防抖应用场景如下</p><ul><li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li><li>表单验证</li><li>按钮提交事件。</li><li>浏览器窗口缩放，resize事件(如窗口停止改变大小之后重新计算布局)等。</li></ul><h3 id="具体实现lodash库"><a class="markdownIt-Anchor" href="#具体实现lodash库"></a> 具体实现(Lodash库)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @param &#123; Function &#125; func 要进行debouce的函数 * @param &#123; Number &#125; wait 等待时间,默认500ms * @param &#123; Boolean &#125; immediate 是否立即执行 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> immediate<span class="token operator">=</span><span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timeout    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果已经执行过，不再执行</span>            <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>非立即执行的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>立即执行的意思是触发事件后函数会立即执行，然后 n 秒内<strong>不触发事件</strong>才能继续执行函数的效果</p></blockquote><h2 id="什么是节流"><a class="markdownIt-Anchor" href="#什么是节流"></a> 什么是节流</h2><p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p><p><img src="https://file.acs.pw/picgo/2021/05/29/20210529221115.jpeg" alt="节流" /></p><p>节流应用场景：</p><ul><li>按钮点击事件</li><li>拖拽事件</li><li>onScoll</li><li>计算鼠标移动的距离(mousemove)</li></ul><h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 节流，多次触发，间隔时间段执行 * @param &#123; Function &#125; func * @param &#123; Number &#125; wait * @param &#123; Object &#125; options */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args    <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>leading<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>trailing<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now        <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token keyword">this</span>        args <span class="token operator">=</span> arguments        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">&#125;</span>            previous <span class="token operator">=</span> now            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> throttled<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第三个参数还有点复杂，<code>options</code></p><ul><li>leading，函数在每个等待时延的开始被调用，默认值为false</li><li>trailing，函数在每个等待时延的结束被调用，默认值是true</li></ul><p><code>leading-false，trailing-true</code>：默认情况，即在延时结束后才会调用函数</p><p><code>leading-true，trailing-true</code>：在延时开始时就调用，延时结束后也会调用</p><p><code>leading-true, trailing-false</code>：只在延时开始时调用</p></blockquote><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><p>函数防抖</p><p>将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p><ol><li>input框搜索，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li></ol></li><li><p>函数节流</p><p>使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数。</p><ol><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ol></li><li><p>区别</p><p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数</p><p>而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p></li></ul><h2 id="文章参考"><a class="markdownIt-Anchor" href="#文章参考"></a> 文章参考</h2><ul><li><a href="https://www.cnblogs.com/momo798/p/9177767.html">js防抖和节流</a></li><li><a href="https://github.com/Michael-lzg/my--article/blob/master/javascript/js%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81.md">js防抖和节流</a></li><li><a href="https://juejin.cn/post/7000919400249294862">16个工程必备的JavaScript代码片段（建议添加到项目中）</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/JavaScript/">JavaScript</category>
      
      
      <category domain="https://www.antmoe.com/tags/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/">防抖节流</category>
      
      
      <comments>https://www.antmoe.com/posts/7f741bc2/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
