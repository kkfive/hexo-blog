{"title":"六、Docker-compose","slug":"日常学习/部署与构建/Docker/6. Docker-compose","date":"2021-03-01T14:43:00.000Z","updated":"2021-03-01T14:43:00.000Z","comments":true,"path":"api/articles/日常学习/部署与构建/Docker/6. Docker-compose.json","excerpt":null,"covers":null,"content":"<h2 id=\"安装与卸载\"><a class=\"markdownIt-Anchor\" href=\"#安装与卸载\"></a> 安装与卸载</h2>\n<h3 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h3>\n<p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">`</span></span>-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> /usr/local/bin/docker-compose\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"linux手动下载\"><a class=\"markdownIt-Anchor\" href=\"#linux手动下载\"></a> Linux手动下载</h3>\n<ol>\n<li>\n<p>进入<a href=\"https://github.com/docker/compose/releases\">GitHub</a>下载</p>\n</li>\n<li>\n<p>将文件上传到服务器（Linux机器）</p>\n</li>\n<li>\n<p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>为其赋予可执行权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"macos-windows\"><a class=\"markdownIt-Anchor\" href=\"#macos-windows\"></a> macos、windows</h3>\n<p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p>\n<h3 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\"></a> 卸载</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"docker-compose文件的基本格式\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose文件的基本格式\"></a> docker-compose文件的基本格式</h2>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.2\"</span> <span class=\"token comment\"># 官方网址 https://docs.docker.com/compose/compose-file/</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tomcat01</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#服务名称（id）</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat01 <span class=\"token comment\"># 相当于run 的 --name</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>8.0<span class=\"token punctuation\">-</span>jre8 <span class=\"token comment\">#使用哪个镜像  相当于run image</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#用来完成host与容器的端口映射关系  相当于run -p</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#完成宿主机与容器中目录数据卷共享  相当于run -v</span>\n      <span class=\"token comment\">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>\n      <span class=\"token punctuation\">-</span> tomcatwebapps01<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#代表当前服务使用哪个网络桥     相当于run --networ</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">tomcat02</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#服务名称</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat02\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>8.0<span class=\"token punctuation\">-</span>jre8 <span class=\"token comment\">#使用哪个镜像</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#用来完成host与容器的端口映射关系</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8081:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#完成宿主机与容器中目录数据卷共享</span>\n      <span class=\"token comment\">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>\n      <span class=\"token punctuation\">-</span> tomcatwebapps02<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#代表当前服务使用哪个网络桥</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>5.7.32\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3307:3306\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mysqldata<span class=\"token punctuation\">:</span>/var/lib/mysql\n      <span class=\"token punctuation\">-</span> mysqlconf<span class=\"token punctuation\">:</span>/etc/mysql\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=root\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>5.0.10\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> redis\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redisdata<span class=\"token punctuation\">:</span>/data\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> hello\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis-server --appendonly yes\"</span> <span class=\"token comment\">#run 镜像之后用来覆盖容器内容默认命令</span>\n\n\n\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#声明上面服务所使用的自动创建的卷名</span>\n  <span class=\"token key atrule\">tomcatwebapps01</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#声明指令的卷名  compose自动创建该卷名但是会在之前加入项目名</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">#使用自定义卷名</span>\n      false       <span class=\"token comment\">#true确定使用指定卷名  注意:一旦使用外部自定义卷名启动服务之前必须手动创建</span>\n  <span class=\"token key atrule\">tomcatwebapps02</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysqldata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysqlconf</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redisdata</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#定义服务用到桥</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#定义上面的服务用到的网桥名称 默认创建就是 bridge</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span>\n      <span class=\"token boolean important\">true</span>   <span class=\"token comment\">#使用外部指定网桥  注意:网桥必须存在</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"docker-compose模板文件命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose模板文件命令\"></a> docker-compose模板文件命令</h2>\n<h3 id=\"build\"><a class=\"markdownIt-Anchor\" href=\"#build\"></a> build</h3>\n<p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">webapp</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>\n<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>\n<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">webapp</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./dir\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile<span class=\"token punctuation\">-</span>alternate\n      <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">buildno</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"command\"><a class=\"markdownIt-Anchor\" href=\"#command\"></a> command</h3>\n<p>覆盖容器启动后默认执行的命令。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> echo \"hello world\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"container_name\"><a class=\"markdownIt-Anchor\" href=\"#container_name\"></a> container_name</h3>\n<p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>web<span class=\"token punctuation\">-</span>container<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>\n</blockquote>\n<h3 id=\"depends_on\"><a class=\"markdownIt-Anchor\" href=\"#depends_on\"></a> depends_on</h3>\n<p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> db\n      <span class=\"token punctuation\">-</span> redis\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis\n\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>\n</blockquote>\n<h3 id=\"environment\"><a class=\"markdownIt-Anchor\" href=\"#environment\"></a> environment</h3>\n<p>设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">RACK_ENV</span><span class=\"token punctuation\">:</span> development\n  <span class=\"token key atrule\">SESSION_SECRET</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> RACK_ENV=development\n  <span class=\"token punctuation\">-</span> SESSION_SECRET<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href=\"https://yaml.org/type/bool.html\">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"env_file\"><a class=\"markdownIt-Anchor\" href=\"#env_file\"></a> env_file</h3>\n<p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>\n<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>\n<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">env_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>\n<pre class=\"line-numbers language-env\" data-language=\"env\"><code class=\"language-env\"># common.env: Set development environment\nPROG_ENV&#x3D;development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"healthcheck\"><a class=\"markdownIt-Anchor\" href=\"#healthcheck\"></a> healthcheck</h3>\n<p>通过命令检查容器是否健康运行。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 1m30s\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 10s\n  <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"image\"><a class=\"markdownIt-Anchor\" href=\"#image\"></a> image</h3>\n<p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ubuntu\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> orchardup/postgresql\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> a4bc65fd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"networks\"><a class=\"markdownIt-Anchor\" href=\"#networks\"></a> networks</h3>\n<p>配置容器连接的网络。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">some-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> some<span class=\"token punctuation\">-</span>network\n     <span class=\"token punctuation\">-</span> other<span class=\"token punctuation\">-</span>network\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">some-network</span><span class=\"token punctuation\">:</span>\n  other<span class=\"token punctuation\">-</span>network<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"ports\"><a class=\"markdownIt-Anchor\" href=\"#ports\"></a> ports</h3>\n<p>暴露端口信息。</p>\n<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3000\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:8000\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"49100:22\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"127.0.0.1:8001:8001\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>\n<h3 id=\"sysctls\"><a class=\"markdownIt-Anchor\" href=\"#sysctls\"></a> sysctls</h3>\n<p>配置容器内核参数。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sysctls</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">net.core.somaxconn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span>\n  <span class=\"token key atrule\">net.ipv4.tcp_syncookies</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n<span class=\"token key atrule\">sysctls</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> net.core.somaxconn=1024\n  <span class=\"token punctuation\">-</span> net.ipv4.tcp_syncookies=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"ulimits\"><a class=\"markdownIt-Anchor\" href=\"#ulimits\"></a> ulimits</h3>\n<p>指定容器的 ulimits 限制值。</p>\n<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ulimits</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nproc</span><span class=\"token punctuation\">:</span> <span class=\"token number\">65535</span>\n  <span class=\"token key atrule\">nofile</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">soft</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span>\n    <span class=\"token key atrule\">hard</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> volumes</h3>\n<p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>\n<p>该指令中路径支持相对路径。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> /var/lib/mysql\n <span class=\"token punctuation\">-</span> cache/<span class=\"token punctuation\">:</span>/tmp/cache\n <span class=\"token punctuation\">-</span> ~/configs<span class=\"token punctuation\">:</span>/etc/configs/<span class=\"token punctuation\">:</span>ro<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">my_src</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">8.0</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mysql_data<span class=\"token punctuation\">:</span>/var/lib/mysql\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  mysql_data<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"docker-compose-常用命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose-常用命令\"></a> docker-compose 常用命令</h2>\n<h3 id=\"命令对象与格式\"><a class=\"markdownIt-Anchor\" href=\"#命令对象与格式\"></a> 命令对象与格式</h3>\n<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>\n<p><code>docker-compose</code> 命令的基本的使用格式是</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose <span class=\"token punctuation\">[</span>-f<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>arg<span class=\"token operator\">></span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>COMMAND<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARGS<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"命令选项\"><a class=\"markdownIt-Anchor\" href=\"#命令选项\"></a> 命令选项</h3>\n<div class=\"tabs\" id=\"options\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#options-1\">项目、配置文件</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#options-2\">网络特性</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#options-3\">日志输出</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"options-1\"><ul>\n<li>\n<p><code>-f, --file FILE</code></p>\n<p>指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p>\n</li>\n<li>\n<p><code>-p, --project-name NAME</code></p>\n<p>指定项目名称，默认将使用所在目录名称作为项目名。</p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"options-2\"><ul>\n<li>\n<p><code>--x-networking</code></p>\n<p>使用 Docker 的可拔插网络后端特性</p>\n</li>\n<li>\n<p><code>--x-network-driver DRIVER</code></p>\n<p>指定网络后端的驱动，默认为 <code>bridge</code></p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"options-3\"><ul>\n<li>\n<p><code>--verbose</code></p>\n<p>输出更多调试信息。</p>\n</li>\n<li>\n<p><code>-v, --version</code></p>\n<p>打印版本并退出。</p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"命令使用说明\"><a class=\"markdownIt-Anchor\" href=\"#命令使用说明\"></a> 命令使用说明</h3>\n<h3 id=\"up\"><a class=\"markdownIt-Anchor\" href=\"#up\"></a> up</h3>\n<p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>\n<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>\n<blockquote>\n<p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>\n<p><em>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</em></p>\n<p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>\n</blockquote>\n<h3 id=\"down\"><a class=\"markdownIt-Anchor\" href=\"#down\"></a> down</h3>\n<p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>\n<h3 id=\"exec\"><a class=\"markdownIt-Anchor\" href=\"#exec\"></a> exec</h3>\n<p>进入指定的容器。</p>\n<h3 id=\"ps\"><a class=\"markdownIt-Anchor\" href=\"#ps\"></a> ps</h3>\n<p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>\n<p>列出项目中目前的所有容器。<code>-q</code>可以只打印容器的id信息</p>\n<h3 id=\"restart\"><a class=\"markdownIt-Anchor\" href=\"#restart\"></a> restart</h3>\n<p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>\n<p>重启项目中的服务。</p>\n<p>选项：</p>\n<ul>\n<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>\n</ul>\n<h3 id=\"rm\"><a class=\"markdownIt-Anchor\" href=\"#rm\"></a> rm</h3>\n<p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>\n<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>\n<p>选项：</p>\n<ul>\n<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>\n<li><code>-v</code> 删除容器所挂载的数据卷。</li>\n</ul>\n<h3 id=\"start\"><a class=\"markdownIt-Anchor\" href=\"#start\"></a> start</h3>\n<p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>\n<p>启动已经存在的服务容器。</p>\n<h3 id=\"stop\"><a class=\"markdownIt-Anchor\" href=\"#stop\"></a> stop</h3>\n<p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>\n<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>\n<p>选项：</p>\n<ul>\n<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>\n</ul>\n<h3 id=\"top\"><a class=\"markdownIt-Anchor\" href=\"#top\"></a> top</h3>\n<p>查看各个服务容器内运行的进程。</p>\n<h3 id=\"pause\"><a class=\"markdownIt-Anchor\" href=\"#pause\"></a> pause</h3>\n<p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p>\n<p>暂停服务</p>\n<h3 id=\"unpause\"><a class=\"markdownIt-Anchor\" href=\"#unpause\"></a> unpause</h3>\n<p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>\n<p>恢复处于暂停状态中的服务。</p>\n","more":"<h2 id=\"安装与卸载\"><a class=\"markdownIt-Anchor\" href=\"#安装与卸载\"></a> 安装与卸载</h2>\n<h3 id=\"linux系统\"><a class=\"markdownIt-Anchor\" href=\"#linux系统\"></a> Linux系统</h3>\n<p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">`</span></span>-<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> /usr/local/bin/docker-compose\n<span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"linux手动下载\"><a class=\"markdownIt-Anchor\" href=\"#linux手动下载\"></a> Linux手动下载</h3>\n<ol>\n<li>\n<p>进入<a href=\"https://github.com/docker/compose/releases\">GitHub</a>下载</p>\n</li>\n<li>\n<p>将文件上传到服务器（Linux机器）</p>\n</li>\n<li>\n<p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>为其赋予可执行权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"macos-windows\"><a class=\"markdownIt-Anchor\" href=\"#macos-windows\"></a> macos、windows</h3>\n<p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p>\n<h3 id=\"卸载\"><a class=\"markdownIt-Anchor\" href=\"#卸载\"></a> 卸载</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"docker-compose文件的基本格式\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose文件的基本格式\"></a> docker-compose文件的基本格式</h2>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.2\"</span> <span class=\"token comment\"># 官方网址 https://docs.docker.com/compose/compose-file/</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tomcat01</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#服务名称（id）</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat01 <span class=\"token comment\"># 相当于run 的 --name</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>8.0<span class=\"token punctuation\">-</span>jre8 <span class=\"token comment\">#使用哪个镜像  相当于run image</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#用来完成host与容器的端口映射关系  相当于run -p</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8080:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#完成宿主机与容器中目录数据卷共享  相当于run -v</span>\n      <span class=\"token comment\">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>\n      <span class=\"token punctuation\">-</span> tomcatwebapps01<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#代表当前服务使用哪个网络桥     相当于run --networ</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">tomcat02</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#服务名称</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> tomcat02\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> tomcat<span class=\"token punctuation\">:</span>8.0<span class=\"token punctuation\">-</span>jre8 <span class=\"token comment\">#使用哪个镜像</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#用来完成host与容器的端口映射关系</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8081:8080\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#完成宿主机与容器中目录数据卷共享</span>\n      <span class=\"token comment\">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>\n      <span class=\"token punctuation\">-</span> tomcatwebapps02<span class=\"token punctuation\">:</span>/usr/local/tomcat/webapps\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#代表当前服务使用哪个网络桥</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>5.7.32\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> mysql\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3307:3306\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mysqldata<span class=\"token punctuation\">:</span>/var/lib/mysql\n      <span class=\"token punctuation\">-</span> mysqlconf<span class=\"token punctuation\">:</span>/etc/mysql\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=root\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> hello\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>5.0.10\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> redis\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redisdata<span class=\"token punctuation\">:</span>/data\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> hello\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis-server --appendonly yes\"</span> <span class=\"token comment\">#run 镜像之后用来覆盖容器内容默认命令</span>\n\n\n\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#声明上面服务所使用的自动创建的卷名</span>\n  <span class=\"token key atrule\">tomcatwebapps01</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#声明指令的卷名  compose自动创建该卷名但是会在之前加入项目名</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\">#使用自定义卷名</span>\n      false       <span class=\"token comment\">#true确定使用指定卷名  注意:一旦使用外部自定义卷名启动服务之前必须手动创建</span>\n  <span class=\"token key atrule\">tomcatwebapps02</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysqldata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mysqlconf</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redisdata</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#定义服务用到桥</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#定义上面的服务用到的网桥名称 默认创建就是 bridge</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span>\n      <span class=\"token boolean important\">true</span>   <span class=\"token comment\">#使用外部指定网桥  注意:网桥必须存在</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"docker-compose模板文件命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose模板文件命令\"></a> docker-compose模板文件命令</h2>\n<h3 id=\"build\"><a class=\"markdownIt-Anchor\" href=\"#build\"></a> build</h3>\n<p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">webapp</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>\n<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>\n<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">webapp</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./dir\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> Dockerfile<span class=\"token punctuation\">-</span>alternate\n      <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">buildno</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"command\"><a class=\"markdownIt-Anchor\" href=\"#command\"></a> command</h3>\n<p>覆盖容器启动后默认执行的命令。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> echo \"hello world\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"container_name\"><a class=\"markdownIt-Anchor\" href=\"#container_name\"></a> container_name</h3>\n<p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>web<span class=\"token punctuation\">-</span>container<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>\n</blockquote>\n<h3 id=\"depends_on\"><a class=\"markdownIt-Anchor\" href=\"#depends_on\"></a> depends_on</h3>\n<p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> db\n      <span class=\"token punctuation\">-</span> redis\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis\n\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>\n</blockquote>\n<h3 id=\"environment\"><a class=\"markdownIt-Anchor\" href=\"#environment\"></a> environment</h3>\n<p>设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">RACK_ENV</span><span class=\"token punctuation\">:</span> development\n  <span class=\"token key atrule\">SESSION_SECRET</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> RACK_ENV=development\n  <span class=\"token punctuation\">-</span> SESSION_SECRET<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href=\"https://yaml.org/type/bool.html\">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"env_file\"><a class=\"markdownIt-Anchor\" href=\"#env_file\"></a> env_file</h3>\n<p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>\n<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>\n<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">env_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>\n<pre class=\"line-numbers language-env\" data-language=\"env\"><code class=\"language-env\"># common.env: Set development environment\nPROG_ENV&#x3D;development<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"healthcheck\"><a class=\"markdownIt-Anchor\" href=\"#healthcheck\"></a> healthcheck</h3>\n<p>通过命令检查容器是否健康运行。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-f\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 1m30s\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 10s\n  <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"image\"><a class=\"markdownIt-Anchor\" href=\"#image\"></a> image</h3>\n<p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ubuntu\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> orchardup/postgresql\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> a4bc65fd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"networks\"><a class=\"markdownIt-Anchor\" href=\"#networks\"></a> networks</h3>\n<p>配置容器连接的网络。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token key atrule\">some-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> some<span class=\"token punctuation\">-</span>network\n     <span class=\"token punctuation\">-</span> other<span class=\"token punctuation\">-</span>network\n\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">some-network</span><span class=\"token punctuation\">:</span>\n  other<span class=\"token punctuation\">-</span>network<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"ports\"><a class=\"markdownIt-Anchor\" href=\"#ports\"></a> ports</h3>\n<p>暴露端口信息。</p>\n<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3000\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:8000\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"49100:22\"</span>\n <span class=\"token punctuation\">-</span> <span class=\"token string\">\"127.0.0.1:8001:8001\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>\n<h3 id=\"sysctls\"><a class=\"markdownIt-Anchor\" href=\"#sysctls\"></a> sysctls</h3>\n<p>配置容器内核参数。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sysctls</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">net.core.somaxconn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span>\n  <span class=\"token key atrule\">net.ipv4.tcp_syncookies</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n\n<span class=\"token key atrule\">sysctls</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> net.core.somaxconn=1024\n  <span class=\"token punctuation\">-</span> net.ipv4.tcp_syncookies=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"ulimits\"><a class=\"markdownIt-Anchor\" href=\"#ulimits\"></a> ulimits</h3>\n<p>指定容器的 ulimits 限制值。</p>\n<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">ulimits</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nproc</span><span class=\"token punctuation\">:</span> <span class=\"token number\">65535</span>\n  <span class=\"token key atrule\">nofile</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">soft</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20000</span>\n    <span class=\"token key atrule\">hard</span><span class=\"token punctuation\">:</span> <span class=\"token number\">40000</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"volumes\"><a class=\"markdownIt-Anchor\" href=\"#volumes\"></a> volumes</h3>\n<p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>\n<p>该指令中路径支持相对路径。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n <span class=\"token punctuation\">-</span> /var/lib/mysql\n <span class=\"token punctuation\">-</span> cache/<span class=\"token punctuation\">:</span>/tmp/cache\n <span class=\"token punctuation\">-</span> ~/configs<span class=\"token punctuation\">:</span>/etc/configs/<span class=\"token punctuation\">:</span>ro<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">my_src</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">8.0</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> mysql_data<span class=\"token punctuation\">:</span>/var/lib/mysql\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  mysql_data<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"docker-compose-常用命令\"><a class=\"markdownIt-Anchor\" href=\"#docker-compose-常用命令\"></a> docker-compose 常用命令</h2>\n<h3 id=\"命令对象与格式\"><a class=\"markdownIt-Anchor\" href=\"#命令对象与格式\"></a> 命令对象与格式</h3>\n<p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>\n<p><code>docker-compose</code> 命令的基本的使用格式是</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker-compose <span class=\"token punctuation\">[</span>-f<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>arg<span class=\"token operator\">></span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>COMMAND<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ARGS<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"命令选项\"><a class=\"markdownIt-Anchor\" href=\"#命令选项\"></a> 命令选项</h3>\n<div class=\"tabs\" id=\"options\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#options-1\">项目、配置文件</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#options-2\">网络特性</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#options-3\">日志输出</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"options-1\"><ul>\n<li>\n<p><code>-f, --file FILE</code></p>\n<p>指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p>\n</li>\n<li>\n<p><code>-p, --project-name NAME</code></p>\n<p>指定项目名称，默认将使用所在目录名称作为项目名。</p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"options-2\"><ul>\n<li>\n<p><code>--x-networking</code></p>\n<p>使用 Docker 的可拔插网络后端特性</p>\n</li>\n<li>\n<p><code>--x-network-driver DRIVER</code></p>\n<p>指定网络后端的驱动，默认为 <code>bridge</code></p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"options-3\"><ul>\n<li>\n<p><code>--verbose</code></p>\n<p>输出更多调试信息。</p>\n</li>\n<li>\n<p><code>-v, --version</code></p>\n<p>打印版本并退出。</p>\n</li>\n</ul><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"命令使用说明\"><a class=\"markdownIt-Anchor\" href=\"#命令使用说明\"></a> 命令使用说明</h3>\n<h3 id=\"up\"><a class=\"markdownIt-Anchor\" href=\"#up\"></a> up</h3>\n<p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>\n<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>\n<blockquote>\n<p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>\n<p><em>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</em></p>\n<p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>\n</blockquote>\n<h3 id=\"down\"><a class=\"markdownIt-Anchor\" href=\"#down\"></a> down</h3>\n<p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>\n<h3 id=\"exec\"><a class=\"markdownIt-Anchor\" href=\"#exec\"></a> exec</h3>\n<p>进入指定的容器。</p>\n<h3 id=\"ps\"><a class=\"markdownIt-Anchor\" href=\"#ps\"></a> ps</h3>\n<p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>\n<p>列出项目中目前的所有容器。<code>-q</code>可以只打印容器的id信息</p>\n<h3 id=\"restart\"><a class=\"markdownIt-Anchor\" href=\"#restart\"></a> restart</h3>\n<p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>\n<p>重启项目中的服务。</p>\n<p>选项：</p>\n<ul>\n<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>\n</ul>\n<h3 id=\"rm\"><a class=\"markdownIt-Anchor\" href=\"#rm\"></a> rm</h3>\n<p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>\n<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>\n<p>选项：</p>\n<ul>\n<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>\n<li><code>-v</code> 删除容器所挂载的数据卷。</li>\n</ul>\n<h3 id=\"start\"><a class=\"markdownIt-Anchor\" href=\"#start\"></a> start</h3>\n<p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>\n<p>启动已经存在的服务容器。</p>\n<h3 id=\"stop\"><a class=\"markdownIt-Anchor\" href=\"#stop\"></a> stop</h3>\n<p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>\n<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>\n<p>选项：</p>\n<ul>\n<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>\n</ul>\n<h3 id=\"top\"><a class=\"markdownIt-Anchor\" href=\"#top\"></a> top</h3>\n<p>查看各个服务容器内运行的进程。</p>\n<h3 id=\"pause\"><a class=\"markdownIt-Anchor\" href=\"#pause\"></a> pause</h3>\n<p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p>\n<p>暂停服务</p>\n<h3 id=\"unpause\"><a class=\"markdownIt-Anchor\" href=\"#unpause\"></a> unpause</h3>\n<p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>\n<p>恢复处于暂停状态中的服务。</p>\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker-compose","path":"api/tags/Docker-compose.json"}]}