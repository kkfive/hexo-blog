{"title":"优雅解决LeanCloud流控问题","slug":"Hexo相关/评论相关/优雅解决LeanCLoud流控问题","date":"2020-05-14T14:54:25.000Z","updated":"2022-02-21T07:18:57.041Z","comments":false,"path":"api/articles/Hexo相关/评论相关/优雅解决LeanCLoud流控问题.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/22/097cd88f446efae87cb27de38c5eed15.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/690052ad1e12bd97d8459f6533fcc64b.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/c8a4f0d2c05048eff1ce5d43b7dfd6b1.png","https://cdn.jsdelivr.net/gh/blogimg/emotion/aru/40.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/d15b1fffb681f0dd3b9264ea878bf055.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/6c2cd1845116e3d4e4147157d334be19.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/caed66e8408e5a0c91fe446951180f8d.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/07496898cc28811fd036a516c5f3419e.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/4736d5905066440617f4a63ecfc70cc1.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/91a79177e21e2a49d28be09cc676ad7a.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/980e07f7e4c82e8c1c1bf7d76e917270.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/94f15877483ab13d9e07e673720b5eba.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/3a79c54ac105dea310e1dd7eceee9fd9.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/c0a1b9cf1a254e624cb8adb0be2581e1.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/19/0b1cc831b7f0fb7779c11bb29288da98.png","https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/a240386ca356e2b2a5534b4db40531ec.png"],"content":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<div class=\"note danger icon flat\"><p>由于作者已放弃valine评论，故关于此评论有关的项目均已放弃。</p>\n</div>\n<p>最近好多人遇到了&quot;因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠&quot;。我也遇到了这种问题，太难受了。难道白嫖结束了，羊被薅死了？<img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/22/097cd88f446efae87cb27de38c5eed15.png\" alt=\"\" /></p>\n<p>但我还是不甘心，于是只能另寻他法。</p>\n<p>首先看到官方所说：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/690052ad1e12bd97d8459f6533fcc64b.png\" alt=\"\" /></p>\n<p>既然是同一时刻，那么是不是意味着只要搓开时间就可以了呢？</p>\n<p>我便调整时间尝试了几天，第一天还好，但以后便又出现了流控导致的失败。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/c8a4f0d2c05048eff1ce5d43b7dfd6b1.png\" alt=\"image-20200514225944504\" /></p>\n<p><strong>因此，调整时间避免的方案治标不治本。还需另寻他法。</strong></p>\n<h2 id=\"目前方案\"><a class=\"markdownIt-Anchor\" href=\"#目前方案\"></a> 目前方案</h2>\n<ol>\n<li>\n<p>修改定时任务的唤醒时间</p>\n<p>这个方案在上边我已经介绍过了，治标不治本。这里我并不推荐。</p>\n</li>\n<li>\n<p>在博客多加入一条请求。</p>\n<p>也就说每一次访问博客时，将 leancloud 唤醒。这种方法可以，这也是我最先想到的，但无疑，这会在一定程度上拖慢博客加载速度。</p>\n</li>\n<li>\n<p>第二个方案的变种</p>\n<p>为什么说是变种。因为也是加一个请求，只不过不会在你博客加，那么加在哪里呢？请继续往后看。</p>\n</li>\n</ol>\n<h2 id=\"优雅解决\"><a class=\"markdownIt-Anchor\" href=\"#优雅解决\"></a> 优雅解决</h2>\n<p>解决方案其实真的还蛮多的。因为方案很多，我也不可能每种方案都写一篇详细的小白教程，因此发现或者想到新方案后，我会将思路分享给大家。至于具体如何操作，请自己动手，详细过程不可能再会给出教程(<em>特别繁琐除外</em>)，本文只会给出一些关键性的代码（脚本），以及代码（脚本）如何使用。</p>\n<p><strong>此篇文章详细介绍方案一的做法，其他方案为 2020 年 05 月 18 日后补方案</strong></p>\n<p>LeanCloud 的机器唤醒其实还有一种方式。详情请看<a href=\"https://leancloud.cn/docs/leanengine_plan.html#hash633315134\">休眠策略</a>。</p>\n<blockquote>\n<ul>\n<li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li>\n<li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li>\n<li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 <strong>云引擎 &gt; 统计</strong> 中查看。</li>\n</ul>\n</blockquote>\n<p>那么我们只要每三十分钟之内在外部访问一次不就可以解决了么？</p>\n<p>于是我查看了一下<code>valine-admin</code>的唤醒源代码，自唤醒云函数也是这样实现的。于是便继续开始白嫖。<img src=\"https://cdn.jsdelivr.net/gh/blogimg/emotion/aru/40.png\" alt=\"阿鲁小表情-小康博客\" /></p>\n<h2 id=\"思路脑图\"><a class=\"markdownIt-Anchor\" href=\"#思路脑图\"></a> 思路脑图</h2>\n<p>以下所有方案均遵循这里的脑图思路。如果小白博客请看懂思路后在尝试。<mark>不要无脑复制！不要无脑复制！不要无脑复制！</mark></p>\n<p>思路：通过某种（下边的任意一种）方式，从外部 get 你的<strong>评论后台地址</strong>。</p>\n<div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div><div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div><div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div>\n<h2 id=\"开始尝试\"><a class=\"markdownIt-Anchor\" href=\"#开始尝试\"></a> 开始尝试</h2>\n<p>这里我使用的是 GitHub+Actions。是不是很熟悉，自动部署也是这个方案呢。</p>\n<ol>\n<li>\n<p>鼠标放在右上角，选择 setting</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>点击<code>Developer settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>选择<code>Personal access tokens</code>，添加一个新的 TOKEN。</p>\n<p>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</p>\n<p>设置名字为<code>GITHUB_TOKEN</code> , 然后勾选 repo , admin:repo_hook , workflow 等选项，最后点击 Generate token 即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png\" alt=\"image-20200515211343057\" /></p>\n<p><strong>名字请务必使用</strong><code>GITHUB_TOKEN</code>。</p>\n</li>\n<li>\n<p>接下来 FORK 项目。</p>\n<p>地址：<a href=\"https://github.com/blogimg/WakeLeanCloud\">https://github.com/blogimg/WakeLeanCloud</a></p>\n<p>如果觉得好用可以点个赞哦！</p>\n</li>\n<li>\n<p>成功 FORK 后，进入项目的设置。添加你的 leancloud 的后台地址（也就是评论管理的后台地址）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/d15b1fffb681f0dd3b9264ea878bf055.png\" alt=\"\" /></p>\n<p>选择 Secrets，添加你的<strong>评论后台地址</strong>，<mark>一定是 Leancloud 的后台地址（环境变量 ADMIN_URL），而不是你的博客地址。</mark></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/6c2cd1845116e3d4e4147157d334be19.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/caed66e8408e5a0c91fe446951180f8d.png\" alt=\"\" /></p>\n<div class='tip warning'><p>SITE的网址应填你的评论管理后台地址，而不是博客地址。<p></div>\n<p><strong>其中 Name 的名字必须为<code>SITE</code>，Value 可以是多个后台地址（注意请求头也要写），用英文逗号分隔。不要中中文逗号，不要用中文逗号，不要用中文逗号</strong></p>\n<blockquote>\n<p>valine 后台地址（你的页面可能与我略有差异，但一定要出现一个类似的页面）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/07496898cc28811fd036a516c5f3419e.png\" alt=\"image-20200609085422749\" /></p>\n</blockquote>\n</li>\n<li>\n<p>接下来对自己的项目点个 star 就能启动了，启动后请切换到 actions，看看是否运行成功。</p>\n<ul>\n<li>\n<p>成功</p>\n<p>那么你就可以关掉了，默认是每天 8:00-24:00 时每 20 分钟运行一次。(GitHub 时间稍有延迟，大概时 2-5 分钟。)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/4736d5905066440617f4a63ecfc70cc1.png\" alt=\"成功示意图\" /></p>\n</li>\n<li>\n<p>失败</p>\n<p>如果你的 GitHub 从来没有用过 actions，那么需要先“了解”。方法很简单，点击绿色的按钮即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/91a79177e21e2a49d28be09cc676ad7a.png\" alt=\"image-20200525093352663\" /></p>\n<p>其他问题：请认真看本教程并且思考为什么这么做，你就能想到你是哪里出了问题。</p>\n</li>\n</ul>\n<blockquote>\n<p>自己点自己的项目是手动执行一次 actions。是为了测试才设计这个功能的哦！</p>\n<p>并不是不点星这个 actions 就不会运行。</p>\n</blockquote>\n</li>\n<li>\n<p>最后，如果觉得好用，请给我点个 star 哦！</p>\n</li>\n</ol>\n<h2 id=\"其他解决方案\"><a class=\"markdownIt-Anchor\" href=\"#其他解决方案\"></a> 其他解决方案</h2>\n<p>这里为<span class=\"inline-tag grey\">2020-05-18</span>之后补充的其他方案。</p>\n<h3 id=\"方案二\"><a class=\"markdownIt-Anchor\" href=\"#方案二\"></a> 方案二</h3>\n<p>利用国内的云函数，自己写一个脚本。然后定时监控即可。</p>\n<p>或者宝塔、自己服务器的定时任务都是可以的。</p>\n<h3 id=\"方案三\"><a class=\"markdownIt-Anchor\" href=\"#方案三\"></a> 方案三</h3>\n<p><code>cloudflare</code>的<code>Workers</code>可以在线定义脚本，通过链接即可触发脚本。</p>\n<p>因此定义好自己的脚本后，通过监控即可触发来实现唤醒 LeanCloud</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;!doctype html>\n&lt;html>\n&lt;head>\n&lt;meta charset=\"utf-8\" />\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n&lt;title>唤醒你的LeanCloud&lt;/title>\n&lt;/head>\n&lt;body></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>body<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/body>\n&lt;/html></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> hour <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> minutes <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>getMinutes<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 事件控制，因此事件采用utc时间，因此需要手动-8</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hour <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> hour <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 列表里添加你的评论管理后台地址</span>\n    <span class=\"token keyword\">const</span> Urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://www.antmoe.com/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.tzki.cn/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>Urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">+=</span> Urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"状态：\"</span> <span class=\"token operator\">+</span> html <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br />\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;br />\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">当前是休息时间哦！&lt;br /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>监控平台：<a href=\"https://uptimerobot.com/\">https://uptimerobot.com/</a> 监控地址就是 Workers 的地址。监控频率看你自己。</p>\n<p>另外网友<a href=\"https://crosschannel.cc/\">track13</a>评论到：其实只外部要唤醒一次就可以，之后都可以交给 leancloud 的定时任务。</p>\n<h3 id=\"方案四\"><a class=\"markdownIt-Anchor\" href=\"#方案四\"></a> 方案四</h3>\n<p>通过<code>cron-job</code>平台进行监控。注册地址：<a href=\"https://cron-job.org/en/signup/\">https://cron-job.org/en/signup/</a></p>\n<ol>\n<li>\n<p>注册</p>\n<p><strong>时区请选择<code>Asia/Shanghai</code>，否则请手动下边的操作请手动换算时间。另外关于最下边的谷歌验证如果出不来，请采用特殊方式。这里不过多介绍。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/980e07f7e4c82e8c1c1bf7d76e917270.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>登录账号</p>\n<p>首先去邮箱激活一下账号哦！<em>邮件可能在垃圾箱哦！</em></p>\n</li>\n<li>\n<p>添加任务</p>\n<p>登陆之后依次点击 <code>Members</code>,<code>cronjobs</code>,<code>Create cronjob</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/94f15877483ab13d9e07e673720b5eba.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/3a79c54ac105dea310e1dd7eceee9fd9.png\" alt=\"image-20200524163630403\" /></p>\n</li>\n<li>\n<p>各项配置的解释</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">简单解释</th>\n<th style=\"text-align:center\">补充说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Title</code></td>\n<td style=\"text-align:center\">任务名称</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Address</code></td>\n<td style=\"text-align:center\">监控地址</td>\n<td style=\"text-align:center\">Leancloud 的 <code>Web 主机域名</code>，也就是环境变量的<code>ADMIN_URL</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Schedule</code></td>\n<td style=\"text-align:center\">任务周期</td>\n<td style=\"text-align:center\">分别为每 X 分钟执行、每天 H:MM 执行、每月 DD 日 HH:MM 执行、自定义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Notifications</code></td>\n<td style=\"text-align:center\">提醒通知</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Save responses</code></td>\n<td style=\"text-align:center\">保存日志</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>配置示例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/c0a1b9cf1a254e624cb8adb0be2581e1.png\" alt=\"\" /></p>\n<p>关于自定义时间，你勾哪个就会在哪个时间段执行。例如五个框里你全选了，那么会每分钟都会执行。因此请各位博主自己想好需要在哪个时间段唤醒，而不是<mark>无脑复制</mark>。</p>\n<blockquote>\n<p>点下第一个，在按住<code>shift</code>点最后一个，会全选所有哦！另外<code>ctrl</code>可以多选</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h2>\n<ol>\n<li>\n<p>修改频率（时间）</p>\n<p>修改<code>.github/workflows/autoWakeup.yml</code>文件中的<code>cron</code>表达式即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/19/0b1cc831b7f0fb7779c11bb29288da98.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>后台地址会不会暴露</p>\n<p>不会的</p>\n</li>\n<li>\n<p>没有效果</p>\n<p>请确保你的第五步成功添加了网址，如果没有添加也会定时执行 actions 的动作而不会报错。可以在详情里查看是否监控的你的地址。正常情况下会如下图所以，多个网址会依次排列。如果没有填写网址则会默认访问作者的博客。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/a240386ca356e2b2a5534b4db40531ec.png\" alt=\"image-20200515211712029\" /></p>\n</li>\n<li>\n<p>每次都会 commit，太多了。</p>\n<p>其实可以每天只运行一次，然后其他时间还是依靠定时函数来完成。例如我将 actions 的时间修改为每天早上 8:00 运行一次。而其他时间通过定时函数唤醒。这样<strong>理论上</strong>也是没问题的。</p>\n<blockquote>\n<p>Actions 的时间是按 UTC 时间计算的，因此设置时请手动将时间换算成 UTC 时间哦！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h2>\n<p>既然用上了 valine，那么我想再次安利下我魔改的 valine-admin 哦！</p>\n<p>项目地址：<a href=\"https://github.com/sviptzk/Valine-Admin-Server\">https://github.com/sviptzk/Valine-Admin-Server</a></p>\n<p>教程地址：<a href=\"https://www.antmoe.com/posts/2380732b/index.html\">https://www.antmoe.com/posts/2380732b/index.html</a></p>\n<p>相较于原版的优势如下:</p>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>微信提醒（基于方糖公众号）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>QQ提醒（基于QMSG）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>一套很漂亮的邮件模板（基于🎉梨花町の肾兄さん🎉的魔改）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>一个漂亮的后台页面（基于懒人大佬）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>适配国际版的时区问题</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>更多特性正在研发！</p></div>\n<script src=\"https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/WithoutLine.min.js\"></script>\n","more":"<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h2>\n<div class=\"note danger icon flat\"><p>由于作者已放弃valine评论，故关于此评论有关的项目均已放弃。</p>\n</div>\n<p>最近好多人遇到了&quot;因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠&quot;。我也遇到了这种问题，太难受了。难道白嫖结束了，羊被薅死了？<img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/22/097cd88f446efae87cb27de38c5eed15.png\" alt=\"\" /></p>\n<p>但我还是不甘心，于是只能另寻他法。</p>\n<p>首先看到官方所说：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/690052ad1e12bd97d8459f6533fcc64b.png\" alt=\"\" /></p>\n<p>既然是同一时刻，那么是不是意味着只要搓开时间就可以了呢？</p>\n<p>我便调整时间尝试了几天，第一天还好，但以后便又出现了流控导致的失败。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/c8a4f0d2c05048eff1ce5d43b7dfd6b1.png\" alt=\"image-20200514225944504\" /></p>\n<p><strong>因此，调整时间避免的方案治标不治本。还需另寻他法。</strong></p>\n<h2 id=\"目前方案\"><a class=\"markdownIt-Anchor\" href=\"#目前方案\"></a> 目前方案</h2>\n<ol>\n<li>\n<p>修改定时任务的唤醒时间</p>\n<p>这个方案在上边我已经介绍过了，治标不治本。这里我并不推荐。</p>\n</li>\n<li>\n<p>在博客多加入一条请求。</p>\n<p>也就说每一次访问博客时，将 leancloud 唤醒。这种方法可以，这也是我最先想到的，但无疑，这会在一定程度上拖慢博客加载速度。</p>\n</li>\n<li>\n<p>第二个方案的变种</p>\n<p>为什么说是变种。因为也是加一个请求，只不过不会在你博客加，那么加在哪里呢？请继续往后看。</p>\n</li>\n</ol>\n<h2 id=\"优雅解决\"><a class=\"markdownIt-Anchor\" href=\"#优雅解决\"></a> 优雅解决</h2>\n<p>解决方案其实真的还蛮多的。因为方案很多，我也不可能每种方案都写一篇详细的小白教程，因此发现或者想到新方案后，我会将思路分享给大家。至于具体如何操作，请自己动手，详细过程不可能再会给出教程(<em>特别繁琐除外</em>)，本文只会给出一些关键性的代码（脚本），以及代码（脚本）如何使用。</p>\n<p><strong>此篇文章详细介绍方案一的做法，其他方案为 2020 年 05 月 18 日后补方案</strong></p>\n<p>LeanCloud 的机器唤醒其实还有一种方式。详情请看<a href=\"https://leancloud.cn/docs/leanengine_plan.html#hash633315134\">休眠策略</a>。</p>\n<blockquote>\n<ul>\n<li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li>\n<li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li>\n<li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 <strong>云引擎 &gt; 统计</strong> 中查看。</li>\n</ul>\n</blockquote>\n<p>那么我们只要每三十分钟之内在外部访问一次不就可以解决了么？</p>\n<p>于是我查看了一下<code>valine-admin</code>的唤醒源代码，自唤醒云函数也是这样实现的。于是便继续开始白嫖。<img src=\"https://cdn.jsdelivr.net/gh/blogimg/emotion/aru/40.png\" alt=\"阿鲁小表情-小康博客\" /></p>\n<h2 id=\"思路脑图\"><a class=\"markdownIt-Anchor\" href=\"#思路脑图\"></a> 思路脑图</h2>\n<p>以下所有方案均遵循这里的脑图思路。如果小白博客请看懂思路后在尝试。<mark>不要无脑复制！不要无脑复制！不要无脑复制！</mark></p>\n<p>思路：通过某种（下边的任意一种）方式，从外部 get 你的<strong>评论后台地址</strong>。</p>\n<div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div><div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div><div class='tip error'><p>不是get你的博客地址。一定是评论后台地址！所有的方式都是评论后台地址，所有的方式都与博客地址没有半毛钱关系！<p></div>\n<h2 id=\"开始尝试\"><a class=\"markdownIt-Anchor\" href=\"#开始尝试\"></a> 开始尝试</h2>\n<p>这里我使用的是 GitHub+Actions。是不是很熟悉，自动部署也是这个方案呢。</p>\n<ol>\n<li>\n<p>鼠标放在右上角，选择 setting</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>点击<code>Developer settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>选择<code>Personal access tokens</code>，添加一个新的 TOKEN。</p>\n<p>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</p>\n<p>设置名字为<code>GITHUB_TOKEN</code> , 然后勾选 repo , admin:repo_hook , workflow 等选项，最后点击 Generate token 即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png\" alt=\"image-20200515211343057\" /></p>\n<p><strong>名字请务必使用</strong><code>GITHUB_TOKEN</code>。</p>\n</li>\n<li>\n<p>接下来 FORK 项目。</p>\n<p>地址：<a href=\"https://github.com/blogimg/WakeLeanCloud\">https://github.com/blogimg/WakeLeanCloud</a></p>\n<p>如果觉得好用可以点个赞哦！</p>\n</li>\n<li>\n<p>成功 FORK 后，进入项目的设置。添加你的 leancloud 的后台地址（也就是评论管理的后台地址）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/d15b1fffb681f0dd3b9264ea878bf055.png\" alt=\"\" /></p>\n<p>选择 Secrets，添加你的<strong>评论后台地址</strong>，<mark>一定是 Leancloud 的后台地址（环境变量 ADMIN_URL），而不是你的博客地址。</mark></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/6c2cd1845116e3d4e4147157d334be19.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/caed66e8408e5a0c91fe446951180f8d.png\" alt=\"\" /></p>\n<div class='tip warning'><p>SITE的网址应填你的评论管理后台地址，而不是博客地址。<p></div>\n<p><strong>其中 Name 的名字必须为<code>SITE</code>，Value 可以是多个后台地址（注意请求头也要写），用英文逗号分隔。不要中中文逗号，不要用中文逗号，不要用中文逗号</strong></p>\n<blockquote>\n<p>valine 后台地址（你的页面可能与我略有差异，但一定要出现一个类似的页面）：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/09/07496898cc28811fd036a516c5f3419e.png\" alt=\"image-20200609085422749\" /></p>\n</blockquote>\n</li>\n<li>\n<p>接下来对自己的项目点个 star 就能启动了，启动后请切换到 actions，看看是否运行成功。</p>\n<ul>\n<li>\n<p>成功</p>\n<p>那么你就可以关掉了，默认是每天 8:00-24:00 时每 20 分钟运行一次。(GitHub 时间稍有延迟，大概时 2-5 分钟。)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/4736d5905066440617f4a63ecfc70cc1.png\" alt=\"成功示意图\" /></p>\n</li>\n<li>\n<p>失败</p>\n<p>如果你的 GitHub 从来没有用过 actions，那么需要先“了解”。方法很简单，点击绿色的按钮即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/25/91a79177e21e2a49d28be09cc676ad7a.png\" alt=\"image-20200525093352663\" /></p>\n<p>其他问题：请认真看本教程并且思考为什么这么做，你就能想到你是哪里出了问题。</p>\n</li>\n</ul>\n<blockquote>\n<p>自己点自己的项目是手动执行一次 actions。是为了测试才设计这个功能的哦！</p>\n<p>并不是不点星这个 actions 就不会运行。</p>\n</blockquote>\n</li>\n<li>\n<p>最后，如果觉得好用，请给我点个 star 哦！</p>\n</li>\n</ol>\n<h2 id=\"其他解决方案\"><a class=\"markdownIt-Anchor\" href=\"#其他解决方案\"></a> 其他解决方案</h2>\n<p>这里为<span class=\"inline-tag grey\">2020-05-18</span>之后补充的其他方案。</p>\n<h3 id=\"方案二\"><a class=\"markdownIt-Anchor\" href=\"#方案二\"></a> 方案二</h3>\n<p>利用国内的云函数，自己写一个脚本。然后定时监控即可。</p>\n<p>或者宝塔、自己服务器的定时任务都是可以的。</p>\n<h3 id=\"方案三\"><a class=\"markdownIt-Anchor\" href=\"#方案三\"></a> 方案三</h3>\n<p><code>cloudflare</code>的<code>Workers</code>可以在线定义脚本，通过链接即可触发脚本。</p>\n<p>因此定义好自己的脚本后，通过监控即可触发来实现唤醒 LeanCloud</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRequest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;!doctype html>\n&lt;html>\n&lt;head>\n&lt;meta charset=\"utf-8\" />\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n&lt;title>唤醒你的LeanCloud&lt;/title>\n&lt;/head>\n&lt;body></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>body<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/body>\n&lt;/html></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> hour <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> minutes <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span>getMinutes<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 事件控制，因此事件采用utc时间，因此需要手动-8</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hour <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> hour <span class=\"token operator\">&lt;=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 列表里添加你的评论管理后台地址</span>\n    <span class=\"token keyword\">const</span> Urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://www.antmoe.com/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.tzki.cn/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Urls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>Urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">+=</span> Urls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"状态：\"</span> <span class=\"token operator\">+</span> html <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br />\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;br />\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">当前是休息时间哦！&lt;br /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>监控平台：<a href=\"https://uptimerobot.com/\">https://uptimerobot.com/</a> 监控地址就是 Workers 的地址。监控频率看你自己。</p>\n<p>另外网友<a href=\"https://crosschannel.cc/\">track13</a>评论到：其实只外部要唤醒一次就可以，之后都可以交给 leancloud 的定时任务。</p>\n<h3 id=\"方案四\"><a class=\"markdownIt-Anchor\" href=\"#方案四\"></a> 方案四</h3>\n<p>通过<code>cron-job</code>平台进行监控。注册地址：<a href=\"https://cron-job.org/en/signup/\">https://cron-job.org/en/signup/</a></p>\n<ol>\n<li>\n<p>注册</p>\n<p><strong>时区请选择<code>Asia/Shanghai</code>，否则请手动下边的操作请手动换算时间。另外关于最下边的谷歌验证如果出不来，请采用特殊方式。这里不过多介绍。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/980e07f7e4c82e8c1c1bf7d76e917270.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>登录账号</p>\n<p>首先去邮箱激活一下账号哦！<em>邮件可能在垃圾箱哦！</em></p>\n</li>\n<li>\n<p>添加任务</p>\n<p>登陆之后依次点击 <code>Members</code>,<code>cronjobs</code>,<code>Create cronjob</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/94f15877483ab13d9e07e673720b5eba.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/3a79c54ac105dea310e1dd7eceee9fd9.png\" alt=\"image-20200524163630403\" /></p>\n</li>\n<li>\n<p>各项配置的解释</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段</th>\n<th style=\"text-align:center\">简单解释</th>\n<th style=\"text-align:center\">补充说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Title</code></td>\n<td style=\"text-align:center\">任务名称</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Address</code></td>\n<td style=\"text-align:center\">监控地址</td>\n<td style=\"text-align:center\">Leancloud 的 <code>Web 主机域名</code>，也就是环境变量的<code>ADMIN_URL</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Schedule</code></td>\n<td style=\"text-align:center\">任务周期</td>\n<td style=\"text-align:center\">分别为每 X 分钟执行、每天 H:MM 执行、每月 DD 日 HH:MM 执行、自定义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Notifications</code></td>\n<td style=\"text-align:center\">提醒通知</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Save responses</code></td>\n<td style=\"text-align:center\">保存日志</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>配置示例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/05/24/c0a1b9cf1a254e624cb8adb0be2581e1.png\" alt=\"\" /></p>\n<p>关于自定义时间，你勾哪个就会在哪个时间段执行。例如五个框里你全选了，那么会每分钟都会执行。因此请各位博主自己想好需要在哪个时间段唤醒，而不是<mark>无脑复制</mark>。</p>\n<blockquote>\n<p>点下第一个，在按住<code>shift</code>点最后一个，会全选所有哦！另外<code>ctrl</code>可以多选</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h2>\n<ol>\n<li>\n<p>修改频率（时间）</p>\n<p>修改<code>.github/workflows/autoWakeup.yml</code>文件中的<code>cron</code>表达式即可。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/19/0b1cc831b7f0fb7779c11bb29288da98.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>后台地址会不会暴露</p>\n<p>不会的</p>\n</li>\n<li>\n<p>没有效果</p>\n<p>请确保你的第五步成功添加了网址，如果没有添加也会定时执行 actions 的动作而不会报错。可以在详情里查看是否监控的你的地址。正常情况下会如下图所以，多个网址会依次排列。如果没有填写网址则会默认访问作者的博客。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/a240386ca356e2b2a5534b4db40531ec.png\" alt=\"image-20200515211712029\" /></p>\n</li>\n<li>\n<p>每次都会 commit，太多了。</p>\n<p>其实可以每天只运行一次，然后其他时间还是依靠定时函数来完成。例如我将 actions 的时间修改为每天早上 8:00 运行一次。而其他时间通过定时函数唤醒。这样<strong>理论上</strong>也是没问题的。</p>\n<blockquote>\n<p>Actions 的时间是按 UTC 时间计算的，因此设置时请手动将时间换算成 UTC 时间哦！</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h2>\n<p>既然用上了 valine，那么我想再次安利下我魔改的 valine-admin 哦！</p>\n<p>项目地址：<a href=\"https://github.com/sviptzk/Valine-Admin-Server\">https://github.com/sviptzk/Valine-Admin-Server</a></p>\n<p>教程地址：<a href=\"https://www.antmoe.com/posts/2380732b/index.html\">https://www.antmoe.com/posts/2380732b/index.html</a></p>\n<p>相较于原版的优势如下:</p>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>微信提醒（基于方糖公众号）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>QQ提醒（基于QMSG）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>一套很漂亮的邮件模板（基于🎉梨花町の肾兄さん🎉的魔改）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>一个漂亮的后台页面（基于懒人大佬）</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>适配国际版的时区问题</p></div>\n<div class=\"checkbox green\"><input type=\"radio\" checked=\"checked\"><p>更多特性正在研发！</p></div>\n<script src=\"https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/js/WithoutLine.min.js\"></script>\n","categories":[{"name":"Hexo","path":"api/categories/Hexo.json"},{"name":"Valine评论","path":"api/categories/Valine评论.json"}],"tags":[{"name":"Hexo","path":"api/tags/Hexo.json"},{"name":"LeanCloud流控","path":"api/tags/LeanCloud流控.json"}]}