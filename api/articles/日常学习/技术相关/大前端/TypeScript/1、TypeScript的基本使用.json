{"title":"1、TypeScript的基本使用","slug":"日常学习/技术相关/大前端/TypeScript/1、TypeScript的基本使用","date":"2020-12-13T11:45:25.000Z","updated":"2022-02-21T07:18:57.061Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/TypeScript/1、TypeScript的基本使用.json","excerpt":null,"covers":["https://rmt.ladydaily.com/fetch/tzk/storage/20201213194621.png?w=1280&amp;fmt=jpg"],"content":"<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i typescript -g\ntsc -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201213194621.png?w=1280&amp;fmt=jpg\" alt=\"image-20201213194621306\" /></p>\n<h2 id=\"编译ts文件\"><a class=\"markdownIt-Anchor\" href=\"#编译ts文件\"></a> 编译ts文件</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tsc 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>即可编译ts文件。</p>\n<h2 id=\"一些有用的编译选项\"><a class=\"markdownIt-Anchor\" href=\"#一些有用的编译选项\"></a> 一些有用的编译选项</h2>\n<p>编译命令 <code>tsc</code> 还支持许多编译选项，这里我先来了解几个比较常用的</p>\n<h3 id=\"outdir\"><a class=\"markdownIt-Anchor\" href=\"#outdir\"></a> –outDir</h3>\n<p>指定编译文件输出目录</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"target\"><a class=\"markdownIt-Anchor\" href=\"#target\"></a> –target</h3>\n<p>指定编译的代码版本目标，默认为 <code>ES3</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist --target ES6 ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"watch\"><a class=\"markdownIt-Anchor\" href=\"#watch\"></a> –watch</h3>\n<p>在监听模式下运行，当文件发生改变的时候自动编译</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist --target ES6 --watch ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过上面几个例子，我们基本可以了解 tsc 的使用了，但是大家应该也发现了，如果每次编译都输入这么一大堆的选项其实是很繁琐的，好在<code>TypeScript</code> 编译为我们提供了一个更加强大且方便的方式，编译配置文件：<code>tsconfig.json</code>，我们可以把上面的编译选项保存到这个配置文件中</p>\n<h2 id=\"编译配置文件\"><a class=\"markdownIt-Anchor\" href=\"#编译配置文件\"></a> 编译配置文件</h2>\n<p>我们可以把编译的一些选项保存在一个指定的 <code>json</code> 文件中，默认情况下 <code>tsc</code> 命令运行的时候会自动去加载运行命令所在的目录下的 <code>tsconfig.json</code> 文件，配置文件格式如下</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ** : 所有目录（包括子目录）</span>\n  <span class=\"token comment\">// * : 所有文件，也可以指定类型 *.ts</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有了单独的配置文件，我们就可以直接运行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"指定加载的配置文件\"><a class=\"markdownIt-Anchor\" href=\"#指定加载的配置文件\"></a> 指定加载的配置文件</h3>\n<p>使用 <code>--project</code> 或 <code>-p</code> 指定配置文件目录，会默认加载该目录下的 <code>tsconfig.json</code> 文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc -p ./configs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以指定某个具体的配置文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc -p ./configs/ts.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","more":"<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i typescript -g\ntsc -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201213194621.png?w=1280&amp;fmt=jpg\" alt=\"image-20201213194621306\" /></p>\n<h2 id=\"编译ts文件\"><a class=\"markdownIt-Anchor\" href=\"#编译ts文件\"></a> 编译ts文件</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tsc 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>即可编译ts文件。</p>\n<h2 id=\"一些有用的编译选项\"><a class=\"markdownIt-Anchor\" href=\"#一些有用的编译选项\"></a> 一些有用的编译选项</h2>\n<p>编译命令 <code>tsc</code> 还支持许多编译选项，这里我先来了解几个比较常用的</p>\n<h3 id=\"outdir\"><a class=\"markdownIt-Anchor\" href=\"#outdir\"></a> –outDir</h3>\n<p>指定编译文件输出目录</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"target\"><a class=\"markdownIt-Anchor\" href=\"#target\"></a> –target</h3>\n<p>指定编译的代码版本目标，默认为 <code>ES3</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist --target ES6 ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"watch\"><a class=\"markdownIt-Anchor\" href=\"#watch\"></a> –watch</h3>\n<p>在监听模式下运行，当文件发生改变的时候自动编译</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc --outDir ./dist --target ES6 --watch ./src/hello.ts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>通过上面几个例子，我们基本可以了解 tsc 的使用了，但是大家应该也发现了，如果每次编译都输入这么一大堆的选项其实是很繁琐的，好在<code>TypeScript</code> 编译为我们提供了一个更加强大且方便的方式，编译配置文件：<code>tsconfig.json</code>，我们可以把上面的编译选项保存到这个配置文件中</p>\n<h2 id=\"编译配置文件\"><a class=\"markdownIt-Anchor\" href=\"#编译配置文件\"></a> 编译配置文件</h2>\n<p>我们可以把编译的一些选项保存在一个指定的 <code>json</code> 文件中，默认情况下 <code>tsc</code> 命令运行的时候会自动去加载运行命令所在的目录下的 <code>tsconfig.json</code> 文件，配置文件格式如下</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ** : 所有目录（包括子目录）</span>\n  <span class=\"token comment\">// * : 所有文件，也可以指定类型 *.ts</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有了单独的配置文件，我们就可以直接运行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"指定加载的配置文件\"><a class=\"markdownIt-Anchor\" href=\"#指定加载的配置文件\"></a> 指定加载的配置文件</h3>\n<p>使用 <code>--project</code> 或 <code>-p</code> 指定配置文件目录，会默认加载该目录下的 <code>tsconfig.json</code> 文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc -p ./configs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以指定某个具体的配置文件</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">tsc -p ./configs/ts.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"TypeScript","path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","path":"api/tags/TypeScript.json"}]}