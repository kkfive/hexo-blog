{"title":"三、Docker通信与数据卷","slug":"日常学习/部署与构建/Docker/3. Docker容器间通信","date":"2021-02-27T14:52:00.000Z","updated":"2021-02-27T14:52:00.000Z","comments":true,"path":"api/articles/日常学习/部署与构建/Docker/3. Docker容器间通信.json","excerpt":null,"covers":["https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png"],"content":"<h2 id=\"docker网络配置\"><a class=\"markdownIt-Anchor\" href=\"#docker网络配置\"></a> docker网络配置</h2>\n<p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>\n<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href=\"https://tools.ietf.org/html/rfc1918\">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>\n<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png\" alt=\"image-20201125105847896\" /></p>\n<h2 id=\"相关命令\"><a class=\"markdownIt-Anchor\" href=\"#相关命令\"></a> 相关命令</h2>\n<ol>\n<li>\n<p>查看默认网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network create name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network <span class=\"token function\">rm</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除没有使用的网桥</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker network prune<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"数据卷\"><a class=\"markdownIt-Anchor\" href=\"#数据卷\"></a> 数据卷</h2>\n<p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li><code>数据卷</code> 可以在容器之间共享和重用</li>\n<li>对 <code>数据卷</code> 的修改会立马生效</li>\n<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>\n<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>\n</ul>\n<blockquote>\n<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>\n</blockquote>\n<h2 id=\"相关命令-2\"><a class=\"markdownIt-Anchor\" href=\"#相关命令-2\"></a> 相关命令</h2>\n<ol>\n<li>\n<p>创建数据卷</p>\n<p><code>docker volume create my-vol</code></p>\n</li>\n<li>\n<p>查看数据卷</p>\n<p><code>docker volume inspect my-vol</code></p>\n</li>\n<li>\n<p>挂在数据卷</p>\n<p><code>docker run -d -P --name web -v my-vol:/usr/share/nginx/html nginx</code></p>\n</li>\n<li>\n<p>删除数据卷</p>\n<p><code>docker volume rm my-vol</code></p>\n</li>\n</ol>\n","more":"<h2 id=\"docker网络配置\"><a class=\"markdownIt-Anchor\" href=\"#docker网络配置\"></a> docker网络配置</h2>\n<p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>\n<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href=\"https://tools.ietf.org/html/rfc1918\">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>\n<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png\" alt=\"image-20201125105847896\" /></p>\n<h2 id=\"相关命令\"><a class=\"markdownIt-Anchor\" href=\"#相关命令\"></a> 相关命令</h2>\n<ol>\n<li>\n<p>查看默认网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network <span class=\"token function\">ls</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>创建网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network create name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除网桥</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network <span class=\"token function\">rm</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>删除没有使用的网桥</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker network prune<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"数据卷\"><a class=\"markdownIt-Anchor\" href=\"#数据卷\"></a> 数据卷</h2>\n<p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li><code>数据卷</code> 可以在容器之间共享和重用</li>\n<li>对 <code>数据卷</code> 的修改会立马生效</li>\n<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>\n<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>\n</ul>\n<blockquote>\n<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>\n</blockquote>\n<h2 id=\"相关命令-2\"><a class=\"markdownIt-Anchor\" href=\"#相关命令-2\"></a> 相关命令</h2>\n<ol>\n<li>\n<p>创建数据卷</p>\n<p><code>docker volume create my-vol</code></p>\n</li>\n<li>\n<p>查看数据卷</p>\n<p><code>docker volume inspect my-vol</code></p>\n</li>\n<li>\n<p>挂在数据卷</p>\n<p><code>docker run -d -P --name web -v my-vol:/usr/share/nginx/html nginx</code></p>\n</li>\n<li>\n<p>删除数据卷</p>\n<p><code>docker volume rm my-vol</code></p>\n</li>\n</ol>\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}