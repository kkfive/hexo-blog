{"title":"初识vue3之响应式数据","slug":"日常学习/技术相关/Vue/Vue3新特性/初识vue3之响应式数据","date":"2021-12-09T13:14:25.000Z","updated":"2022-02-21T07:18:57.053Z","comments":true,"path":"api/articles/日常学习/技术相关/Vue/Vue3新特性/初识vue3之响应式数据.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" href=\"//at.alicdn.com/t/font_2970550_p76lkpuldlo.css\">\n<h2 id=\"关于此分类\"><a class=\"markdownIt-Anchor\" href=\"#关于此分类\"></a> 关于此分类</h2>\n<p>关于<a href=\"/categories/Vue/%E5%88%9D%E8%AF%86Vue3/\">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p>\n<blockquote>\n<p>此文主要记录关于 vue3 响应式数据的尝试。</p>\n</blockquote>\n<p><strong><a href=\"/posts/b3e1c29f/\">本文</a>会随着<a href=\"https://xiaokang.me/\">作者</a>日常使用进行补充及内容修正</strong></p>\n<h2 id=\"refs\"><a class=\"markdownIt-Anchor\" href=\"#refs\"></a> refs</h2>\n<h3 id=\"类型声明\"><a class=\"markdownIt-Anchor\" href=\"#类型声明\"></a> 类型声明</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 声明类型 字符串</span>\n    <span class=\"token keyword\">const</span> stringVal <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 声明类型 数字</span>\n    <span class=\"token keyword\">const</span> numberVal <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 声明类型 泛型</span>\n    <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initial<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>initial<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Ref<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token comment\">// state.value -> State extends string</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> stringVal<span class=\"token punctuation\">,</span> numberVal<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unref\"><a class=\"markdownIt-Anchor\" href=\"#unref\"></a> unref</h3>\n<p>如果参数是一个 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>，则返回内部值，否则返回参数本身。这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数。</p>\n<h3 id=\"toref-torefs\"><a class=\"markdownIt-Anchor\" href=\"#toref-torefs\"></a> toRef、toRefs</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">作用简述</th>\n<th style=\"text-align:center\">使用简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toRef</code></td>\n<td style=\"text-align:center\">用于创建源响应式对象上某个属性的响应式变量<br />此变量可以被传递并保持响应式链接</td>\n<td style=\"text-align:center\">用于将响应式对象某个属性传递给子组件并且不丢失响应式链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toRefs</code></td>\n<td style=\"text-align:center\">将响应式对象转换为普通对象（值是响应式的）</td>\n<td style=\"text-align:center\">用于复合函数返回响应式对象，父组件解构/展开</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"toref\"><a class=\"markdownIt-Anchor\" href=\"#toref\"></a> toRef</h4>\n<blockquote>\n<p>可以用来为源响应式对象上的某个 property 新创建一个 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// toRef</span>\n<span class=\"token keyword\">const</span> refReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建ref引用</span>\n<span class=\"token keyword\">const</span> refA <span class=\"token operator\">=</span> <span class=\"token function\">toRef</span><span class=\"token punctuation\">(</span>refReactive<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// useTest中修改传入的参数</span>\n<span class=\"token comment\">// 会导致refReactive.a的值也会响应式修改为100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>useTest</code>中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> a <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此，当需要向复合函数传递一个响应式对象的值时可以使用<code>toRef</code>将一个响应式对象某个值转为<code>ref</code>引用。</p>\n<h4 id=\"torefs\"><a class=\"markdownIt-Anchor\" href=\"#torefs\"></a> toRefs</h4>\n<blockquote>\n<p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>。</p>\n</blockquote>\n<p><code>useTest</code>中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Ref<span class=\"token punctuation\">,</span> reactive<span class=\"token punctuation\">,</span> toRefs <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  b<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n  <span class=\"token keyword\">const</span> testReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n    website<span class=\"token operator\">:</span> <span class=\"token string\">'https://baidu.com'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 暴露的响应式对象使用toRefs包装</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> testReactive<span class=\"token operator\">:</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span>testReactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>父组件中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> testReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">,</span> numberVal<span class=\"token punctuation\">)</span> <span class=\"token comment\">// useTest中修改传入的参数</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  testReactive<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'父组件修改'</span>\n  <span class=\"token comment\">// testReactive.name会被响应式修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"customref\"><a class=\"markdownIt-Anchor\" href=\"#customref\"></a> customRef</h3>\n<p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p>\n<p>使用官网的一个小 Demo</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useDebouncedRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timeout\n  <span class=\"token keyword\">return</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 追踪</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> value\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          value <span class=\"token operator\">=</span> newValue\n          <span class=\"token comment\">// 触发视图更新</span>\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">useDebouncedRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>虽然看到网上有各种各样在此函数中发送 Ajax 请求，但我个人认为，发送 Ajax 获取数据使用 Hooks 更合适。</p>\n</blockquote>\n<p>类型声明</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">customRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>factory<span class=\"token operator\">:</span> CustomRefFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CustomRefFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">track</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">trigger</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"computed-与-watch\"><a class=\"markdownIt-Anchor\" href=\"#computed-与-watch\"></a> Computed 与 Watch</h2>\n<h3 id=\"computed\"><a class=\"markdownIt-Anchor\" href=\"#computed\"></a> computed</h3>\n<p>接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\">ref</a> 对象。或者，接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> newVal <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 返回val加10的结果</span>\n  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> newVal1 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取值</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 设置值</span>\n    val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>3.2 中该函数在<strong>开发模式</strong>下可传入第二个参数用于调试。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> plusOne <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">onTrack</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当 count.value 作为依赖被追踪时触发</span>\n    <span class=\"token keyword\">debugger</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当 count.value 被修改时触发</span>\n    <span class=\"token keyword\">debugger</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 访问 plusOne，应该触发 onTrack</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>plusOne<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 修改 count.value，应该触发 onTrigger</span>\ncount<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型声明</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 只读的</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  debuggerOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DebuggerOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span>Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>>></span>\n\n<span class=\"token comment\">// 可写的</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  debuggerOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DebuggerOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DebuggerOptions</span> <span class=\"token punctuation\">&#123;</span>\n  onTrack<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> DebuggerEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  onTrigger<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> DebuggerEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DebuggerEvent</span> <span class=\"token punctuation\">&#123;</span>\n  effect<span class=\"token operator\">:</span> ReactiveEffect\n  target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> OperationTypes\n  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"watch\"><a class=\"markdownIt-Anchor\" href=\"#watch\"></a> watch</h3>\n<p><code>watch</code> API 与选项式 API <a href=\"https://v3.cn.vuejs.org/api/instance-methods.html#watch\">this.$watch</a> (以及相应的 <a href=\"https://v3.cn.vuejs.org/api/options-data.html#watch\">watch</a> 选项) 完全等效。<code>watch</code> 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。</p>\n<div class=\"tabs\" id=\"watch\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#watch-1\">单一源</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#watch-2\">多个源</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#watch-3\">侦听响应式对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"watch-1\"><p>侦听器数据源可以是一个具有返回值的<code>getter</code>函数，也可以直接是一个<code>ref</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 侦听一个 getter</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> prevCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 直接侦听一个 ref</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> prevCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"watch-2\"><p>侦听器还可以使用数组以同时侦听多个源</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>如果在同一个函数里同时改变这些被侦听的来源，侦听器仍只会执行一次</strong></p>\n</blockquote>\n<p>如果需要监听多个源时每一次更新都响应式变化，那么建议使用<code>nextTick</code>等等监听器再一次步改变之前运行。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeValues</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  firstName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span> <span class=\"token comment\">// 打印 [\"John\", \"\"] [\"\", \"\"]</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Smith'</span> <span class=\"token comment\">// 打印 [\"John\", \"Smith\"] [\"John\", \"\"]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"watch-3\"><ol>\n<li>\n<p>监听响应式对象或数组变化前与变化后的值，则需要监听由值构成的副本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">,</span> <span class=\"token string\">'numbers'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// logs: [1,2,3,4,5] [1,2,3,4]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>尝试检查深度嵌套对象或数组中(<strong>非响应式对象</strong>)的 property 变化时，仍然需要 <code>deep</code> 选项设置为 true。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  attr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> member<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> member<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\nmember<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'new小康'</span> <span class=\"token comment\">// deep new小康 new小康</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>侦听一个响应式对象或数组将始终返回该对象的当前值和上一个状态值的引用。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  attr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\nmember<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'new小康'</span> <span class=\"token comment\">// deep new小康 小康</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"watcheffect\"><a class=\"markdownIt-Anchor\" href=\"#watcheffect\"></a> watchEffect</h3>\n<p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。(根据响应式状态<em>自动应用</em>和<em>重新应用</em>副作用)</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> logs 0</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span>\n  <span class=\"token comment\">// -> logs 1</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"provide-inject\"><a class=\"markdownIt-Anchor\" href=\"#provide-inject\"></a> Provide / Inject</h2>\n<p>当子组件层级过深时仍需要外层组件传递数据，那么可以使用<code>Provide / Inject</code>，但默认情况下，此 API 并不是响应式的，如果需要响应式则需要在<code>provide</code>时使用<code>ref</code>或者<code>reactive</code>进行包装。</p>\n<p>父组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> provide <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  userName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'XiaoKang'</span>\n  <span class=\"token comment\">// 2秒后视图更新为 XiaoKang</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 向子组件提供一个名为 name 值为 userName 数据</span>\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject<span class=\"token punctuation\">,</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// 获取父组件提供的名为 name 的值并赋值给userName变量</span>\n<span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改值\"><a class=\"markdownIt-Anchor\" href=\"#修改值\"></a> 修改值</h3>\n<p>当使用响应式 provide / inject 值时，<strong>建议尽可能将对响应式 property 的所有修改限制在<em>定义 provide 的组件</em>内部</strong>。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  userName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'change Name 小康 '</span> <span class=\"token operator\">+</span> str\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 向子组件提供修改userName的方法</span>\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeName'</span><span class=\"token punctuation\">,</span> changeName<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 获取父组件提供的名为 name 的值并赋值给userName变量</span>\n<span class=\"token keyword\">const</span> changeUserName <span class=\"token operator\">=</span> inject<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeName'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeUserNameHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  changeUserName <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">changeUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件当触发<code>changeUserNameHandler</code>函数时即可调用父组件提供的修改方法将<code>userName</code>的值进行修改。</p>\n<h3 id=\"只读\"><a class=\"markdownIt-Anchor\" href=\"#只读\"></a> 只读</h3>\n<p>当需要确保通过<code>provide</code>传递的数据不会被<code>inject</code>的组件更改，可以使用<code>readonly</code>进行修饰。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testChange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">(</span>testChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时如果子组件修改值则不会修改成功。</p>\n","more":"<link rel=\"stylesheet\" href=\"//at.alicdn.com/t/font_2970550_p76lkpuldlo.css\">\n<h2 id=\"关于此分类\"><a class=\"markdownIt-Anchor\" href=\"#关于此分类\"></a> 关于此分类</h2>\n<p>关于<a href=\"/categories/Vue/%E5%88%9D%E8%AF%86Vue3/\">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p>\n<blockquote>\n<p>此文主要记录关于 vue3 响应式数据的尝试。</p>\n</blockquote>\n<p><strong><a href=\"/posts/b3e1c29f/\">本文</a>会随着<a href=\"https://xiaokang.me/\">作者</a>日常使用进行补充及内容修正</strong></p>\n<h2 id=\"refs\"><a class=\"markdownIt-Anchor\" href=\"#refs\"></a> refs</h2>\n<h3 id=\"类型声明\"><a class=\"markdownIt-Anchor\" href=\"#类型声明\"></a> 类型声明</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 声明类型 字符串</span>\n    <span class=\"token keyword\">const</span> stringVal <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 声明类型 数字</span>\n    <span class=\"token keyword\">const</span> numberVal <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 声明类型 泛型</span>\n    <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>initial<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>initial<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Ref<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token comment\">// state.value -> State extends string</span>\n      <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> stringVal<span class=\"token punctuation\">,</span> numberVal<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"unref\"><a class=\"markdownIt-Anchor\" href=\"#unref\"></a> unref</h3>\n<p>如果参数是一个 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>，则返回内部值，否则返回参数本身。这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数。</p>\n<h3 id=\"toref-torefs\"><a class=\"markdownIt-Anchor\" href=\"#toref-torefs\"></a> toRef、toRefs</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">作用简述</th>\n<th style=\"text-align:center\">使用简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>toRef</code></td>\n<td style=\"text-align:center\">用于创建源响应式对象上某个属性的响应式变量<br />此变量可以被传递并保持响应式链接</td>\n<td style=\"text-align:center\">用于将响应式对象某个属性传递给子组件并且不丢失响应式链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>toRefs</code></td>\n<td style=\"text-align:center\">将响应式对象转换为普通对象（值是响应式的）</td>\n<td style=\"text-align:center\">用于复合函数返回响应式对象，父组件解构/展开</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"toref\"><a class=\"markdownIt-Anchor\" href=\"#toref\"></a> toRef</h4>\n<blockquote>\n<p>可以用来为源响应式对象上的某个 property 新创建一个 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// toRef</span>\n<span class=\"token keyword\">const</span> refReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 创建ref引用</span>\n<span class=\"token keyword\">const</span> refA <span class=\"token operator\">=</span> <span class=\"token function\">toRef</span><span class=\"token punctuation\">(</span>refReactive<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">)</span> <span class=\"token comment\">// useTest中修改传入的参数</span>\n<span class=\"token comment\">// 会导致refReactive.a的值也会响应式修改为100</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>useTest</code>中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> a <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>因此，当需要向复合函数传递一个响应式对象的值时可以使用<code>toRef</code>将一个响应式对象某个值转为<code>ref</code>引用。</p>\n<h4 id=\"torefs\"><a class=\"markdownIt-Anchor\" href=\"#torefs\"></a> toRefs</h4>\n<blockquote>\n<p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\"><code>ref</code></a>。</p>\n</blockquote>\n<p><code>useTest</code>中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Ref<span class=\"token punctuation\">,</span> reactive<span class=\"token punctuation\">,</span> toRefs <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  b<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n  <span class=\"token keyword\">const</span> testReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n    website<span class=\"token operator\">:</span> <span class=\"token string\">'https://baidu.com'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 暴露的响应式对象使用toRefs包装</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> testReactive<span class=\"token operator\">:</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span>testReactive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>父组件中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> testReactive <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useTest</span><span class=\"token punctuation\">(</span>refA<span class=\"token punctuation\">,</span> numberVal<span class=\"token punctuation\">)</span> <span class=\"token comment\">// useTest中修改传入的参数</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  testReactive<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'父组件修改'</span>\n  <span class=\"token comment\">// testReactive.name会被响应式修改</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"customref\"><a class=\"markdownIt-Anchor\" href=\"#customref\"></a> customRef</h3>\n<p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p>\n<p>使用官网的一个小 Demo</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useDebouncedRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timeout\n  <span class=\"token keyword\">return</span> <span class=\"token function\">customRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 追踪</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> value\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n        timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          value <span class=\"token operator\">=</span> newValue\n          <span class=\"token comment\">// 触发视图更新</span>\n          <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">useDebouncedRef</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>虽然看到网上有各种各样在此函数中发送 Ajax 请求，但我个人认为，发送 Ajax 获取数据使用 Hooks 更合适。</p>\n</blockquote>\n<p>类型声明</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">customRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>factory<span class=\"token operator\">:</span> CustomRefFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">CustomRefFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">track</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">trigger</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"computed-与-watch\"><a class=\"markdownIt-Anchor\" href=\"#computed-与-watch\"></a> Computed 与 Watch</h2>\n<h3 id=\"computed\"><a class=\"markdownIt-Anchor\" href=\"#computed\"></a> computed</h3>\n<p>接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 <a href=\"https://v3.cn.vuejs.org/api/refs-api.html#ref\">ref</a> 对象。或者，接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> newVal <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 返回val加10的结果</span>\n  <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> newVal1 <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取值</span>\n    <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 设置值</span>\n    val<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>3.2 中该函数在<strong>开发模式</strong>下可传入第二个参数用于调试。</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> plusOne <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">onTrack</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当 count.value 作为依赖被追踪时触发</span>\n    <span class=\"token keyword\">debugger</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">onTrigger</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当 count.value 被修改时触发</span>\n    <span class=\"token keyword\">debugger</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 访问 plusOne，应该触发 onTrack</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>plusOne<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 修改 count.value，应该触发 onTrigger</span>\ncount<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型声明</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 只读的</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">getter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  debuggerOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DebuggerOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&lt;</span>Ref<span class=\"token operator\">&lt;</span>Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>>></span>\n\n<span class=\"token comment\">// 可写的</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">computed</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  debuggerOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DebuggerOptions\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DebuggerOptions</span> <span class=\"token punctuation\">&#123;</span>\n  onTrack<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> DebuggerEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  onTrigger<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> DebuggerEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DebuggerEvent</span> <span class=\"token punctuation\">&#123;</span>\n  effect<span class=\"token operator\">:</span> ReactiveEffect\n  target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> OperationTypes\n  key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"watch\"><a class=\"markdownIt-Anchor\" href=\"#watch\"></a> watch</h3>\n<p><code>watch</code> API 与选项式 API <a href=\"https://v3.cn.vuejs.org/api/instance-methods.html#watch\">this.$watch</a> (以及相应的 <a href=\"https://v3.cn.vuejs.org/api/options-data.html#watch\">watch</a> 选项) 完全等效。<code>watch</code> 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。</p>\n<div class=\"tabs\" id=\"watch\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#watch-1\">单一源</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#watch-2\">多个源</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#watch-3\">侦听响应式对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"watch-1\"><p>侦听器数据源可以是一个具有返回值的<code>getter</code>函数，也可以直接是一个<code>ref</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 侦听一个 getter</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> prevCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 直接侦听一个 ref</span>\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> prevCount<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"watch-2\"><p>侦听器还可以使用数组以同时侦听多个源</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>如果在同一个函数里同时改变这些被侦听的来源，侦听器仍只会执行一次</strong></p>\n</blockquote>\n<p>如果需要监听多个源时每一次更新都响应式变化，那么建议使用<code>nextTick</code>等等监听器再一次步改变之前运行。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeValues</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  firstName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span> <span class=\"token comment\">// 打印 [\"John\", \"\"] [\"\", \"\"]</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  lastName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Smith'</span> <span class=\"token comment\">// 打印 [\"John\", \"Smith\"] [\"John\", \"\"]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"watch-3\"><ol>\n<li>\n<p>监听响应式对象或数组变化前与变化后的值，则需要监听由值构成的副本。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">,</span> <span class=\"token string\">'numbers'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// logs: [1,2,3,4,5] [1,2,3,4]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>尝试检查深度嵌套对象或数组中(<strong>非响应式对象</strong>)的 property 变化时，仍然需要 <code>deep</code> 选项设置为 true。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  attr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> member<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> member<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\nmember<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'new小康'</span> <span class=\"token comment\">// deep new小康 new小康</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>侦听一个响应式对象或数组将始终返回该对象的当前值和上一个状态值的引用。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span>\n\n<span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  attr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'not deep'</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>\n\nmember<span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'new小康'</span> <span class=\"token comment\">// deep new小康 小康</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n<h3 id=\"watcheffect\"><a class=\"markdownIt-Anchor\" href=\"#watcheffect\"></a> watchEffect</h3>\n<p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。(根据响应式状态<em>自动应用</em>和<em>重新应用</em>副作用)</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -> logs 0</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span>\n  <span class=\"token comment\">// -> logs 1</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"provide-inject\"><a class=\"markdownIt-Anchor\" href=\"#provide-inject\"></a> Provide / Inject</h2>\n<p>当子组件层级过深时仍需要外层组件传递数据，那么可以使用<code>Provide / Inject</code>，但默认情况下，此 API 并不是响应式的，如果需要响应式则需要在<code>provide</code>时使用<code>ref</code>或者<code>reactive</code>进行包装。</p>\n<p>父组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> provide <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  userName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'XiaoKang'</span>\n  <span class=\"token comment\">// 2秒后视图更新为 XiaoKang</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 向子组件提供一个名为 name 值为 userName 数据</span>\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> userName<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject<span class=\"token punctuation\">,</span> Ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n\n<span class=\"token comment\">// 获取父组件提供的名为 name 的值并赋值给userName变量</span>\n<span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改值\"><a class=\"markdownIt-Anchor\" href=\"#修改值\"></a> 修改值</h3>\n<p>当使用响应式 provide / inject 值时，<strong>建议尽可能将对响应式 property 的所有修改限制在<em>定义 provide 的组件</em>内部</strong>。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  userName<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'change Name 小康 '</span> <span class=\"token operator\">+</span> str\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 向子组件提供修改userName的方法</span>\n<span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeName'</span><span class=\"token punctuation\">,</span> changeName<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件中</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 获取父组件提供的名为 name 的值并赋值给userName变量</span>\n<span class=\"token keyword\">const</span> changeUserName <span class=\"token operator\">=</span> inject<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeName'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeUserNameHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  changeUserName <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">changeUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子组件当触发<code>changeUserNameHandler</code>函数时即可调用父组件提供的修改方法将<code>userName</code>的值进行修改。</p>\n<h3 id=\"只读\"><a class=\"markdownIt-Anchor\" href=\"#只读\"></a> 只读</h3>\n<p>当需要确保通过<code>provide</code>传递的数据不会被<code>inject</code>的组件更改，可以使用<code>readonly</code>进行修饰。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testChange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">readonly</span><span class=\"token punctuation\">(</span>testChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时如果子组件修改值则不会修改成功。</p>\n","categories":[{"name":"Vue","path":"api/categories/Vue.json"},{"name":"初识Vue3","path":"api/categories/初识Vue3.json"}],"tags":[{"name":"Vue3","path":"api/tags/Vue3.json"}]}