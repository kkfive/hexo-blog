{"title":"3、TypeScript的接口与高级类型","slug":"日常学习/技术相关/大前端/TypeScript/3、TypeScript的接口与高级类型","date":"2020-12-14T02:41:25.000Z","updated":"2022-02-21T05:08:50.410Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/TypeScript/3、TypeScript的接口与高级类型.json","excerpt":null,"covers":null,"content":"<h2 id=\"接口定义\"><a class=\"markdownIt-Anchor\" href=\"#接口定义\"></a> 接口定义</h2>\n<p><u>接口</u>：对复杂的对象类型进行标注的一种方式，或者给其它代码定义一种契约（比如：类）</p>\n<p>接口的基础语法定义结构特别简单</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码定义了一个类型，该类型包含两个属性，一个 <u>number</u> 类型的 <u>x</u> 和一个 <u>number</u> 类型的 <u>y</u>，接口中多个属性之间可以使用 <u>逗号</u> 或者 <u>分号</u> 进行分隔</p>\n<p>我们可以通过这个接口来给一个数据进行类型标注</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><span style=\"color:red\">注意：接口是一种 <u>类型</u> ，不能作为 <u>值</u> 使用</span></p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"可选属性\"><a class=\"markdownIt-Anchor\" href=\"#可选属性\"></a> 可选属性</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token comment\">// 加问好表示类型是可选的</span>\n  color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"只读属性\"><a class=\"markdownIt-Anchor\" href=\"#只读属性\"></a> 只读属性</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token comment\">// 只读属性使用 readonly 修饰</span>\n  <span class=\"token keyword\">readonly</span> info<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  info<span class=\"token operator\">:</span> <span class=\"token string\">'这是一个只读属性，不能被修改'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"任意属性\"><a class=\"markdownIt-Anchor\" href=\"#任意属性\"></a> 任意属性</h2>\n<p>有的时候，我们希望给一个接口添加任意属性，可以通过索引类型来实现</p>\n<p><strong>数字类型索引</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>字符串类型索引</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数字索引是字符串索引的子类型</p>\n<blockquote>\n<p>注意：索引签名参数类型必须为 <u>string</u> 或 <u>number</u> 之一，但两者可同时出现</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：当同时存在数字类型索引和字符串类型索引的时候，数字类型的值类型必须是字符串类型的值类型或子类型</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 错误</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 正确</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用接口描述函数\"><a class=\"markdownIt-Anchor\" href=\"#使用接口描述函数\"></a> 使用接口描述函数</h2>\n<p>我们还可以使用接口来描述一个函数</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFunc</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> fn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意，如果使用接口来单独描述一个函数，是没 <code>key</code> 的</p>\n</blockquote>\n<h2 id=\"接口合并\"><a class=\"markdownIt-Anchor\" href=\"#接口合并\"></a> 接口合并</h2>\n<p>多个同名的接口合并成一个接口</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n    height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> box<span class=\"token operator\">:</span> Box <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>height<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>如果合并的接口存在同名的非函数成员，则必须保证他们类型一致，否则编译报错</li>\n<li>接口中的同名函数则是采用重载</li>\n</ul>\n<h2 id=\"联合类型\"><a class=\"markdownIt-Anchor\" href=\"#联合类型\"></a> 联合类型</h2>\n<p>联合类型也可以称为多选类型，当我们希望标注一个变量为多个类型之一时可以选择联合类型标注，<u>或</u> 的关系</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> attr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// document.querySelector 方法返回值就是一个联合类型</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ts 会提示有 null 的可能性，加上判断更严谨</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"交叉类型\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型\"></a> 交叉类型</h2>\n<p>交叉类型也可以称为合并类型，可以把多种类型合并到一起成为一种新的类型，<u>并且</u> 的关系</p>\n<p>对一个对象进行扩展：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">o1</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">o2</span> <span class=\"token punctuation\">&#123;</span>z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> o<span class=\"token operator\">:</span> o1 <span class=\"token operator\">&amp;</span> o2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>z<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>小技巧</strong></p>\n<blockquote>\n<p><code>TypeScript</code> 在编译过程中只会转换语法（比如扩展运算符，箭头函数等语法进行转换，对于 <code>API</code> 是不会进行转换的（也没必要转换，而是引入一些扩展库进行处理的），如果我们的代码中使用了 <code>target</code> 中没有的 <code>API</code> ，则需要手动进行引入，默认情况下 <code>TypeScript</code> 会根据 <code>target</code> 载入核心的类型库</p>\n<p><code>target</code> 为 <code>es5</code> 时: <code>[&quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;]</code></p>\n<p><code>target</code> 为 <code>es6</code> 时: <code>[&quot;dom&quot;, &quot;es6&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot;]</code></p>\n<p>如果代码中使用了这些默认载入库以外的代码，则可以通过 <code>lib</code> 选项来进行设置</p>\n<p><a href=\"http://www.typescriptlang.org/docs/handbook/compiler-options.html\">http://www.typescriptlang.org/docs/handbook/compiler-options.html</a></p>\n</blockquote>\n<h2 id=\"字面量类型\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型\"></a> 字面量类型</h2>\n<p>有的时候，我们希望标注的不是某个类型，而是一个固定值，就可以使用字面量类型，配合联合类型会更有用</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> direction<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ok</span>\nbox <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// error</span>\nbox <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型别名\"><a class=\"markdownIt-Anchor\" href=\"#类型别名\"></a> 类型别名</h2>\n<p>有的时候类型标注比较复杂，这个时候我们可以类型标注起一个相对简单的名字</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">dir</span> <span class=\"token operator\">=</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> direction<span class=\"token operator\">:</span> dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用类型别名定义函数类型\"><a class=\"markdownIt-Anchor\" href=\"#使用类型别名定义函数类型\"></a> 使用类型别名定义函数类型</h3>\n<p>这里需要注意一下，如果使用 <code>type</code> 来定义函数类型，和接口有点不太相同</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者直接</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"interface-与-type-的区别\"><a class=\"markdownIt-Anchor\" href=\"#interface-与-type-的区别\"></a> interface 与 type 的区别</h3>\n<p><strong>interface</strong></p>\n<ul>\n<li>只能描述 <code>object</code>/<code>class</code>/<code>function</code> 的类型</li>\n<li>同名 <code>interface</code> 自动合并，利于扩展</li>\n</ul>\n<p><strong>type</strong></p>\n<ul>\n<li>不能重名</li>\n<li>能描述所有数据</li>\n</ul>\n<h2 id=\"类型推导\"><a class=\"markdownIt-Anchor\" href=\"#类型推导\"></a> 类型推导</h2>\n<p>每次都显式标注类型会比较麻烦，<u>TypeScript</u> 提供了一种更加方便的特性：类型推导。<u>TypeScript</u> 编译器会根据当前上下文自动的推导出对应的类型标注，这个过程发生在：</p>\n<ul>\n<li>初始化变量</li>\n<li>设置函数默认参数值</li>\n<li>返回函数值</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 自动推断 x 为 number</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 不能将类型“\"a\"”分配给类型“number”</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数参数类型、函数返回值会根据对应的默认值和返回值进行自动推断</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\"></a> 类型断言</h2>\n<p>有的时候，我们可能标注一个更加精确的类型（缩小类型标注范围），比如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们可以看到 <u>img</u> 的类型为 <u>Element</u>，而 <u>Element</u> 类型其实只是元素类型的通用类型，如果我们去访问 <u>src</u> 这个属性是有问题的，我们需要把它的类型标注得更为精确：<u>HTMLImageElement</u> 类型，这个时候，我们就可以使用类型断言，它类似于一种 类型转换：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>HTMLImageElement<span class=\"token operator\">></span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLImageElement<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意：断言只是一种预判，并不会数据本身产生实际的作用，即：类似转换，但并非真的转换了</p>\n</blockquote>\n","more":"<h2 id=\"接口定义\"><a class=\"markdownIt-Anchor\" href=\"#接口定义\"></a> 接口定义</h2>\n<p><u>接口</u>：对复杂的对象类型进行标注的一种方式，或者给其它代码定义一种契约（比如：类）</p>\n<p>接口的基础语法定义结构特别简单</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的代码定义了一个类型，该类型包含两个属性，一个 <u>number</u> 类型的 <u>x</u> 和一个 <u>number</u> 类型的 <u>y</u>，接口中多个属性之间可以使用 <u>逗号</u> 或者 <u>分号</u> 进行分隔</p>\n<p>我们可以通过这个接口来给一个数据进行类型标注</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><span style=\"color:red\">注意：接口是一种 <u>类型</u> ，不能作为 <u>值</u> 使用</span></p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> Point<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"可选属性\"><a class=\"markdownIt-Anchor\" href=\"#可选属性\"></a> 可选属性</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token comment\">// 加问好表示类型是可选的</span>\n  color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"只读属性\"><a class=\"markdownIt-Anchor\" href=\"#只读属性\"></a> 只读属性</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token comment\">// 只读属性使用 readonly 修饰</span>\n  <span class=\"token keyword\">readonly</span> info<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  info<span class=\"token operator\">:</span> <span class=\"token string\">'这是一个只读属性，不能被修改'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"任意属性\"><a class=\"markdownIt-Anchor\" href=\"#任意属性\"></a> 任意属性</h2>\n<p>有的时候，我们希望给一个接口添加任意属性，可以通过索引类型来实现</p>\n<p><strong>数字类型索引</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>字符串类型索引</strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>数字索引是字符串索引的子类型</p>\n<blockquote>\n<p>注意：索引签名参数类型必须为 <u>string</u> 或 <u>number</u> 之一，但两者可同时出现</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意：当同时存在数字类型索引和字符串类型索引的时候，数字类型的值类型必须是字符串类型的值类型或子类型</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point1</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 错误</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point2</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>prop1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span>prop2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 正确</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用接口描述函数\"><a class=\"markdownIt-Anchor\" href=\"#使用接口描述函数\"></a> 使用接口描述函数</h2>\n<p>我们还可以使用接口来描述一个函数</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFunc</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> fn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>注意，如果使用接口来单独描述一个函数，是没 <code>key</code> 的</p>\n</blockquote>\n<h2 id=\"接口合并\"><a class=\"markdownIt-Anchor\" href=\"#接口合并\"></a> 接口合并</h2>\n<p>多个同名的接口合并成一个接口</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n    height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">&#123;</span>\n    scale<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> box<span class=\"token operator\">:</span> Box <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>height<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> scale<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>如果合并的接口存在同名的非函数成员，则必须保证他们类型一致，否则编译报错</li>\n<li>接口中的同名函数则是采用重载</li>\n</ul>\n<h2 id=\"联合类型\"><a class=\"markdownIt-Anchor\" href=\"#联合类型\"></a> 联合类型</h2>\n<p>联合类型也可以称为多选类型，当我们希望标注一个变量为多个类型之一时可以选择联合类型标注，<u>或</u> 的关系</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> attr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token operator\">|</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// document.querySelector 方法返回值就是一个联合类型</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ts 会提示有 null 的可能性，加上判断更严谨</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">css</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"交叉类型\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型\"></a> 交叉类型</h2>\n<p>交叉类型也可以称为合并类型，可以把多种类型合并到一起成为一种新的类型，<u>并且</u> 的关系</p>\n<p>对一个对象进行扩展：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">o1</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">o2</span> <span class=\"token punctuation\">&#123;</span>z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> o<span class=\"token operator\">:</span> o1 <span class=\"token operator\">&amp;</span> o2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>z<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>小技巧</strong></p>\n<blockquote>\n<p><code>TypeScript</code> 在编译过程中只会转换语法（比如扩展运算符，箭头函数等语法进行转换，对于 <code>API</code> 是不会进行转换的（也没必要转换，而是引入一些扩展库进行处理的），如果我们的代码中使用了 <code>target</code> 中没有的 <code>API</code> ，则需要手动进行引入，默认情况下 <code>TypeScript</code> 会根据 <code>target</code> 载入核心的类型库</p>\n<p><code>target</code> 为 <code>es5</code> 时: <code>[&quot;dom&quot;, &quot;es5&quot;, &quot;scripthost&quot;]</code></p>\n<p><code>target</code> 为 <code>es6</code> 时: <code>[&quot;dom&quot;, &quot;es6&quot;, &quot;dom.iterable&quot;, &quot;scripthost&quot;]</code></p>\n<p>如果代码中使用了这些默认载入库以外的代码，则可以通过 <code>lib</code> 选项来进行设置</p>\n<p><a href=\"http://www.typescriptlang.org/docs/handbook/compiler-options.html\">http://www.typescriptlang.org/docs/handbook/compiler-options.html</a></p>\n</blockquote>\n<h2 id=\"字面量类型\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型\"></a> 字面量类型</h2>\n<p>有的时候，我们希望标注的不是某个类型，而是一个固定值，就可以使用字面量类型，配合联合类型会更有用</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> direction<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ok</span>\nbox <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// error</span>\nbox <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型别名\"><a class=\"markdownIt-Anchor\" href=\"#类型别名\"></a> 类型别名</h2>\n<p>有的时候类型标注比较复杂，这个时候我们可以类型标注起一个相对简单的名字</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">dir</span> <span class=\"token operator\">=</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'top'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>ele<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">,</span> direction<span class=\"token operator\">:</span> dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用类型别名定义函数类型\"><a class=\"markdownIt-Anchor\" href=\"#使用类型别名定义函数类型\"></a> 使用类型别名定义函数类型</h3>\n<p>这里需要注意一下，如果使用 <code>type</code> 来定义函数类型，和接口有点不太相同</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fn<span class=\"token operator\">:</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者直接</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">string</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"interface-与-type-的区别\"><a class=\"markdownIt-Anchor\" href=\"#interface-与-type-的区别\"></a> interface 与 type 的区别</h3>\n<p><strong>interface</strong></p>\n<ul>\n<li>只能描述 <code>object</code>/<code>class</code>/<code>function</code> 的类型</li>\n<li>同名 <code>interface</code> 自动合并，利于扩展</li>\n</ul>\n<p><strong>type</strong></p>\n<ul>\n<li>不能重名</li>\n<li>能描述所有数据</li>\n</ul>\n<h2 id=\"类型推导\"><a class=\"markdownIt-Anchor\" href=\"#类型推导\"></a> 类型推导</h2>\n<p>每次都显式标注类型会比较麻烦，<u>TypeScript</u> 提供了一种更加方便的特性：类型推导。<u>TypeScript</u> 编译器会根据当前上下文自动的推导出对应的类型标注，这个过程发生在：</p>\n<ul>\n<li>初始化变量</li>\n<li>设置函数默认参数值</li>\n<li>返回函数值</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 自动推断 x 为 number</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 不能将类型“\"a\"”分配给类型“number”</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数参数类型、函数返回值会根据对应的默认值和返回值进行自动推断</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> a<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\"></a> 类型断言</h2>\n<p>有的时候，我们可能标注一个更加精确的类型（缩小类型标注范围），比如：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我们可以看到 <u>img</u> 的类型为 <u>Element</u>，而 <u>Element</u> 类型其实只是元素类型的通用类型，如果我们去访问 <u>src</u> 这个属性是有问题的，我们需要把它的类型标注得更为精确：<u>HTMLImageElement</u> 类型，这个时候，我们就可以使用类型断言，它类似于一种 类型转换：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>HTMLImageElement<span class=\"token operator\">></span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>或者</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#img'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLImageElement<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>注意：断言只是一种预判，并不会数据本身产生实际的作用，即：类似转换，但并非真的转换了</p>\n</blockquote>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"TypeScript","path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","path":"api/tags/TypeScript.json"}]}