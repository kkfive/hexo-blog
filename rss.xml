<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小康博客</title>
    <link>https://www.antmoe.com/</link>
    
    <image>
      <url>https://cdn1.tianli0.top/npm/kang-static@latest/avatar.jpg</url>
      <title>小康博客</title>
      <link>https://www.antmoe.com/</link>
    </image>
    
    <atom:link href="https://www.antmoe.com/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>一个收藏回忆与分享技术的地方！</description>
    <pubDate>Sat, 23 Apr 2022 12:17:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>友链及友链朋友圈折腾史</title>
      <link>https://www.antmoe.com/posts/27fe65b9/</link>
      <guid>https://www.antmoe.com/posts/27fe65b9/</guid>
      <pubDate>Sun, 27 Mar 2022 09:02:25 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<blockquote><p>此文参考仓库：<a href="https://github.com/kkfive/my-friend">https://github.com/kkfive/my-friend</a></p></blockquote><h2 id="友链"><a class="markdownIt-Anchor" href="#友链"></a> 友链</h2><h3 id="友链数据"><a class="markdownIt-Anchor" href="#友链数据"></a> 友链数据</h3><p>说到友链，算是入坑Hexo博客以后第一个魔改的内容。</p><p>当时的魔改的友链还只是在原主题的基础上修改源代码，导致每次升级主题都要进行大量适配工作。</p><p>于是第一版的友链（不修改源代码）魔改出现了，其原理是通过JavaScript异步请求giteeAPI，来在前端显示友链信息。gitee端使用issue存储友链，使用户更方便的交换友链。</p><p>此处省略大量前端适配及优化方案。</p><p>方便的同时也产生了大量问题，其中我最不能容忍的情况如下：</p><ul><li>交换友链后站点关闭即博主不在维护</li><li>交换友链后换主题或博客系统导致曾经友链记录全部消失并且不补</li></ul><p>因此在2022年年初，基于kkapi我想要交换友链的小伙伴通过API提交交换，并且与用户GitHub或者Gitee绑定。前端通过自行填写表单的方式提交。</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/6240157d79f7d.png" alt="image-20220327154253430" /></p><p>但是此方案的实现过于复杂，且由于出现账号的概念，所以无形中为用户的“账号记录库”增加负担，且在代码维护与安全方面存在很多问题需要完善，<strong>因此此项方案作废。</strong></p><p>在同一时间，受到<a href="https://blog.imlete.cn/">乐特大佬</a>的启发，将友链文件放在GitHub中，前端通过请求此文件来获取友链信息。</p><p>于是我现在的友链诞生了，其大概流程如下：</p><p>用户PR友链信息-&gt;vercel触发构建-&gt;基于yaml生成JSON-&gt;部署静态文件（产物）</p><p>这样即可以解决交换友链过于简单，导致出现上述两种情况的可能，也能更简单的管理友链。</p><blockquote><p>通过PR交换友链，在一定程度上可以过滤掉只是建站玩玩并随便交换友链的小伙伴。也能省掉自己开发维护一套后台管理的步骤。</p></blockquote><h4 id="采用此方案的好处"><a class="markdownIt-Anchor" href="#采用此方案的好处"></a> 采用此方案的好处</h4><ul><li><p>不依赖于主题</p><p>理论上来说，无论现在用的是什么主题都可以这样使用，前提是需要编写对应脚本根据友链json生成对应主题友链的样式</p></li><li><p>数据公开和记录</p><p>所有人都可以看到历史修改记录</p></li><li><p>便于扩展</p><p>因为友链数据统一了，因此基于友链的一些项目便可以很方便的生成对应数据</p></li><li><p>其他</p></li></ul><h3 id="友链前端"><a class="markdownIt-Anchor" href="#友链前端"></a> 友链前端</h3><p>最新版的友链前端仅支持上述数据源，并且我个人认为友链这种东西不应该太过于花里胡哨，因此将曾经花里胡哨的部分均会砍掉，只保留最基本的友链。</p><p>但是友链的样式还会继续更新。</p><h2 id="友链朋友圈"><a class="markdownIt-Anchor" href="#友链朋友圈"></a> 友链朋友圈</h2><p>这部分目前只咕了对接爬虫的部分和API查询部分，至于前端部分仍未开始。<img src="https://emotion.acs.pw/emotion/aru/124.png" alt="124" /></p><h3 id="部署友链爬虫"><a class="markdownIt-Anchor" href="#部署友链爬虫"></a> 部署友链爬虫</h3><p>部署友链爬虫我个人比较喜欢的方式是通过<code>docker-compose</code>部署，因为这样我不需要记繁杂的命令，只需要一条命令即可启动。</p><p>镜像仓库通过阿里云打包，并且存放在阿里云中，这样拉取速度在我的服务器上能够杠杠的。</p><p>部署姿势参考：<a href="htttps://www.antmoe.com/posts/9a1d6e25/">基于Docker安装之安装友链朋友圈爬虫</a></p><p><code>setting.py</code>配置参考：<a href="https://github.com/kkfive/hexo-circle-of-friends/blob/main/hexo_circle_of_friends/settings.py">setting.py</a></p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/624036d15295b.jpeg" alt="image-20220327180455615" /></p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/624036f6ec725.png" alt="image-20220327180543056" /></p><h3 id="友链爬虫数据源"><a class="markdownIt-Anchor" href="#友链爬虫数据源"></a> 友链爬虫数据源</h3><blockquote><p>对于友链爬虫对于我来说只是一个链接rss爬虫，为什么这么说呢，因为对于这个程序，我只想让他爬我希望让他爬的链接。例如：你的友链有一个好友整天发的文章是一些推广类文章，那么如何在不删除友链的情况下，不修改源代码的情况下去掉这个链接呢？当然了还存在一种情况，小伙伴交换的友链是<code>www.antmoe.com</code>，但是他的rss订阅地址是<code>blog.antmoe.com/rss</code>，此时如何告诉爬虫不去爬<code>www.antmoe.com</code>而是爬<code>blog.antmoe.com/rss</code>呢？</p></blockquote><p><a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends">hexo-circle-of-friends</a>新增<a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends/blob/c90cdc5d785ce9c55a3e419f8098d0646dfaff58/hexo_circle_of_friends/settings.py#L90">mongoDB</a>存储和<a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends/blob/c90cdc5d785ce9c55a3e419f8098d0646dfaff58/hexo_circle_of_friends/settings.py#L44">jsonapi</a>方式爬取友链对我来说是<strong>大大</strong>的友好，起初对于jsonapi的提供方式我选择了在kkapi生成<a href="https://kkapi.vercel.app/api/friend/spider/subscribe/61fe93508fd621d39a155725">订阅链接</a>，然后交给爬虫，这种方法起初是没有问题的（虽然现在也没有什么问题）这样可以灵活控制需要爬哪些链接而不受友链影响。</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/62401ff34a249.png" alt="image-20220327162731188" /></p><p>在大多数情况下友链数据与爬虫数据是需要同步的，因此如果只是单独放在后端就需要添加同步友链的接口去同步友链，为了使友链数据与爬虫爬取的数据达到统一，我最终选择扩展上述友链数据，在生成友链数据的同时生成一份用于爬虫的数据。例如：<a href="https://kkfriend.vercel.app/fcircle.json">https://kkfriend.vercel.app/fcircle.json</a></p><p>其原理大概如下：</p><p>生成友链-&gt;提取并过滤所有友链-&gt;符合条件则写入文件</p><p>为了满足上述中的需要，添加了一下字段来控制是否将友链加入到爬虫队列以及爬虫爬取的地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否禁用友链爬虫（true表示不加入友链爬虫队列，false表示加入爬虫队列）</span><span class="token comment"># 例如 我已经知道乐特没有rss 所以我不想让爬虫再去爬乐特的站了 那就banSub: true</span><span class="token key atrule">banSub</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 自定义后缀，对应友链爬虫的suffix字段</span><span class="token key atrule">subSuffix</span><span class="token punctuation">:</span> atom.xml<span class="token comment"># 指定自定义路径（例如该用户feed地址为https://blog.lete114.top/feed）</span><span class="token comment"># 例如  乐特的rss在blog.lete114.top 但是交换友链用的域名时www.lete114.top 那就feed: https://blog.lete114.top/</span><span class="token key atrule">feed</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.lete114.top/<span class="token comment"># 生成链接时忽略此条记录（即生成时友链时不会生成此条友链）</span><span class="token comment"># 例如 我想爬乐特的rss，但又不想让他在我的友链出现 那就disable: true</span><span class="token key atrule">disable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="api部分"><a class="markdownIt-Anchor" href="#api部分"></a> api部分</h3><p>重写api并不代表否认官方api，而是因为我不会python，并且数据格式我并不喜欢，因此选择了重新构建api。<img src="https://emotion.acs.pw/emotion/aru/16.png" alt="" /></p><p>重构API的必要条件</p><ul><li>基于<a href="https://kkapi.js.org">kkapi</a></li><li>数据存储在mongodb，并且与kkapi使用的是同一数据库</li></ul><p>目前接口实现</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">路径</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">获取全部文章</td><td style="text-align:center"><a href="https://kkapi.vercel.app/api/fcircle/all">/fcircle/all</a></td><td style="text-align:center">用于获取全部文章</td></tr><tr><td style="text-align:center">模糊查询</td><td style="text-align:center"><a href="https://kkapi.vercel.app/api/fcircle/find?author=%E5%B0%8F%E5%BA%B7%E5%8D%9A%E5%AE%A2">/fcircle/find</a></td><td style="text-align:center">用于提供部分信息来实现模糊匹配</td></tr></tbody></table><p>模糊查询接口支持的参数</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/6240253a74429.png" alt="模糊查询接口支持的参数" /></p><h3 id="前端部分"><a class="markdownIt-Anchor" href="#前端部分"></a> 前端部分</h3><p>咕咕咕</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/Project/">Project</category>
      
      <category domain="https://www.antmoe.com/categories/Project/Friend/">Friend</category>
      
      
      <category domain="https://www.antmoe.com/tags/%E5%8F%8B%E9%93%BE/">友链</category>
      
      
      <comments>https://www.antmoe.com/posts/27fe65b9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基于Docker安装之安装友链朋友圈爬虫</title>
      <link>https://www.antmoe.com/posts/9a1d6e25/</link>
      <guid>https://www.antmoe.com/posts/9a1d6e25/</guid>
      <pubDate>Sun, 27 Mar 2022 08:19:26 GMT</pubDate>
      
      <description>通过docker-compose快速部署友链朋友圈爬虫</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><blockquote><p>此部分基于<a href="https://www.antmoe.com/posts/60ad1677/">基于Docker安装之docke与docker-compose</a>，如果你没有安装<code>docker</code>和<code>docker-compose</code>那么请先参考前面的文章进行安装，否则无法使用此项目。</p></blockquote><ol><li><p>新建任意目录，例如<code>fcircle</code></p><p><code>mkdir fcircle</code></p></li><li><p>创建<code>docker-compose.yml</code>文件，并写入如下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">friend-circle</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>beijing.aliyuncs.com/xk<span class="token punctuation">-</span>repo/fcrile<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> friend_circle    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./source/hexo_circle_of_friends<span class="token punctuation">:</span>/hexo_circle_of_friends      <span class="token punctuation">-</span> ./logs/<span class="token punctuation">:</span>/tmp/    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'8002:8000'</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">RUN_PER_HOURS</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token comment"># 根据自己实际情况填写如下环境变量</span>      <span class="token key atrule">APPID</span><span class="token punctuation">:</span>      <span class="token key atrule">APPKEY</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_USERNAME</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_IP</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_DB</span><span class="token punctuation">:</span>      <span class="token key atrule">MONGODB_URI</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在同级目录创建<code>source</code>目录，进入其中拉取代码</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;Rock-Candy-Tea&#x2F;hexo-circle-of-friends.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并修改<code>/fcircle/source/hexo_circle_of_friends/setting.py</code>文件为你的个性化设置即可。</p></li><li><p>启动容器</p><p><code>docker-compose up -d</code></p></li></ol>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/">经验记录</category>
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85/">基于docker安装</category>
      
      
      <category domain="https://www.antmoe.com/tags/docker%E5%AE%89%E8%A3%85/">docker安装</category>
      
      <category domain="https://www.antmoe.com/tags/%E5%8F%8B%E9%93%BE%E6%9C%8B%E5%8F%8B%E5%9C%88/">友链朋友圈</category>
      
      
      <comments>https://www.antmoe.com/posts/9a1d6e25/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基于Docker安装之Typecho博客</title>
      <link>https://www.antmoe.com/posts/d0568943/</link>
      <guid>https://www.antmoe.com/posts/d0568943/</guid>
      <pubDate>Sun, 27 Mar 2022 06:19:26 GMT</pubDate>
      
      <description>使用docker安装Typecho博客</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><blockquote><p>此部分基于<a href="https://www.antmoe.com/posts/60ad1677/">基于Docker安装之docke与docker-compose</a>和<a href="https://www.antmoe.com/posts/87a6ddf2/">基于Docker安装之Nginx MySQL和PHP环境</a>两篇文章，如果你的docker-compose文件与我文中有冲突，那么此篇文章可能并不适合你。或者你可以选择采用我的方案。</p></blockquote><blockquote><p><strong>安装时为了顺利安装，请先不要开启https，等待安装完后在开启。</strong></p></blockquote><h3 id="建立nginx配置文件"><a class="markdownIt-Anchor" href="#建立nginx配置文件"></a> 建立nginx配置文件</h3><p>在<code>nginx/conf.d</code>文件下新建<code>typecho.conf</code>文件并写入如下内容：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>   <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token comment">## listen for ipv4; this line is default and implied</span>    <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/typecho/</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> life.antmoe.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">10240</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip_proxied</span> expired no-cache no-store private auth</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip_types</span> text/plain text/css text/xml application/json text/javascript application/x-javascript application/xml</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]\."</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">if</span> (!-e <span class="token variable">$request_filename</span>)</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$ /index.php<span class="token variable">$1</span> last</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> ~ .*\.php(\/.*)*$</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>        <span class="token comment">#fastcgi_split_path_info ^(.+\.php)(/.+)$;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span> unix:/run/php/php8.0-fpm.sock</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_path_info</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">expires</span>           <span class="token number">5d</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上仅为示例，请根据具体情况修改。</p></blockquote><h3 id="上传typecho程序"><a class="markdownIt-Anchor" href="#上传typecho程序"></a> 上传typecho程序</h3><p>进入<a href="https://github.com/typecho/typecho/releases">lsky-release</a>页面下载程序包，注意<strong>不要下载源码包</strong>。</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/623ff085285c5.png" alt="image-20220327130509061" /></p><p>将压缩包中的文件上传至<code>www/typecho</code>文件夹下。</p><h3 id="查看效果"><a class="markdownIt-Anchor" href="#查看效果"></a> 查看效果</h3><p>此时重启docker<code>docker-compose restart</code>后访问设置的域名或ip+端口号即可看到效果。</p><p>安装时服务器地址，输入<code>ifconfig</code>查看本机ip地址，并填入。</p><p><img src="https://file.acs.pw//lsky/2/2022/03/27/623f39677ab62.png" alt="image-20220327000351433" /></p><p>例如我的就是<code>172.28.0.1</code>，数据库可以通过命令或者可视化工具链接后继续新建或者使用启动容器时创建的数据库。</p><h2 id="关于ssl"><a class="markdownIt-Anchor" href="#关于ssl"></a> 关于SSL</h2><p>我的方案是采用又拍云回源服务器方式，因此服务器没必要安装ssl证书，只需要在又拍云处申请证书即可。</p><p>但是这样会导致样式文件无法正常显示，因此需要调整部分配置文件，</p><p>安装完成后修改程序根目录下的<code>config.inc.php</code>，在末尾处添加如下代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** 开启HTTPS */</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'__TYPECHO_SECURE__'</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时在upyun开启https即可。</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/">经验记录</category>
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85/">基于docker安装</category>
      
      
      <category domain="https://www.antmoe.com/tags/docker%E5%AE%89%E8%A3%85/">docker安装</category>
      
      <category domain="https://www.antmoe.com/tags/Typecho/">Typecho</category>
      
      
      <comments>https://www.antmoe.com/posts/d0568943/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基于Docker安装之lsky-pro_v2图床</title>
      <link>https://www.antmoe.com/posts/ebff2/</link>
      <guid>https://www.antmoe.com/posts/ebff2/</guid>
      <pubDate>Sun, 27 Mar 2022 04:44:26 GMT</pubDate>
      
      <description>使用docker安装兰空v2版本的图床</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><blockquote><p>此部分基于<a href="https://www.antmoe.com/posts/60ad1677/">基于Docker安装之docke与docker-compose</a>和<a href="https://www.antmoe.com/posts/87a6ddf2/">基于Docker安装之Nginx MySQL和PHP环境</a>两篇文章，如果你的docker-compose文件与我文中有冲突，那么此篇文章可能并不适合你。或者你可以选择采用我的方案。</p></blockquote><blockquote><p><strong>安装时为了顺利安装，请先不要开启https，等待安装完后在开启。</strong></p></blockquote><h3 id="建立nginx配置文件"><a class="markdownIt-Anchor" href="#建立nginx配置文件"></a> 建立nginx配置文件</h3><p>在<code>nginx/conf.d</code>文件下新建<code>lsky.conf</code>文件并写入如下内容：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  yourdomain</span><span class="token punctuation">;</span> <span class="token comment"># 这里需要换成你的域名 </span>    <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/lsky/public/</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/lsky_access.log main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">&#123;</span>       <span class="token comment"># try_files $uri $uri/ /index.php?$query_string;</span>        <span class="token directive"><span class="token keyword">fastcgi_split_path_info</span> ^(.+\.php)(/.+)$</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span> unix:/run/php/php8.0-fpm.sock</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_path_info</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>      <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上仅为示例，请根据具体情况修改。</p></blockquote><h3 id="上传lsky程序"><a class="markdownIt-Anchor" href="#上传lsky程序"></a> 上传lsky程序</h3><p>进入<a href="https://github.com/lsky-org/lsky-pro/releases">lsky-release</a>页面下载程序包，注意<strong>不要下载源码包</strong>。</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/623fe9e55632c.png" alt="image-20220327123653334" /></p><p>将压缩包中的文件上传至<code>www/lsky</code>文件夹下，上传完成后进入该目录，并输入命令<code>chmod -R 777 ./*</code>。</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/623feaa7a92f3.png" alt="image-20220327124007651" /></p><h3 id="查看效果"><a class="markdownIt-Anchor" href="#查看效果"></a> 查看效果</h3><p>此时重启docker<code>docker-compose restart</code>后访问设置的域名或ip+端口号即可看到效果。</p><p>安装时服务器地址，输入<code>ifconfig</code>查看本机ip地址，并填入。</p><p><img src="https://file.acs.pw//lsky/2/2022/03/27/623f39677ab62.png" alt="image-20220327000351433" /></p><p>例如我的就是<code>172.28.0.1</code>，数据库可以通过命令或者可视化工具链接后继续新建或者使用启动容器时创建的数据库。</p><h2 id="关于ssl"><a class="markdownIt-Anchor" href="#关于ssl"></a> 关于SSL</h2><p>我的方案是采用又拍云回源服务器方式，因此服务器没必要安装ssl证书，只需要在又拍云处申请证书即可。</p><p>但是这样会导致样式文件无法正常显示，因此需要调整部分文件。</p><p>参考于：<a href="https://github.com/lsky-org/lsky-pro/discussions/357">【收集贴】安装兰空v2常见问题及其解决方法</a></p><p>编辑 .env 文件，追加一行：</p><pre class="line-numbers language-none"><code class="language-none">ASSET_URL&#x3D;https:&#x2F;&#x2F;你的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是接口域名还是 http 的，所以在这个文件的 boot 方法里，</p><p><code>lsky-pro/app/Providers/AppServiceProvider.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token comment">// 是否需要生成 env 文件 </span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.env'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.env'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'.env.example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 生成 key </span>         <span class="token class-name static-context">Artisan</span><span class="token operator">::</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'key:generate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果已经安装程序，初始化一些配置 </span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token function">base_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'installed.lock'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 覆盖默认配置 </span>         <span class="token class-name static-context">Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'app.name'</span><span class="token punctuation">,</span> <span class="token class-name static-context">Utils</span><span class="token operator">::</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token class-name static-context">ConfigKey</span><span class="token operator">::</span><span class="token constant">AppName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name static-context">Config</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mail'</span><span class="token punctuation">,</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token function"><span class="token punctuation">\</span>config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mail'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name static-context">Utils</span><span class="token operator">::</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token class-name static-context">ConfigKey</span><span class="token operator">::</span><span class="token constant">Mail</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name static-context">View</span><span class="token operator">::</span><span class="token function">composer</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>View<span class="token punctuation">\</span>View</span> <span class="token variable">$view</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">/** @var Group $group */</span>              <span class="token variable">$group</span> <span class="token operator">=</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token property">group</span> <span class="token punctuation">:</span> <span class="token class-name static-context">Group</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'is_guest'</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token variable">$view</span><span class="token operator">-></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_group'</span><span class="token punctuation">,</span> <span class="token variable">$group</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>URL</span><span class="token operator">::</span><span class="token function">forceScheme</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对接picgo"><a class="markdownIt-Anchor" href="#对接picgo"></a> 对接PicGo</h2><p>picgo我个人使用的插件是<a href="https://github.com/hellodk34/picgo-plugin-lankong">lankong</a>,配置参考如下</p><p><img src="https://file.acs.pw//lsky/2/2022/03/26/623f35e92f9a6.png" alt="image-20220326234857512" /></p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/">经验记录</category>
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85/">基于docker安装</category>
      
      
      <category domain="https://www.antmoe.com/tags/docker%E5%AE%89%E8%A3%85/">docker安装</category>
      
      <category domain="https://www.antmoe.com/tags/%E5%85%B0%E7%A9%BA%E5%9B%BE%E5%BA%8A/">兰空图床</category>
      
      
      <comments>https://www.antmoe.com/posts/ebff2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基于Docker安装之Nginx、PHP环境和数据库</title>
      <link>https://www.antmoe.com/posts/87a6ddf2/</link>
      <guid>https://www.antmoe.com/posts/87a6ddf2/</guid>
      <pubDate>Sun, 27 Mar 2022 03:31:26 GMT</pubDate>
      
      <description>基于docker安装Nginx服务器与PHP环境，当然还有一些常用的数据库服务，例如MySQL和MongDB。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><p>docker-compose文件如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wyveo/nginx<span class="token punctuation">-</span>php<span class="token punctuation">-</span>fpm<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'80:80'</span>      <span class="token punctuation">-</span> <span class="token string">'443:443'</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./www<span class="token punctuation">:</span>/usr/share/nginx/      <span class="token punctuation">-</span> ./nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d      <span class="token punctuation">-</span> ./nginx/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> web  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'3306:3306'</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./mysql/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> ./mysql/logs<span class="token punctuation">:</span>/var/log/mysql      <span class="token punctuation">-</span> ./mysql/conf<span class="token punctuation">:</span>/etc/mysql/conf.d    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql.env    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> web  <span class="token key atrule">mongo</span><span class="token punctuation">:</span>     <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo<span class="token punctuation">:</span>4.4.3    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> ./mongdb/data/<span class="token punctuation">:</span>/data/db    <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"27017:27017"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MONGO_INITDB_ROOT_USERNAME</span><span class="token punctuation">:</span> root <span class="token comment"># mongodb的用户名</span>      <span class="token key atrule">MONGO_INITDB_ROOT_PASSWORD</span><span class="token punctuation">:</span> root <span class="token comment"># mongodb的密码</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> web<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我是将以前的<code>php</code>镜像和<code>nginx</code>镜像合并使用了一个<code>wyveo/nginx-php-fpm:latest</code>镜像，并且打包了许多常用的php扩展。</p><p>因此如果跟你目前正在使用的有冲突，可能需要自己调整下。</p><ol><li><p>在目录中创建<code>docker-compose.yaml</code>文件，并写入以上内容</p></li><li><p>创建<code>mysql.env</code>（与<code>docker-compose.yaml</code>同路径），并写入你的内容</p><pre class="line-numbers language-env" data-language="env"><code class="language-env"># MySQL的root用户默认密码，这里自行更改MYSQL_ROOT_PASSWORD&#x3D;你的root用户密码# MySQL镜像创建时自动创建的数据库名称MYSQL_DATABASE&#x3D;自动创建的数据库# MySQL镜像创建时自动创建的用户名MYSQL_USER&#x3D;自动创建的用户名# MySQL镜像创建时自动创建的用户密码MYSQL_PASSWORD&#x3D;密码# 时区TZ&#x3D;Asia&#x2F;Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建<code>nginx</code>目录</p><ol><li><p>在<code>nginx</code>目录新建文件<code>nginx.conf</code>（nginx的默认配置），并写入如下内容</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log warn</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">50m</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token comment">#tcp_nopush     on;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">gzip</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>nginx</code>目录下新建<code>conf.d</code><strong>目录</strong>，并在<code>conf.d</code>目录下新建文件<code>default.conf</code>并写入如下内容</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span> /usr/share/nginx/</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/lsky_access.log main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">&#123;</span>       <span class="token comment"># try_files $uri $uri/ /index.php?$query_string;</span>        <span class="token directive"><span class="token keyword">fastcgi_split_path_info</span> ^(.+\.php)(/.+)$</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span> unix:/run/php/php8.0-fpm.sock</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span> index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> PATH_INFO <span class="token variable">$fastcgi_path_info</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>      <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>接下来返回根目录（<code>docker-compose.yaml</code>同级目录），并新建<code>www</code>文件夹</p><p>在<code>www</code>文件夹中新建一个文件夹，并写入对应内容，此时访问服务器地址+文件夹名即可看到对应内容。</p></li><li><p>数据库地址</p><p>输入<code>ifconfig</code>查看本机ip地址，并填入。</p><p><img src="https://file.acs.pw//lsky/2/2022/03/27/623f39677ab62.png" alt="image-20220327000351433" /></p><p>例如我的就是<code>172.28.0.1</code>，数据库可以通过命令或者可视化工具链接后继续新建或者使用启动容器时创建的数据库。</p></li></ol><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><p>此系列文章中，我的所有配置文件都不会使用ssl，因为我会用又拍云套用，在cdn端加入ssl证书。</p><p>这么做的原因主要是为了便于日后维护，这样就不需要每次证书过期后，申请很多证书然后在传入服务器，upyun支持自动续期证书，因此个人使用的话我认为这是一个便捷高效的方案。</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/">经验记录</category>
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85/">基于docker安装</category>
      
      
      <category domain="https://www.antmoe.com/tags/docker%E5%AE%89%E8%A3%85/">docker安装</category>
      
      <category domain="https://www.antmoe.com/tags/LNMP%E7%8E%AF%E5%A2%83/">LNMP环境</category>
      
      
      <comments>https://www.antmoe.com/posts/87a6ddf2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基于Docker安装之docke与docker-compose</title>
      <link>https://www.antmoe.com/posts/60ad1677/</link>
      <guid>https://www.antmoe.com/posts/60ad1677/</guid>
      <pubDate>Sun, 27 Mar 2022 03:24:26 GMT</pubDate>
      
      <description>在服务器中安装docker与docker-compose，为后续步骤顺利进行。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="基于docker安装"><a class="markdownIt-Anchor" href="#基于docker安装"></a> 基于Docker安装</h2><p>此分类下的文章主要用于记录<a href="htttps://www.antmoe.com">小康</a>在日常折腾服务器时使用docker安装的一些服务和程序。</p><p>此系列文章虽然可以在一篇文章中表述，但还是采用每部分分开的撰写的方式，因为大多数情况下，你可能只需要参阅其某部分，例如<a href="https://www.antmoe.com/posts/60ad1677/">基于Docker安装之docke与docker-compose</a>和<a href="https://www.antmoe.com/posts/87a6ddf2/">基于Docker安装之Nginx MySQL和PHP环境</a>这两篇文章，阅读这两篇的情况只发生在初次安装时，而一旦安装完成后则不在需要阅读此部分文章。</p><h2 id="在服务器中安装docker"><a class="markdownIt-Anchor" href="#在服务器中安装docker"></a> 在服务器中安装Docker</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL get.docker.com -o get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后的推荐操作</p><ol><li><p>启动docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建docker用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将当前用户加入docker组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">docker</span> <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试docker安装是否正确</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="docker-compose"><a class="markdownIt-Anchor" href="#docker-compose"></a> docker-compose</h2><h3 id="linux系统"><a class="markdownIt-Anchor" href="#linux系统"></a> Linux系统</h3><p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="linux手动下载推荐"><a class="markdownIt-Anchor" href="#linux手动下载推荐"></a> Linux手动下载(推荐)</h3><ol><li><p>进入<a href="https://github.com/docker/compose/releases">GitHub</a>下载</p><p><img src="https://file.acs.pw/lsky/2/2022/03/27/623fd9f4b33c1.png" alt="image-20220327112845510" /></p></li><li><p>将文件上传到服务器（Linux机器）</p></li><li><p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> docker-compose-linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为其赋予可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="macos-windows"><a class="markdownIt-Anchor" href="#macos-windows"></a> macos、windows</h3><p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p><h2 id="修改镜像源"><a class="markdownIt-Anchor" href="#修改镜像源"></a> 修改镜像源</h2><blockquote><p>此步骤可以忽略，部分docker镜像阿里镜像源并不是最新的。</p></blockquote><ol><li><p>登录<a href="https://cr.console.aliyun.com/?spm=5176.12818093.custom--ali--widget-home-product-recent.dre1.1c8316d0Tujp2R">阿里容器镜像服务</a></p></li><li><p>查看加速地址</p><p><img src="https://file.acs.pw/picGo/2021/2/27/4ee8ed340343e6d5b82db27657dfd308.png" alt="image-20210227190110321" /></p></li><li><p>设置加速服务</p><ul><li><p>创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建文件并写入内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://lz2nib3q.mirror.aliyuncs.com"]&#125;EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载及重启Docker服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看镜像地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/">经验记录</category>
      
      <category domain="https://www.antmoe.com/categories/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%9F%BA%E4%BA%8Edocker%E5%AE%89%E8%A3%85/">基于docker安装</category>
      
      
      <category domain="https://www.antmoe.com/tags/docker%E5%AE%89%E8%A3%85/">docker安装</category>
      
      
      <comments>https://www.antmoe.com/posts/60ad1677/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于&quot;反代&quot;JSD这件事</title>
      <link>https://www.antmoe.com/posts/abeb101d/</link>
      <guid>https://www.antmoe.com/posts/abeb101d/</guid>
      <pubDate>Fri, 25 Mar 2022 04:27:00 GMT</pubDate>
      
      <description>通过dogeclou&quot;反代&quot;jsdelivr。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>众所周知<a href="https://www.jsdelivr.com/">jsdelivr</a>的加速出现了一些问题，导致速度并不会向当初那样。再此期间也尝试了各种奇淫技巧，例如：</p><ul><li>sw 前端竞速并缓存（参考于 ChenYFan）</li><li>sw 前端竞速（参考于乐特）</li><li>白嫖 TianLi 的 CDN</li></ul><p>但是用来用去给我的感觉并不像当初使用 jsdelivr 那种感觉舒服，例如 sw 同时发送大量请求，在我的&quot;小破手机&quot;中每次打开都会有一些卡顿；至于 TianLi 的 CDN，速度很舒服，不过终归是白嫖。我个人的观点可能也会像当初的晚风图床。</p><p>因此，我决定自己反代 JSD 实现自己个人使用的 CDN。</p><h2 id="我的需求"><a class="markdownIt-Anchor" href="#我的需求"></a> 我的需求</h2><ol><li>个人使用，不希望别人使用</li><li>不存储源文件</li><li>访问不是自己定义的仓库(路径)则跳转某个地址</li></ol><h2 id="如何反代"><a class="markdownIt-Anchor" href="#如何反代"></a> 如何反代</h2><p>对于上述需求，前两个很简单，防盗链加上后，也没啥好办法可以防护了；不存储源文件那么就依靠 CDN 的缓存即可。至于第三点则需要反代。</p><p>与其说是反代，其实我认为说是重写更合适。</p><p>首先我原本是想只部署在 vercel，利用其<code>vercel.json</code>配置文件直接对路由进行定义及过滤实现我的需求。</p><p><img src="https://file.acs.pw/picGo/2022/03/25/1801324edc11-45a3759eba3c3f1ccbe0c210aa76152c.png" alt="image-20220325180125246" /></p><p>将源站做好后就是 CDN，CDN 回源站设置为 vercel 的地址，并开启<strong>跟随重定向</strong>并<strong>打开 CDN 缓存</strong>即可。这里我设置的 CDN 缓存为跟随源站即跟随 JSD 的缓存设置。</p><p><img src="https://file.acs.pw/picGo/2022/03/25/182046993ec7-be3f76ed1ee4bc26ef0adcd4b28f741b.png" alt="image-20220325182046804" /></p><p><img src="https://file.acs.pw/picGo/2022/03/25/182101812504-b01f60ce465c468c637d692fb03cb97d.png" alt="image-20220325182100991" /></p><p>至于为什么使用 vercel.json 配置文件，因为我认为这个需求使用其配置文件的<code>redirects</code>即可。个人认为与其写程序去判断，不如直接在入口处判断方案。</p><p>大概配置文件参考如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"redirects"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"/npm/kang-static(.*)"</span><span class="token punctuation">,</span>      <span class="token property">"destination"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/npm/kang-static$1"</span><span class="token punctuation">,</span>      <span class="token property">"statusCode"</span><span class="token operator">:</span> <span class="token number">302</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"/(.*)"</span><span class="token punctuation">,</span>      <span class="token property">"destination"</span><span class="token operator">:</span> <span class="token string">"https://www.antmoe.com"</span><span class="token punctuation">,</span>      <span class="token property">"statusCode"</span><span class="token operator">:</span> <span class="token number">307</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上表示，如果访问路径匹配<code>/npm/kang-static(.*)</code>则将链接重定向到 jsd 响应的链接。</p><h2 id="服务器workers"><a class="markdownIt-Anchor" href="#服务器workers"></a> 服务器&amp;Workers</h2><p>由于 vercel 在国外，因此使用国内 CDN 回源时会有一点点的速度慢。</p><p>例如：CDN 回源到 Vercel，在重定向到 JSD 则会出现两次链接，因此为了降低第一次链接的速度，我决定在腾讯云函数和轻服务部署试一试，顺便部署下 cf worker 作为备用使用。</p><p>在这个环境中无法像 vercel 那样 0 代码实现需要，因此只能小写一点代码实现部署。</p><p>代码参考仓库：<a href="https://github.com/kkfive/jsd_proxy">jsd-proxy</a></p><h2 id="弊端"><a class="markdownIt-Anchor" href="#弊端"></a> 弊端</h2><p>包括但不限于以下几点</p><ol><li>如果不套用那么就是减速器</li><li>关于缓存问题没有一个合理的刷新机制<ul><li>dogecloud 刷新 cdn 有每次次数限制</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/Project/">Project</category>
      
      <category domain="https://www.antmoe.com/categories/Project/jsd-proxy/">jsd-proxy</category>
      
      
      <category domain="https://www.antmoe.com/tags/Hexo/">Hexo</category>
      
      
      <comments>https://www.antmoe.com/posts/abeb101d/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我的Hexo“自动化”之道</title>
      <link>https://www.antmoe.com/posts/41164f83/</link>
      <guid>https://www.antmoe.com/posts/41164f83/</guid>
      <pubDate>Fri, 11 Mar 2022 13:16:00 GMT</pubDate>
      
      <description>Hexo自动化实现，整体流程不输动态博客。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这篇文章一直想咕，直到现在才开始咕咕咕。</p><p>此文只是简单想简单介绍下<a href="https://www.antmoe.com/">我的个人博客</a>为什么最终选择了 Hexo 以及怎么“自动化”部署 Hexo 博客。</p><h2 id="为何选择-hexo"><a class="markdownIt-Anchor" href="#为何选择-hexo"></a> 为何选择 Hexo</h2><p>说到个人博客，业界老大哥<a href="https://wordpress.org/">wordpress</a>和<a href="https://github.com/typecho/typecho">typecho</a>必须要提一下。因为当初选择博客时我自然也尝试了这两款，但是的选择最终选择了 typecho，至于原因其实很简单，只是想要一个 markdown 简单的写作平台。</p><p>成功在学生机上部署 typecho 后为了“花里胡哨”，又入手了<a href="https://www.ihewro.com/archives/489/">handsome</a>主题。于是小康的第一个对外博客就有了：<a href="https://life.antmoe.com/%EF%BC%88%E6%AD%A4%E7%AB%99%E5%8E%9F%E6%95%B0%E6%8D%AE%E5%B7%B2%E4%B8%A2%E5%A4%B1%E3%80%82%EF%BC%89">https://life.antmoe.com/（此站原数据已丢失。）</a></p><p>虽然 typecho 很便捷，但是对我而言，其实并不比 Hexo 便捷多少。首先谈谈我的个人习惯</p><ul><li><strong>习惯本地写作</strong></li><li>markdown，讨厌富文本</li><li>以技术类型博文为主</li><li>几乎没有非公开类型的博文</li></ul><p>综上几点习惯，当初使用 typecho 时发送姿势：本地 typora 写好后复制到 typecho 后台，然后发表。</p><p>而 Hexo 就比较简单了，本地写好后 git 三连即可推送进行自动部署。</p><p>而 markdown 写作感受个人观点：typora yyds。</p><p>至于隐私类博文（想要加密）受职业影响 应该是不会有这种类型的博文的。</p><p>因此为了更好的写作体验，为了不改变习惯 最终选择了 Hexo。</p><h2 id="hexo-的自动化"><a class="markdownIt-Anchor" href="#hexo-的自动化"></a> Hexo 的自动化</h2><p>首先看一张流程图</p><p><img src="https://file.acs.pw/picGo/2022/03/11/20220311225614.png" alt="image-20220311225614551" /></p><ol><li>推送到 Coding 后触发持续集成将代码推送到 GitHub 仓库（源码）</li><li>GitHub 仓库推送代码后触发 Actions，进行构建静态页面</li><li>构建完静态页面后<ul><li>推送产物到<a href="https://github.com/kkfive/kkfive.github.io">GitHub Pages 仓库</a></li><li>清除又拍云回源存储桶并刷新全站缓存</li></ul></li><li>GitHub Pages 收到代码推送后进行<a href="https://github.com/kkfive/kkfive.github.io/actions">Actions</a><ul><li>同步静态页面到 Gitee、Bitbucket、Gitlab 等平台</li><li>进行 Gitee 部署</li><li>将新增/更新文章发送到<a href="https://t.me/kkfiveblog">Telegram 频道</a></li></ul></li></ol><p>以上便是<a href="https://www.antmoe.com">我的博客</a>自动化流程，个人认为完全不输动态博客。</p><p>虽然动态博客可以随时打开网页输入密码进行撰文，但是我个人是不会在手机进行撰文的。</p><p>因此只要撰文则一定使用的是 pc 端，那么对于在外时，下载一个 typora 难度也不大。</p><p>或者使用 coding 里的 Cloud Studio 进行云写作。</p><p><img src="https://file.acs.pw/picGo/2022/03/13/20220313211015.png" alt="image-20220313211015407" /></p><blockquote><p>之所以第一步推送到 Coding 的目的</p><ul><li>首先是受网络影响，直接推送到 GitHub 有时会推送不上</li><li>个人 GitHub 号曾经被封过一次，过渡阶段使用了 Coding。现在为了防止再次被封而导致源码丢失，因此放在国内的 Coding。</li></ul></blockquote><h2 id="关于-cdn"><a class="markdownIt-Anchor" href="#关于-cdn"></a> 关于 CDN</h2><p><a href="https://www.antmoe.com">小康</a>这里选择的是<a href="https://www.upyun.com/">又拍云</a>，原因之一是因为免费，其二是因为它的<strong>源站资源迁移</strong>功能；其三则是边缘规则。</p><p><img src="https://file.acs.pw/picGo/2022/03/18/20220318220153.png" alt="image-20220318220146087" /></p><h3 id="免费"><a class="markdownIt-Anchor" href="#免费"></a> 免费</h3><p>所谓的免费指加入<a href="https://www.upyun.com/league">又拍云联盟</a>后所发放的代金券，当前说多不多，说少不少。这点流量对象我这种小站来说应该算是够了。</p><p><img src="https://file.acs.pw/picGo/2022/03/18/20220318220436.png" alt="image-20220318220436608" /></p><p><img src="https://file.acs.pw/picGo/2022/03/18/20220318220519.png" alt="image-20220318220519367" /></p><h3 id="源站迁移"><a class="markdownIt-Anchor" href="#源站迁移"></a> 源站迁移</h3><p>说到源站迁移，开启这个功能主要是想通过此功能减少 cdn 回源时的这部分流量。</p><p>不过如果 cdn 开启“永久”缓存的话其实我个人认为这个也是无所谓的。毕竟第一次回源是必然的。</p><p><img src="https://file.acs.pw/picGo/2022/03/19/103600c384d7-a77950096b7853c7b8539217916716a1.png" alt="image-20220319103600247" /></p><h3 id="边缘规则"><a class="markdownIt-Anchor" href="#边缘规则"></a> 边缘规则</h3><p>这部分我主要是实施一些限速和重定向。例如：将访问 rss 或者 atom 文件重定向到镜像站。原因很简单，一般访问这两个文件的要么是爬虫，要么是订阅软件，正常用户很少会拿着这个文件来看。因此将其重定向到其他地方 避免消耗 CDN 流量。</p><h2 id="github-source-自动化"><a class="markdownIt-Anchor" href="#github-source-自动化"></a> GitHub Source 自动化</h2><p>此部分详细介绍小康的 GitHub 源文件仓库 actions 文件。</p><p>此部分所实现的功能是构建静态文件，并推送到 GitHub pages 仓库；同时删除掉又拍云源站资源迁移的文件和又拍云缓存的 CDN。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Blog CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>14.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 1. 检查master分支        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 2. 设置Node.js        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> matrix.node<span class="token punctuation">-</span>version <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 3. 缓存        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v2        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>runner.OS<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">-</span>$<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>hashFiles('<span class="token important">**/yarn.lock')</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 4. 安装插件        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> 'true'        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          export TZ='Asia/Shanghai'          yarn install</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 5. 生成页面并压缩        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          export TZ='Asia/Shanghai'          yarn run build          cp -r ./static ./public          cp sync.yml ./public/.github/workflows/          cp package-public.json ./public/package.json</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 6. 部署页面        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4.2.5        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">branch</span><span class="token punctuation">:</span> master          <span class="token key atrule">folder</span><span class="token punctuation">:</span> public          <span class="token key atrule">repository-name</span><span class="token punctuation">:</span> kkfive/kkfive.github.io          <span class="token key atrule">clean</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">ssh-key</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 7. 刷新又拍云缓存        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">UPYUN_SERVICES</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UPYUN_SERVICES <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">UPYUN_OPERATOR</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UPYUN_OPERATOR <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">UPYUN_PASSWORD</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UPYUN_PASSWORD <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">UPYUN_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.UPYUN_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          ls          node upyun.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步中<code>sync.yml</code>是 GitHub pages 仓库中用于将页面同步到其他仓库的 actions 配置文件。</p><p><code>package-public.json</code>文件则是运行<code>JavaScript</code>脚本时所需要的依赖项。</p><p>第七步中刷新又拍云缓存脚本参考如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> upyun <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'upyun'</span><span class="token punctuation">)</span><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serviceName <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">UPYUN_SERVICES</span><span class="token keyword">const</span> operatorName <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">UPYUN_OPERATOR</span><span class="token keyword">const</span> operatorPassword <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">UPYUN_PASSWORD</span><span class="token keyword">const</span> cacheToken <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">UPYUN_TOKEN</span><span class="token keyword">const</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">upyun<span class="token punctuation">.</span>Service</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> operatorName<span class="token punctuation">,</span> operatorPassword<span class="token punctuation">)</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">upyun<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">listDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">getFileList</span><span class="token punctuation">(</span>dir <span class="token operator">+</span> item<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        client<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>dir <span class="token operator">+</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dir <span class="token operator">+</span> item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">删除结果：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  axios    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>      <span class="token string">'https://api.upyun.com/buckets/purge/batch'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">noif</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">source_url</span><span class="token operator">:</span> <span class="token string">'https://www.antmoe.com/*'</span> <span class="token comment">// 替换成你的域名</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token string">'Bearer '</span> <span class="token operator">+</span> cacheToken        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此脚本需要安装依赖<code>upyun</code>和<code>axios</code>。获取又拍云 TOKEN 参考：<a href=""></a></p></blockquote><h2 id="github-pages-同步页面"><a class="markdownIt-Anchor" href="#github-pages-同步页面"></a> GitHub Pages 同步页面</h2><p>此文中距离的文件内容可能有调整，请以<a href="https://github.com/kkfive/kkfive.github.io/blob/master/.github/workflows/sync.yml">sync.yml</a>为准。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> sync<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token key atrule">matrix</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>14.x<span class="token punctuation">]</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 1. 检查master分支        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 2. Sync to Gitee        <span class="token key atrule">uses</span><span class="token punctuation">:</span> wearerequired/git<span class="token punctuation">-</span>mirror<span class="token punctuation">-</span>action@master        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token comment"># 注意在 Settings->Secrets 配置 DEPLOY_KEY</span>          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 注意替换为你的 GitHub 源仓库地址</span>          <span class="token key atrule">source-repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>kkfive/kkfive.github.io.git          <span class="token comment"># 注意替换为你的 Gitee 目标仓库地址</span>          <span class="token key atrule">destination-repo</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>kkfive/kkfive.git      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 3. 自动部署gitee        <span class="token key atrule">uses</span><span class="token punctuation">:</span> yanglbme/gitee<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>action@master        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 注意替换为你的 Gitee 用户名</span>          <span class="token key atrule">gitee-username</span><span class="token punctuation">:</span> kkfive          <span class="token comment"># 注意在 Settings->Secrets 配置 GITEE_PASSWORD</span>          <span class="token key atrule">gitee-password</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITEE_PASSWORD <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>          <span class="token comment"># 注意替换为你的 Gitee 仓库</span>          <span class="token key atrule">gitee-repo</span><span class="token punctuation">:</span> kkfive/kkfive      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 4. Sync to Bitbucket        <span class="token key atrule">uses</span><span class="token punctuation">:</span> wearerequired/git<span class="token punctuation">-</span>mirror<span class="token punctuation">-</span>action@master        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token comment"># 注意在 Settings->Secrets 配置 DEPLOY_KEY</span>          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># 注意替换为你的 GitHub 源仓库地址</span>          <span class="token key atrule">source-repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>kkfive/kkfive.github.io.git          <span class="token comment"># 注意替换为你的 bitbucket 目标仓库地址</span>          <span class="token key atrule">destination-repo</span><span class="token punctuation">:</span> git@bitbucket.org<span class="token punctuation">:</span>DreamyTZK/www.antmoe.com.git      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 5. Sync to Telegram        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">BOT_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.BOT_TOKEN <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          yarn install          node sync-message.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 gitee 部署需要一定的时间，因此第一步我选择了优先推送 gitee，并在推送完成后自动部署 gitee。然后在推送到其他镜像仓库。</p><p>至于 vercel、cloudflare page 则是自动关联 GitHub 仓库无需主动推送。因此在 actions 中可以不用对其操作。</p><p>第五步主动推送更新内容到 Telegram，此步骤为个人所需。原因很简单，我一直想要一个更新日志的记录，但每次部署都需要手动去更新一下页面属实是不舒服。</p><p>因此我决定通过脚本自动获取文章或页面的<code>update</code>与上一次更新日期做比对，如果不相同则说明有更新。参考脚本如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> axios <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> changeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">isToday</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> todaysDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> todaysDate<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getOldChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://kkfive.gitee.io/changePosts.json'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>item<span class="token punctuation">,</span>        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">update</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>update<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">checkInOldList</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> oldList</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> oldList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">oldItem</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldItem<span class="token punctuation">.</span>link <span class="token operator">===</span> item<span class="token punctuation">.</span>link<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>oldItem<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>oldItem<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>update<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// data.title = data.title.toLowerCase();</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>layout <span class="token operator">===</span> <span class="token string">'post'</span> <span class="token operator">||</span> data<span class="token punctuation">.</span>layout <span class="token operator">===</span> <span class="token string">'page'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> dateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>date<span class="token punctuation">)</span>    <span class="token keyword">const</span> updateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>update<span class="token punctuation">)</span>    changeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> data<span class="token punctuation">.</span>title<span class="token punctuation">,</span>      <span class="token literal-property property">date</span><span class="token operator">:</span> dateTime<span class="token punctuation">,</span>      <span class="token literal-property property">update</span><span class="token operator">:</span> updateTime<span class="token punctuation">,</span>      <span class="token literal-property property">link</span><span class="token operator">:</span> data<span class="token punctuation">.</span>permalink    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'before_exit'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> oldListData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getOldChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> resultList <span class="token operator">=</span> changeList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isToday</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkInOldList</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> oldListData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前对象是今天更新的'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hexo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>public_dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/changePosts.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>resultList<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将此文件保存在博客根目录下的<code>scripts</code>目录下即可（没有就新建）。文件名任意即可。</p></blockquote><p>为了实现更新日志的功能，避免尴尬推送，推送时还需要读取一次用于记录更新记录的文件。</p><p><img src="https://file.acs.pw/picGo/2022/03/18/20220318222820.png" alt="image-20220318222820227" /></p><p>详情效果参考：<a href="https://t.me/kkfiveblog">小康的部落格</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Slimbot <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'slimbot'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> updateMessage <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./update.md'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">BOT_TOKEN</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token keyword">const</span> slimbot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Slimbot</span><span class="token punctuation">(</span><span class="token constant">BOT_TOKEN</span><span class="token punctuation">)</span><span class="token keyword">const</span> chatID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1001330491561</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">parse_mode</span><span class="token operator">:</span> <span class="token string">'Markdown'</span><span class="token punctuation">,</span>  <span class="token literal-property property">disable_web_page_preview</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">disable_notification</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> imageRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:!\[(.*?)\]\((.*?)\))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token keyword">const</span> contentFile <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./changePosts.json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> contentJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>contentFile<span class="token punctuation">)</span><span class="token keyword">let</span> content <span class="token operator">=</span> updateMessage<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>contentJson<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>link<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[小康博客](https://www.antmoe.com)正在重新部署，建议30分钟后查看</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> emptyContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[小康博客](https://www.antmoe.com)又触发部署了呢,不过并没有更新文章和页面,也没有更新日志。可能是因为[小康](https://www.antmoe.com)太勤快忘了写吧！</span><span class="token template-punctuation string">`</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>contentJson<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  slimbot<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>chatID<span class="token punctuation">,</span> content<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  slimbot<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>chatID<span class="token punctuation">,</span> emptyContent<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/Hexo/">Hexo</category>
      
      <category domain="https://www.antmoe.com/categories/Hexo/%E4%BC%98%E9%9B%85%E9%83%A8%E7%BD%B2/">优雅部署</category>
      
      
      <category domain="https://www.antmoe.com/tags/Hexo/">Hexo</category>
      
      
      <comments>https://www.antmoe.com/posts/41164f83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>前端Coder手中的Docker</title>
      <link>https://www.antmoe.com/posts/13d68ef9/</link>
      <guid>https://www.antmoe.com/posts/13d68ef9/</guid>
      <pubDate>Sat, 05 Mar 2022 06:06:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://file.acs.pw/picGo/2021/2/28/aa9db60341e31b3f5df4a8b3480c94d1.png" alt="image-20210228175240489" /></p><h2 id="在服务器中安装docker"><a class="markdownIt-Anchor" href="#在服务器中安装docker"></a> 在服务器中安装Docker</h2><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL get.docker.com -o get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后的推荐操作</p><ol><li><p>启动docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建docker用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将当前用户加入docker组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">docker</span> <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试docker安装是否正确</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="修改镜像"><a class="markdownIt-Anchor" href="#修改镜像"></a> 修改镜像</h2><ol><li><p>登录<a href="https://cr.console.aliyun.com/?spm=5176.12818093.custom--ali--widget-home-product-recent.dre1.1c8316d0Tujp2R">阿里容器镜像服务</a></p></li><li><p>查看加速地址</p><p><img src="https://file.acs.pw/picGo/2021/2/27/4ee8ed340343e6d5b82db27657dfd308.png" alt="image-20210227190110321" /></p></li><li><p>设置加速服务</p><ul><li><p>创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建文件并写入内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://lz2nib3q.mirror.aliyuncs.com"]&#125;EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载及重启Docker服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看镜像地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="镜像常用命令"><a class="markdownIt-Anchor" href="#镜像常用命令"></a> 镜像常用命令</h2><h3 id="查看本机中所有镜像"><a class="markdownIt-Anchor" href="#查看本机中所有镜像"></a> 查看本机中所有镜像</h3><div class="tabs" id="images1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images1-1">命令</button></li><li class="tab"><button type="button" data-href="#images1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images1-1"><p>命令<code>docker images [镜像名]</code>可查看当前镜像。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images1-2"><ul><li><p><code>-q</code></p><p>只显示镜像id</p></li><li><p><code>-a</code></p><p>列出所有镜像（包含中间映像层）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="搜索镜像"><a class="markdownIt-Anchor" href="#搜索镜像"></a> 搜索镜像</h3><div class="tabs" id="images-search1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-search1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-search1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-search1-1"><p>命令格式：<code>docker search [options] 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-search1-2"><ul><li><p><code>-s</code></p><p>列出收藏数不少于指定值的镜像</p></li><li><p><code>--no-trunc</code></p><p>显示完整的镜像信息</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="从仓库下载镜像"><a class="markdownIt-Anchor" href="#从仓库下载镜像"></a> 从仓库下载镜像</h3><div class="tabs" id="images-pull1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-pull1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-pull1-2">参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-pull1-1"><p>命令格式：<code>docker pull 镜像名[:TAG|@DIGEST]</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-pull1-2"><p>可以指定TAG或者DIGEST</p><ul><li><p>TAG</p><p>标签名</p></li><li><p>DIGEST</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="删除镜像"><a class="markdownIt-Anchor" href="#删除镜像"></a> 删除镜像</h3><div class="tabs" id="images-rmi1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-rmi1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-rmi1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-rmi1-1"><p>命令格式：<code>docker rmi 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-rmi1-2"><p>可以指定TAG或者DIGEST</p><ul><li><p><code>-f</code></p><p>强制删除</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="容器常用命令"><a class="markdownIt-Anchor" href="#容器常用命令"></a> 容器常用命令</h2><h3 id="运行容器"><a class="markdownIt-Anchor" href="#运行容器"></a> 运行容器</h3><div class="tabs" id="docker-run1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-run1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-run1-2">选项</button></li><li class="tab"><button type="button" data-href="#docker-run1-3">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-run1-1"><p>镜像名新建并启动容器</p><p>命令格式：<code>docker run [选项] 镜像名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-run1-2"><ul><li><p><code>--name</code></p><p>别名为容器起一个名字</p></li><li><p><code>-d</code></p><p>启动守护式容器（在后台启动容器）</p></li><li><p><code>-p</code></p><p>映射端口号：原始端口号 指定端口号启动</p></li><li><p><code>--network</code></p><p>指定使用的网桥</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-run1-3"><pre class="line-numbers language-none"><code class="language-none">docker run -it --name myTomcat -p 8888:8080 tomcatdocker run -d --name myTomcat -P tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="查看运行的容器"><a class="markdownIt-Anchor" href="#查看运行的容器"></a> 查看运行的容器</h3><div class="tabs" id="docker-ps1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-ps1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-ps1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-ps1-1"><p>列出所有正在运行的容器，命令格式：<code>docker ps</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-ps1-2"><ul><li><p><code>-a</code></p><p>正在运行的和历史运行过的容器</p></li><li><p><code>-q</code></p><p>静默模式，只显示容器编号</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="停止关闭重启容器"><a class="markdownIt-Anchor" href="#停止关闭重启容器"></a> 停止|关闭|重启容器</h3><ul><li><p>开启容器</p><p><code>docker start 容器名字或者容器id</code></p></li><li><p>重启容器</p><p><code>docker restart 容器名或者容器id</code></p></li><li><p>正常停止容器运行</p><p><code>docker stop 容器名或者容器id</code></p></li><li><p>立即停止容器运行</p><p><code>docker kill 容器名或者容器id</code></p></li></ul><h3 id="删除容器"><a class="markdownIt-Anchor" href="#删除容器"></a> 删除容器</h3><ul><li><p>删除单个容器</p><p><code>docker rm -f 容器id和容器名</code></p></li><li><p>删除所有容器</p><p><code>docker rm -f $(docker ps -aq)</code></p></li></ul><h3 id="查看容器内进程"><a class="markdownIt-Anchor" href="#查看容器内进程"></a> 查看容器内进程</h3><p><code>docker top 容器id或者容器名</code></p><h3 id="查看容器内部细节"><a class="markdownIt-Anchor" href="#查看容器内部细节"></a> 查看容器内部细节</h3><p><code>docker inspect 容器id</code></p><h3 id="查看容器运行日志"><a class="markdownIt-Anchor" href="#查看容器运行日志"></a> 查看容器运行日志</h3><div class="tabs" id="docker-logs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#docker-logs1-1">命令</button></li><li class="tab"><button type="button" data-href="#docker-logs1-2">选项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="docker-logs1-1"><p>命令格式：<code>docker logs [OPTIONS] 容器id或容器名</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="docker-logs1-2"><ul><li><p><code>-t</code></p><p>加入时间戳</p></li><li><p><code>-f</code></p><p>跟随最新的日志打印</p></li><li><p><code>--tail</code></p><p>数字显示最后多少条</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="进入容器内部"><a class="markdownIt-Anchor" href="#进入容器内部"></a> 进入容器内部</h3><div class="tabs" id="images-ps1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#images-ps1-1">命令</button></li><li class="tab"><button type="button" data-href="#images-ps1-2">选项</button></li><li class="tab"><button type="button" data-href="#images-ps1-3">示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="images-ps1-1"><p>命令格式：<code>docker exec [options] 容器id 容器内命令</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-ps1-2"><ul><li><p><code>-i</code></p><p>以交互模式运行容器，通常与-t一起使用</p></li><li><p><code>-t</code></p><p>分配一个伪终端    shell窗口   bash</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="images-ps1-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="容器和宿主机之间复制文件"><a class="markdownIt-Anchor" href="#容器和宿主机之间复制文件"></a> 容器和宿主机之间复制文件</h3><ul><li><p>将宿主机复制到容器内部</p><p><code>docker cp 文件|目录 容器id:容器路径</code></p></li><li><p>将容器内资源拷贝到主机上</p><p><code>docker cp 容器id:容器内资源路径 宿主机目录路径</code></p></li></ul><h3 id="数据卷volum实现与宿主机共享目录"><a class="markdownIt-Anchor" href="#数据卷volum实现与宿主机共享目录"></a> 数据卷（volum）实现与宿主机共享目录</h3><p>命令：<code>docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</code>，宿主机与容器文件是互通的。</p><p><code>docker run -v 宿主机的路径|任意别名:/容器内的路径:ro 镜像名</code>，容器机不能修改宿主机的文件内容。</p><div class="note danger flat"><ul><li>如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</li><li>如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中</li></ul></div><h3 id="打包镜像"><a class="markdownIt-Anchor" href="#打包镜像"></a> 打包镜像</h3><p>命令：<code>docker save 镜像名:tag -o 名称.tar</code></p><h3 id="载入镜像"><a class="markdownIt-Anchor" href="#载入镜像"></a> 载入镜像</h3><p>命令：<code>docker load -i 名称.tar</code></p><h3 id="容器打包成新的镜像"><a class="markdownIt-Anchor" href="#容器打包成新的镜像"></a> 容器打包成新的镜像</h3><p>命令：<code>docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot; （容器id或者名称）打包的镜像名称:标签</code></p><h2 id="容器间通信"><a class="markdownIt-Anchor" href="#容器间通信"></a> 容器间通信</h2><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png" alt="image-20201125105847896" /></p><h3 id="网桥"><a class="markdownIt-Anchor" href="#网桥"></a> 网桥</h3><ol><li><p>查看默认网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">rm</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除没有使用的网桥</p><pre class="line-numbers language-none"><code class="language-none">docker network prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile"></a> Dockerfile</h2><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png" alt="image-20200404111908085" /></p><p>通过架构图可以看出通过DockerFile可以直接构建镜像</p><p><img src="https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png" alt="image-20200603181253804" /></p><p>打包字段详情见官方：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><table><thead><tr><th style="text-align:center">保留字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center"><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center"><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center"><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td style="text-align:center"><strong>WORKDIR</strong></td><td style="text-align:center"><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center"><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td style="text-align:center"><strong>ADD</strong></td><td style="text-align:center"><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center"><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td style="text-align:center"><strong>VOLUME</strong></td><td style="text-align:center"><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td style="text-align:center"><strong>CMD</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h3 id="from-命令"><a class="markdownIt-Anchor" href="#from-命令"></a> FROM 命令</h3><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM  &lt;image&gt;FROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latestFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="run-命令"><a class="markdownIt-Anchor" href="#run-命令"></a> RUN 命令</h3><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)RUN echo helloRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)RUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="expose-命令"><a class="markdownIt-Anchor" href="#expose-命令"></a> EXPOSE 命令</h3><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcpEXPOSE 80&#x2F;udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="cmd-命令"><a class="markdownIt-Anchor" href="#cmd-命令"></a> CMD 命令</h3><ul><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)CMD command param1 param2 (shell form)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="workdir-命令"><a class="markdownIt-Anchor" href="#workdir-命令"></a> WORKDIR 命令</h3><ul><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">WORKDIR &#x2F;path&#x2F;to&#x2F;workdirWORKDIR &#x2F;aWORKDIR bWORKDIR c&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="env-命令"><a class="markdownIt-Anchor" href="#env-命令"></a> ENV 命令</h3><ul><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV &lt;key&gt; &lt;value&gt;ENV &lt;key&gt;&#x3D;&lt;value&gt; ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="add-命令"><a class="markdownIt-Anchor" href="#add-命令"></a> ADD 命令</h3><ul><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件ADD hom?.txt &#x2F;mydir&#x2F;   通配符添加ADD test.txt relativeDir&#x2F;  可以指定相对路径ADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径ADD url <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="copy-命令"><a class="markdownIt-Anchor" href="#copy-命令"></a> COPY 命令</h3><ul><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY src destCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="volume-命令"><a class="markdownIt-Anchor" href="#volume-命令"></a> VOLUME 命令</h3><ul><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">VOLUME [&quot;&#x2F;data&quot;]VOLUME &#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="entrypoint命令"><a class="markdownIt-Anchor" href="#entrypoint命令"></a> ENTRYPOINT命令</h3><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">  [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br />CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h2 id="docker-compose"><a class="markdownIt-Anchor" href="#docker-compose"></a> docker-compose</h2><h4 id="安装与卸载"><a class="markdownIt-Anchor" href="#安装与卸载"></a> 安装与卸载</h4><h4 id="linux系统"><a class="markdownIt-Anchor" href="#linux系统"></a> Linux系统</h4><p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="linux手动下载"><a class="markdownIt-Anchor" href="#linux手动下载"></a> Linux手动下载</h4><ol><li><p>进入<a href="https://github.com/docker/compose/releases">GitHub</a>下载</p></li><li><p>将文件上传到服务器（Linux机器）</p></li><li><p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为其赋予可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="macos-windows"><a class="markdownIt-Anchor" href="#macos-windows"></a> macos、windows</h4><p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p><h4 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件基本格式"><a class="markdownIt-Anchor" href="#文件基本格式"></a> 文件基本格式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span> <span class="token comment"># 官方网址 https://docs.docker.com/compose/compose-file/</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">tomcat01</span><span class="token punctuation">:</span> <span class="token comment">#服务名称（id）</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat01 <span class="token comment"># 相当于run 的 --name</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像  相当于run image</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系  相当于run -p</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享  相当于run -v</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps01<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥     相当于run --networ</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">tomcat02</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat02    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系</span>      <span class="token punctuation">-</span> <span class="token string">"8081:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps02<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.32    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysqldata<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> mysqlconf<span class="token punctuation">:</span>/etc/mysql    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=root    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>5.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redisdata<span class="token punctuation">:</span>/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"redis-server --appendonly yes"</span> <span class="token comment">#run 镜像之后用来覆盖容器内容默认命令</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token comment">#声明上面服务所使用的自动创建的卷名</span>  <span class="token key atrule">tomcatwebapps01</span><span class="token punctuation">:</span> <span class="token comment">#声明指令的卷名  compose自动创建该卷名但是会在之前加入项目名</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>    <span class="token comment">#使用自定义卷名</span>      false       <span class="token comment">#true确定使用指定卷名  注意:一旦使用外部自定义卷名启动服务之前必须手动创建</span>  <span class="token key atrule">tomcatwebapps02</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqldata</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqlconf</span><span class="token punctuation">:</span>  <span class="token key atrule">redisdata</span><span class="token punctuation">:</span><span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#定义服务用到桥</span>  <span class="token key atrule">hello</span><span class="token punctuation">:</span> <span class="token comment">#定义上面的服务用到的网桥名称 默认创建就是 bridge</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token boolean important">true</span>   <span class="token comment">#使用外部指定网桥  注意:网桥必须存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令选项"><a class="markdownIt-Anchor" href="#命令选项"></a> 命令选项</h3><div class="tabs" id="options"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#options-1">项目、配置文件</button></li><li class="tab"><button type="button" data-href="#options-2">网络特性</button></li><li class="tab"><button type="button" data-href="#options-3">日志输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="options-1"><ul><li><p><code>-f, --file FILE</code></p><p>指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p></li><li><p><code>-p, --project-name NAME</code></p><p>指定项目名称，默认将使用所在目录名称作为项目名。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-2"><ul><li><p><code>--x-networking</code></p><p>使用 Docker 的可拔插网络后端特性</p></li><li><p><code>--x-network-driver DRIVER</code></p><p>指定网络后端的驱动，默认为 <code>bridge</code></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-3"><ul><li><p><code>--verbose</code></p><p>输出更多调试信息。</p></li><li><p><code>-v, --version</code></p><p>打印版本并退出。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="命令使用说明"><a class="markdownIt-Anchor" href="#命令使用说明"></a> 命令使用说明</h3><h3 id="up"><a class="markdownIt-Anchor" href="#up"></a> up</h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><blockquote><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p><em>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</em></p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></blockquote><h3 id="down"><a class="markdownIt-Anchor" href="#down"></a> down</h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h3 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h3><p>进入指定的容器。</p><h3 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> ps</h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。<code>-q</code>可以只打印容器的id信息</p><h3 id="restart"><a class="markdownIt-Anchor" href="#restart"></a> restart</h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h3 id="rm"><a class="markdownIt-Anchor" href="#rm"></a> rm</h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h3 id="start"><a class="markdownIt-Anchor" href="#start"></a> start</h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h3 id="stop"><a class="markdownIt-Anchor" href="#stop"></a> stop</h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top"><a class="markdownIt-Anchor" href="#top"></a> top</h3><p>查看各个服务容器内运行的进程。</p><h3 id="pause"><a class="markdownIt-Anchor" href="#pause"></a> pause</h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停服务</p><h3 id="unpause"><a class="markdownIt-Anchor" href="#unpause"></a> unpause</h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9E%84%E5%BB%BA/">部署与构建</category>
      
      <category domain="https://www.antmoe.com/categories/%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%9E%84%E5%BB%BA/Docker/">Docker</category>
      
      
      <category domain="https://www.antmoe.com/tags/Docker/">Docker</category>
      
      <category domain="https://www.antmoe.com/tags/docker-compose/">docker-compose</category>
      
      
      <comments>https://www.antmoe.com/posts/13d68ef9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>面向Coding的Git</title>
      <link>https://www.antmoe.com/posts/f59ea689/</link>
      <guid>https://www.antmoe.com/posts/f59ea689/</guid>
      <pubDate>Wed, 02 Mar 2022 03:06:00 GMT</pubDate>
      
        
        
          
          
      <description></description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>此篇文章记录在日常 coding 的操作以及一些必要的 git 概念</p><h2 id="git的初始化设置"><a class="markdownIt-Anchor" href="#git的初始化设置"></a> git的初始化设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>config的三个作用域,缺省等同于<code>local</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --local <span class="token comment">## local只对某个仓库有效</span><span class="token function">git</span> config --global <span class="token comment">## global对当前用户所有仓库有效</span><span class="token function">git</span> config --system <span class="token comment">## system对系统所有登录的用户有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示config的配置，加<code>--list</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --list --local <span class="token comment">## local只对某个仓库有效</span><span class="token function">git</span> config --list --global <span class="token comment">## global对当前用户所有仓库有效</span><span class="token function">git</span> config --list --system <span class="token comment">## system对系统所有登录的用户有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看提交记录"><a class="markdownIt-Anchor" href="#查看提交记录"></a> 查看提交记录</h2><div class="tabs" id="git-log"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-log-1">只看变更列表</button></li><li class="tab"><button type="button" data-href="#git-log-2">只看最近N次</button></li><li class="tab"><button type="button" data-href="#git-log-3">只看当前分支历史</button></li><li class="tab"><button type="button" data-href="#git-log-4">全部分支历史</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-log-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220144.png" alt="image-20220305220137649" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log -n2 --oneline <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>n2表示所有分支最近两个。</p></blockquote><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220229.png" alt="image-20220305220229829" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305220412.png" alt="image-20220305220412495" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-log-4"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="提交记录"><a class="markdownIt-Anchor" href="#提交记录"></a> 提交记录</h2><h3 id="修改commit的message"><a class="markdownIt-Anchor" href="#修改commit的message"></a> 修改commit的message</h3><p><strong>此操作不建议对已发布到线上的commit做修改。</strong></p><div class="tabs" id="git-commit-message"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-commit-message-1">修改最新的commit</button></li><li class="tab"><button type="button" data-href="#git-commit-message-2">修改老旧commit</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-commit-message-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305222413.png" alt="image-20220305222413228" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-commit-message-2"><blockquote><p>修改老旧commit的message,需要使用其上一个commitId。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reabase -i commitId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305222826.png" alt="image-20220305222826712" /></p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223007.png" alt="image-20220305223007339" /></p><p>在新窗口中重新编辑commit信息即可。</p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223056.png" alt="image-20220305223056685" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="将多个commit整理成一个commit"><a class="markdownIt-Anchor" href="#将多个commit整理成一个commit"></a> 将多个commit整理成一个commit</h3><div class="tabs" id="git-commit-rebase"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-commit-rebase-1">合并连续的commit</button></li><li class="tab"><button type="button" data-href="#git-commit-rebase-2">合并非连续的commit</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-commit-rebase-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i commit的父哈希值<span class="token comment"># 然后将需要合并的改为s。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305223844.png" alt="image-20220305223844839" /></p><p>将除第一个外需要合并的修改为<code>s</code>即可进行编辑信息。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-commit-rebase-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase -i commit的父哈希值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入编辑页面后，将需要合并的写在一起。如果没有自动出现则手动键入即可。需要删除的使用<code>s</code>命令，保留的使用<code>pick</code>。</p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305224945.png" alt="image-20220305224945894" /></p><p><img src="https://file.acs.pw/picGo/2022/03/05/20220305225107.png" alt="image-20220305225107076" /></p><p>接下来编辑commit信息即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><ul><li>pick：保留该commit（缩写:p）</li><li>reword：保留该commit，但我需要修改该commit的注释（缩写:r）</li><li>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）</li><li>squash：将该commit和前一个commit合并（缩写:s）</li><li>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）</li><li>exec：执行shell命令（缩写:x）</li><li>drop：我要丢弃该commit（缩写:d）</li></ul></blockquote><h2 id="操作暂存区和工作区"><a class="markdownIt-Anchor" href="#操作暂存区和工作区"></a> 操作暂存区和工作区</h2><h3 id="恢复文件变更"><a class="markdownIt-Anchor" href="#恢复文件变更"></a> 恢复文件变更</h3><ol><li>编辑了某文件，但想放弃修改，恢复至与暂存区一致</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="恢复暂存区"><a class="markdownIt-Anchor" href="#恢复暂存区"></a> 恢复暂存区</h3><div class="tabs" id="git-reset"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-reset-1">整个暂存区</button></li><li class="tab"><button type="button" data-href="#git-reset-2">部分文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-reset-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-reset-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD -- fileName1 fileName2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分支操作"><a class="markdownIt-Anchor" href="#分支操作"></a> 分支操作</h2><h3 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h3><div class="tabs" id="git-branch-list"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-branch-list-1">所有本地分支</button></li><li class="tab"><button type="button" data-href="#git-branch-list-2">远程所有分支</button></li><li class="tab"><button type="button" data-href="#git-branch-list-3">本地与远程分支</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-branch-list-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-list-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-list-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="新建分支"><a class="markdownIt-Anchor" href="#新建分支"></a> 新建分支</h3><div class="tabs" id="git-branch-new"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-branch-new-1">新建不切换</button></li><li class="tab"><button type="button" data-href="#git-branch-new-2">新建并切换</button></li><li class="tab"><button type="button" data-href="#git-branch-new-3">指定commit创建</button></li><li class="tab"><button type="button" data-href="#git-branch-new-4">新建一个指向tag的分支</button></li><li class="tab"><button type="button" data-href="#git-branch-new-5">指定的远程分支建立追踪关系</button></li><li class="tab"><button type="button" data-href="#git-branch-new-6">指定的远程分支建立追踪关系</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-branch-new-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-4"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-5"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-branch-new-6"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --track <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="切换分支"><a class="markdownIt-Anchor" href="#切换分支"></a> 切换分支</h3><div class="tabs" id="git-checkout"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-checkout-1">切换到指定分支，并更新工作区</button></li><li class="tab"><button type="button" data-href="#git-checkout-2">切换到上一个分支</button></li><li class="tab"><button type="button" data-href="#git-checkout-3">指定commit创建</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-checkout-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-checkout-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-checkout-3"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="代码合并"><a class="markdownIt-Anchor" href="#代码合并"></a> 代码合并</h2><h3 id="选择几个commit"><a class="markdownIt-Anchor" href="#选择几个commit"></a> 选择几个commit</h3><blockquote><p>此操作建议将最底层开始选择,例如：<code>git cherry-pick A B</code>，其中A的提交必须早于B的提交。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转移连续的提交A到B，并且包含A</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick A^<span class="token punctuation">..</span>B <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="merge合并"><a class="markdownIt-Anchor" href="#merge合并"></a> merge合并</h3><blockquote><p>此合并方式会生成一个新的commit信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>branchName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2><h3 id="查看tag"><a class="markdownIt-Anchor" href="#查看tag"></a> 查看tag</h3><div class="tabs" id="git-tag-show"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-show-1">所有tag</button></li><li class="tab"><button type="button" data-href="#git-tag-show-2">查看tag信息</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-show-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-show-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tagName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="新建tag"><a class="markdownIt-Anchor" href="#新建tag"></a> 新建tag</h3><div class="tabs" id="git-tag-create"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-create-1">在当前commit新建</button></li><li class="tab"><button type="button" data-href="#git-tag-create-2">指定commit新建</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-create-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagName<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-create-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tagName<span class="token operator">></span> <span class="token operator">&lt;</span>commitId<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="删除tag"><a class="markdownIt-Anchor" href="#删除tag"></a> 删除tag</h3><div class="tabs" id="git-tag-delete"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-delete-1">删除本地tag</button></li><li class="tab"><button type="button" data-href="#git-tag-delete-2">删除远程tag</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-delete-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-delete-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="提交tag"><a class="markdownIt-Anchor" href="#提交tag"></a> 提交tag</h3><div class="tabs" id="git-tag-push"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#git-tag-push-1">提交所有tag</button></li><li class="tab"><button type="button" data-href="#git-tag-push-2">提交指定tag</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="git-tag-push-1"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="git-tag-push-2"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="常见场景"><a class="markdownIt-Anchor" href="#常见场景"></a> 常见场景</h2><h3 id="开发中临时加塞了紧急任务"><a class="markdownIt-Anchor" href="#开发中临时加塞了紧急任务"></a> 开发中临时加塞了紧急任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将当前状态暂存起来</span><span class="token function">git</span> stash<span class="token comment"># 将之前的暂存信息弹出来，并会保存暂存队列</span><span class="token function">git</span> stash apply<span class="token comment"># 将之前的暂存信息弹出来，不保存暂存队列</span><span class="token function">git</span> stash pop<span class="token comment"># 查看暂存队列</span><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令脑图"><a class="markdownIt-Anchor" href="#常用命令脑图"></a> 常用命令脑图</h2><p><img src="https://file.acs.pw/picGo/2022/03/06/20220306185004.svg" alt="git" /></p>]]></content:encoded>
      
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/">技术学习</category>
      
      <category domain="https://www.antmoe.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/Git/">Git</category>
      
      
      <category domain="https://www.antmoe.com/tags/Git/">Git</category>
      
      
      <comments>https://www.antmoe.com/posts/f59ea689/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
