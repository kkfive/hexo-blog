const origin=[],cdn={gh:{jsdelivr:"https://cdn.jsdelivr.net/gh",pigax_jsd:"https://u.pigax.cn/gh",pigax_chenyfan_jsd:"https://cdn-jsd.pigax.cn/gh",tianli:"https://cdn1.tianli0.top/gh"},combine:{jsdelivr:"https://cdn.jsdelivr.net/combine",pigax_jsd:"https://u.pigax.cn/combine",pigax_chenyfan_jsd:"https://cdn-jsd.pigax.cn/combine",tianli:"https://cdn1.tianli0.top/combine"},npm:{eleme:"https://npm.elemecdn.com",jsdelivr:"https://cdn.jsdelivr.net/npm",zhimg:"https://unpkg.zhimg.com",unpkg:"https://unpkg.com",pigax_jsd:"https://u.pigax.cn/npm",pigax_unpkg:"https://unpkg.pigax.cn",pigax_chenyfan_jsd:"https://cdn-jsd.pigax.cn/npm",tianli:"https://cdn1.tianli0.top/npm"}};async function progress(n){return new Response(await n.arrayBuffer(),{status:n.status,headers:n.headers})}function handleRequest(n){const t=[],e=n.url;let s=new URL(e);const i=s.pathname.split("/")[1];for(const n in cdn)if(n===i)for(const e in cdn[n]){const a=cdn[n][e]+s.pathname.replace("/"+i,"");t.push(a)}if(t.length)return fetchAny(t);let a=[location.origin,...origin];return a.find((n=>{const{hostname:t}=new URL(n),s=new RegExp(t);return e.match(s)}))?(a=a.map((n=>n+s.pathname+s.search)),fetchAny(a)):fetch(e).then(progress)}function fetchAny(n){const t=new AbortController,e=t.signal,s=n.map((n=>new Promise((async(s,i)=>{fetch(n,{signal:e}).then(progress).then((n=>{200!==n.status&&i(null),t.abort(),s(n)})).catch((()=>i(null)))}))));return Promise.any(s).then((n=>n)).catch((()=>null))}self.addEventListener("install",(async n=>{await self.skipWaiting()})),self.addEventListener("activate",(async n=>{await self.clients.claim()})),self.addEventListener("fetch",(async n=>{handleRequest(n.request).then((t=>n.respondWith(t))).catch((()=>0))}));