{"title":"二、JSON数据格式","slug":"日常学习/技术相关/大前端/Ajax异步交互与跨域访问/1. Ajax基础/2. JSON数据格式","date":"2020-08-22T05:58:01.000Z","updated":"2022-02-21T06:22:27.472Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/Ajax异步交互与跨域访问/1. Ajax基础/2. JSON数据格式.json","excerpt":null,"covers":["https://files.alexhchu.com/2020/08/22/64bc082feff64.png","https://files.alexhchu.com/2020/08/22/640098ab5054b.png","https://files.alexhchu.com/2020/08/22/e23e7b009ea86.png"],"content":"<h2 id=\"json语法规则\"><a class=\"markdownIt-Anchor\" href=\"#json语法规则\"></a> JSON语法规则</h2>\n<ol>\n<li>\n<p>”名称/值“对的集合。例如对象、字典</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"好人\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"job\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字符串必须使用双引号。</p>\n</li>\n<li>\n<p>值的有序列表。例如数组。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>JSON的值可以是字符串、数值、布尔值、null、对象、数组。</p>\n<p>JSON可以独立成文件，扩展名为json。</p>\n<h2 id=\"javascript中的json\"><a class=\"markdownIt-Anchor\" href=\"#javascript中的json\"></a> JavaScript中的JSON</h2>\n<ol>\n<li>\n<p>json字符串</p>\n<p>数据格式符合JSON格式的要求，类型是字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>json对象</p>\n<p>JSON数据格式在JavaScript中的具体表现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'张无忌'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> jsonArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"json对象与json字符串转换\"><a class=\"markdownIt-Anchor\" href=\"#json对象与json字符串转换\"></a> JSON对象与JSON字符串转换</h2>\n<ol>\n<li>\n<p>将json格式字符串转为JSON对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// json字符串</span>\n<span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span>\n<span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/64bc082feff64.png\" alt=\"image-20200822142854868\" /></p>\n</li>\n<li>\n<p>将json对象转换为JSON字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span>\n<span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> jsonResult <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonResult<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/640098ab5054b.png\" alt=\"image-20200822143016312\" /></p>\n</li>\n</ol>\n<h3 id=\"浏览器兼容问题\"><a class=\"markdownIt-Anchor\" href=\"#浏览器兼容问题\"></a> 浏览器兼容问题</h3>\n<p>引入json2.js文件之后即可正常操作。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  json2.js</span>\n<span class=\"token comment\">//  2017-06-12</span>\n<span class=\"token comment\">//  Public Domain.</span>\n<span class=\"token comment\">//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.</span>\n\n<span class=\"token comment\">//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO</span>\n<span class=\"token comment\">//  NOT CONTROL.</span>\n\n<span class=\"token comment\">//  This file creates a global JSON object containing two methods: stringify</span>\n<span class=\"token comment\">//  and parse. This file provides the ES5 JSON capability to ES3 systems.</span>\n<span class=\"token comment\">//  If a project might run on IE8 or earlier, then this file should be included.</span>\n<span class=\"token comment\">//  This file does nothing on ES5 systems.</span>\n\n<span class=\"token comment\">//      JSON.stringify(value, replacer, space)</span>\n<span class=\"token comment\">//          value       any JavaScript value, usually an object or array.</span>\n<span class=\"token comment\">//          replacer    an optional parameter that determines how object</span>\n<span class=\"token comment\">//                      values are stringified for objects. It can be a</span>\n<span class=\"token comment\">//                      function or an array of strings.</span>\n<span class=\"token comment\">//          space       an optional parameter that specifies the indentation</span>\n<span class=\"token comment\">//                      of nested structures. If it is omitted, the text will</span>\n<span class=\"token comment\">//                      be packed without extra whitespace. If it is a number,</span>\n<span class=\"token comment\">//                      it will specify the number of spaces to indent at each</span>\n<span class=\"token comment\">//                      level. If it is a string (such as \"\\t\" or \"&amp;nbsp;\"),</span>\n<span class=\"token comment\">//                      it contains the characters used to indent at each level.</span>\n<span class=\"token comment\">//          This method produces a JSON text from a JavaScript value.</span>\n<span class=\"token comment\">//          When an object value is found, if the object contains a toJSON</span>\n<span class=\"token comment\">//          method, its toJSON method will be called and the result will be</span>\n<span class=\"token comment\">//          stringified. A toJSON method does not serialize: it returns the</span>\n<span class=\"token comment\">//          value represented by the name/value pair that should be serialized,</span>\n<span class=\"token comment\">//          or undefined if nothing should be serialized. The toJSON method</span>\n<span class=\"token comment\">//          will be passed the key associated with the value, and this will be</span>\n<span class=\"token comment\">//          bound to the value.</span>\n\n<span class=\"token comment\">//          For example, this would serialize Dates as ISO strings.</span>\n\n<span class=\"token comment\">//              Date.prototype.toJSON = function (key) &#123;</span>\n<span class=\"token comment\">//                  function f(n) &#123;</span>\n<span class=\"token comment\">//                      // Format integers to have at least two digits.</span>\n<span class=\"token comment\">//                      return (n &lt; 10)</span>\n<span class=\"token comment\">//                          ? \"0\" + n</span>\n<span class=\"token comment\">//                          : n;</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return this.getUTCFullYear()   + \"-\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCMonth() + 1) + \"-\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCDate())      + \"T\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCHours())     + \":\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCMinutes())   + \":\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCSeconds())   + \"Z\";</span>\n<span class=\"token comment\">//              &#125;;</span>\n\n<span class=\"token comment\">//          You can provide an optional replacer method. It will be passed the</span>\n<span class=\"token comment\">//          key and value of each member, with this bound to the containing</span>\n<span class=\"token comment\">//          object. The value that is returned from your method will be</span>\n<span class=\"token comment\">//          serialized. If your method returns undefined, then the member will</span>\n<span class=\"token comment\">//          be excluded from the serialization.</span>\n\n<span class=\"token comment\">//          If the replacer parameter is an array of strings, then it will be</span>\n<span class=\"token comment\">//          used to select the members to be serialized. It filters the results</span>\n<span class=\"token comment\">//          such that only members with keys listed in the replacer array are</span>\n<span class=\"token comment\">//          stringified.</span>\n\n<span class=\"token comment\">//          Values that do not have JSON representations, such as undefined or</span>\n<span class=\"token comment\">//          functions, will not be serialized. Such values in objects will be</span>\n<span class=\"token comment\">//          dropped; in arrays they will be replaced with null. You can use</span>\n<span class=\"token comment\">//          a replacer function to replace those with JSON values.</span>\n\n<span class=\"token comment\">//          JSON.stringify(undefined) returns undefined.</span>\n\n<span class=\"token comment\">//          The optional space parameter produces a stringification of the</span>\n<span class=\"token comment\">//          value that is filled with line breaks and indentation to make it</span>\n<span class=\"token comment\">//          easier to read.</span>\n\n<span class=\"token comment\">//          If the space parameter is a non-empty string, then that string will</span>\n<span class=\"token comment\">//          be used for indentation. If the space parameter is a number, then</span>\n<span class=\"token comment\">//          the indentation will be that many spaces.</span>\n\n<span class=\"token comment\">//          Example:</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([\"e\", &#123;pluribus: \"unum\"&#125;]);</span>\n<span class=\"token comment\">//          // text is '[\"e\",&#123;\"pluribus\":\"unum\"&#125;]'</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([\"e\", &#123;pluribus: \"unum\"&#125;], null, \"\\t\");</span>\n<span class=\"token comment\">//          // text is '[\\n\\t\"e\",\\n\\t&#123;\\n\\t\\t\"pluribus\": \"unum\"\\n\\t&#125;\\n]'</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([new Date()], function (key, value) &#123;</span>\n<span class=\"token comment\">//              return this[key] instanceof Date</span>\n<span class=\"token comment\">//                  ? \"Date(\" + this[key] + \")\"</span>\n<span class=\"token comment\">//                  : value;</span>\n<span class=\"token comment\">//          &#125;);</span>\n<span class=\"token comment\">//          // text is '[\"Date(---current time---)\"]'</span>\n\n<span class=\"token comment\">//      JSON.parse(text, reviver)</span>\n<span class=\"token comment\">//          This method parses a JSON text to produce an object or array.</span>\n<span class=\"token comment\">//          It can throw a SyntaxError exception.</span>\n\n<span class=\"token comment\">//          The optional reviver parameter is a function that can filter and</span>\n<span class=\"token comment\">//          transform the results. It receives each of the keys and values,</span>\n<span class=\"token comment\">//          and its return value is used instead of the original value.</span>\n<span class=\"token comment\">//          If it returns what it received, then the structure is not modified.</span>\n<span class=\"token comment\">//          If it returns undefined then the member is deleted.</span>\n\n<span class=\"token comment\">//          Example:</span>\n\n<span class=\"token comment\">//          // Parse the text. Values that look like ISO date strings will</span>\n<span class=\"token comment\">//          // be converted to Date objects.</span>\n\n<span class=\"token comment\">//          myData = JSON.parse(text, function (key, value) &#123;</span>\n<span class=\"token comment\">//              var a;</span>\n<span class=\"token comment\">//              if (typeof value === \"string\") &#123;</span>\n<span class=\"token comment\">//                  a =</span>\n<span class=\"token comment\">//   /^(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)T(\\d&#123;2&#125;):(\\d&#123;2&#125;):(\\d&#123;2&#125;(?:\\.\\d*)?)Z$/.exec(value);</span>\n<span class=\"token comment\">//                  if (a) &#123;</span>\n<span class=\"token comment\">//                      return new Date(Date.UTC(</span>\n<span class=\"token comment\">//                         +a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]</span>\n<span class=\"token comment\">//                      ));</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return value;</span>\n<span class=\"token comment\">//              &#125;</span>\n<span class=\"token comment\">//          &#125;);</span>\n\n<span class=\"token comment\">//          myData = JSON.parse(</span>\n<span class=\"token comment\">//              \"[\\\"Date(09/09/2001)\\\"]\",</span>\n<span class=\"token comment\">//              function (key, value) &#123;</span>\n<span class=\"token comment\">//                  var d;</span>\n<span class=\"token comment\">//                  if (</span>\n<span class=\"token comment\">//                      typeof value === \"string\"</span>\n<span class=\"token comment\">//                      &amp;&amp; value.slice(0, 5) === \"Date(\"</span>\n<span class=\"token comment\">//                      &amp;&amp; value.slice(-1) === \")\"</span>\n<span class=\"token comment\">//                  ) &#123;</span>\n<span class=\"token comment\">//                      d = new Date(value.slice(5, -1));</span>\n<span class=\"token comment\">//                      if (d) &#123;</span>\n<span class=\"token comment\">//                          return d;</span>\n<span class=\"token comment\">//                      &#125;</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return value;</span>\n<span class=\"token comment\">//              &#125;</span>\n<span class=\"token comment\">//          );</span>\n\n<span class=\"token comment\">//  This is a reference implementation. You are free to copy, modify, or</span>\n<span class=\"token comment\">//  redistribute.</span>\n\n<span class=\"token comment\">/*jslint\n    eval, for, this\n*/</span>\n\n<span class=\"token comment\">/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/</span>\n\n\n<span class=\"token comment\">// Create a JSON object only if one does not already exist. We create the</span>\n<span class=\"token comment\">// methods in a closure to avoid creating global variables.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">JSON</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> rx_one <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[\\],:&#123;&#125;\\s]*$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_two <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_three <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_four <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:^|:|,)(?:\\s*\\[)+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_escapable <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_dangerous <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Format integers to have at least two digits.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> n\n            <span class=\"token operator\">:</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">this_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"T\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"Z\"</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> gap<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> indent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> meta<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rep<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// If the string contains no control characters, no quote characters, and no</span>\n<span class=\"token comment\">// backslash characters, then we can safely slap some quotes around it.</span>\n<span class=\"token comment\">// Otherwise we must also replace the offending characters with safe escape</span>\n<span class=\"token comment\">// sequences.</span>\n\n        rx_escapable<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> rx_escapable<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_escapable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> c <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span>\n                    <span class=\"token operator\">?</span> c\n                    <span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\u\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"0000\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> string <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> holder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// Produce a string from holder[key].</span>\n\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The loop counter.</span>\n        <span class=\"token keyword\">var</span> k<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The member key.</span>\n        <span class=\"token keyword\">var</span> v<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The member value.</span>\n        <span class=\"token keyword\">var</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> mind <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> partial<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the value has a toJSON method, call it to obtain a replacement value.</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            value\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If we were called with a replacer function, then call the replacer to</span>\n<span class=\"token comment\">// obtain a replacement value.</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rep <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            value <span class=\"token operator\">=</span> <span class=\"token function\">rep</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// What happens next depends on the value's type.</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"string\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"number\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// JSON numbers must be finite. Encode non-finite numbers as null.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"boolean\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"null\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// If the value is a boolean or null, convert it to a string. Note:</span>\n<span class=\"token comment\">// typeof null does not produce \"null\". The case is included here in</span>\n<span class=\"token comment\">// the remote chance that this gets fixed someday.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the type is \"object\", we might be dealing with an object or an array or</span>\n<span class=\"token comment\">// null.</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"object\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// Due to a specification blunder in ECMAScript, typeof null is \"object\",</span>\n<span class=\"token comment\">// so watch out for that case.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Make an array to hold the partial results of stringifying this object value.</span>\n\n            gap <span class=\"token operator\">+=</span> indent<span class=\"token punctuation\">;</span>\n            partial <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Is the value an array?</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The value is an array. Stringify every element. Use null as a placeholder</span>\n<span class=\"token comment\">// for non-JSON values.</span>\n\n                length <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    partial<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Join all of the elements together, separated with commas, and wrap them in</span>\n<span class=\"token comment\">// brackets.</span>\n\n                v <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n                    <span class=\"token operator\">?</span> <span class=\"token string\">\"[]\"</span>\n                    <span class=\"token operator\">:</span> gap\n                        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                            <span class=\"token string\">\"[\\n\"</span>\n                            <span class=\"token operator\">+</span> gap\n                            <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n\"</span> <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n                            <span class=\"token operator\">+</span> mind\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">:</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n                gap <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the replacer is an array, use it to select the members to be stringified.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rep <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> rep <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                length <span class=\"token operator\">=</span> rep<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rep<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        k <span class=\"token operator\">=</span> rep<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        v <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            partial<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>\n                                <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span>\n                                    <span class=\"token operator\">?</span> <span class=\"token string\">\": \"</span>\n                                    <span class=\"token operator\">:</span> <span class=\"token string\">\":\"</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// Otherwise, iterate through all of the keys in the object.</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        v <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            partial<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>\n                                <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span>\n                                    <span class=\"token operator\">?</span> <span class=\"token string\">\": \"</span>\n                                    <span class=\"token operator\">:</span> <span class=\"token string\">\":\"</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Join all of the member texts together, separated with commas,</span>\n<span class=\"token comment\">// and wrap them in braces.</span>\n\n            v <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n                <span class=\"token operator\">?</span> <span class=\"token string\">\"&#123;&#125;\"</span>\n                <span class=\"token operator\">:</span> gap\n                    <span class=\"token operator\">?</span> <span class=\"token string\">\"&#123;\\n\"</span> <span class=\"token operator\">+</span> gap <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n\"</span> <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> mind <span class=\"token operator\">+</span> <span class=\"token string\">\"&#125;\"</span>\n                    <span class=\"token operator\">:</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span>\n            gap <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the JSON object does not yet have a stringify method, give it one.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>stringify <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// table of character substitutions</span>\n            <span class=\"token string\">\"\\b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\b\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\t\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\t\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\n\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\f\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\f\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\r\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\r\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\\"\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\\\\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\\\\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\\\\\\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">stringify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">,</span> space</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The stringify method takes a value and an optional replacer, and an optional</span>\n<span class=\"token comment\">// space parameter, and returns a JSON text. The replacer can be a function</span>\n<span class=\"token comment\">// that can replace values, or an array of strings that will select the keys.</span>\n<span class=\"token comment\">// A default replacer method can be provided. Use of the space parameter can</span>\n<span class=\"token comment\">// produce text that is more easily readable.</span>\n\n            <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n            gap <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            indent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the space parameter is a number, make an indent string containing that</span>\n<span class=\"token comment\">// many spaces.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> space <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> space<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    indent <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the space parameter is a string, it will be used as the indent string.</span>\n\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> space <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                indent <span class=\"token operator\">=</span> space<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If there is a replacer, it must be a function or an array.</span>\n<span class=\"token comment\">// Otherwise, throw an error.</span>\n\n            rep <span class=\"token operator\">=</span> replacer<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>replacer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> replacer <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">typeof</span> replacer <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span>\n                <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> replacer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON.stringify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Make a fake root object containing our value under the key of \"\".</span>\n<span class=\"token comment\">// Return the result of stringifying the value.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"\"</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// If the JSON object does not yet have a parse method, give it one.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">parse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> reviver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The parse method takes a text and an optional reviver function, and returns</span>\n<span class=\"token comment\">// a JavaScript value if the text is a valid JSON text.</span>\n\n            <span class=\"token keyword\">var</span> j<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">holder<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The walk method is used to recursively walk the resulting structure so</span>\n<span class=\"token comment\">// that modifications can be made.</span>\n\n                <span class=\"token keyword\">var</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> v<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            v <span class=\"token operator\">=</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                                value<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">delete</span> value<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">reviver</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// Parsing happens in four stages. In the first stage, we replace certain</span>\n<span class=\"token comment\">// Unicode characters with escape sequences. JavaScript handles many characters</span>\n<span class=\"token comment\">// incorrectly, either silently deleting them, or treating them as line endings.</span>\n\n            text <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rx_dangerous<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rx_dangerous<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_dangerous<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"\\\\u\"</span>\n                        <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"0000\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// In the second stage, we run the text against regular expressions that look</span>\n<span class=\"token comment\">// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"</span>\n<span class=\"token comment\">// because they can cause invocation, and \"=\" because it can cause mutation.</span>\n<span class=\"token comment\">// But just to be safe, we want to reject all unexpected forms.</span>\n\n<span class=\"token comment\">// We split the second stage into 4 regexp operations in order to work around</span>\n<span class=\"token comment\">// crippling inefficiencies in IE's and Safari's regexp engines. First we</span>\n<span class=\"token comment\">// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we</span>\n<span class=\"token comment\">// replace all simple value tokens with \"]\" characters. Third, we delete all</span>\n<span class=\"token comment\">// open brackets that follow a colon or comma or that begin the text. Finally,</span>\n<span class=\"token comment\">// we look to see that the remaining characters are only whitespace or \"]\" or</span>\n<span class=\"token comment\">// \",\" or \":\" or \"&#123;\" or \"&#125;\". If that is so, then the text is safe for eval.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                rx_one<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n                    text\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_two<span class=\"token punctuation\">,</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_three<span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_four<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// In the third stage we use the eval function to compile the text into a</span>\n<span class=\"token comment\">// JavaScript structure. The \"&#123;\" operator is subject to a syntactic ambiguity</span>\n<span class=\"token comment\">// in JavaScript: it can begin a block or an object literal. We wrap the text</span>\n<span class=\"token comment\">// in parens to eliminate the ambiguity.</span>\n\n                j <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> text <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// In the optional fourth stage, we recursively walk the new structure, passing</span>\n<span class=\"token comment\">// each name/value pair to a reviver function for possible transformation.</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reviver <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"\"</span><span class=\"token operator\">:</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">:</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the text is not JSON parseable, then a SyntaxError is thrown.</span>\n\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON.parse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ajax中的json\"><a class=\"markdownIt-Anchor\" href=\"#ajax中的json\"></a> Ajax中的JSON</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span>\n<span class=\"token punctuation\">&#125;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'server.json?name'</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ajax中的xml\"><a class=\"markdownIt-Anchor\" href=\"#ajax中的xml\"></a> Ajax中的XML</h2>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.%20createXMLHttpRequest.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span>\n            btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3. xml数据格式.xml'</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">//    接收数据</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version='1.0' encoding='utf-8' ?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>张无忌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/e23e7b009ea86.png\" alt=\"image-20200822150149576\" /></p>\n<h2 id=\"三级联动案例\"><a class=\"markdownIt-Anchor\" href=\"#三级联动案例\"></a> 三级联动案例</h2>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>---<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>---<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> provinceElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> cityElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> countiesElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counties'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> datas<span class=\"token punctuation\">;</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> xhr<span class=\"token punctuation\">.</span>responseText\n                    datas <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span>\n                        opt<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>province<span class=\"token punctuation\">)</span>\n                        opt<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>province\n                        provinceElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data/server1.json'</span><span class=\"token punctuation\">)</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 为省份下拉列表绑定事件change</span>\n            provinceElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> cityOpts <span class=\"token operator\">=</span> cityElement<span class=\"token punctuation\">.</span>options\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cityOpts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    cityElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>cityOpts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    k<span class=\"token operator\">--</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> provinceElement<span class=\"token punctuation\">.</span>options\n                <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> provinceElement<span class=\"token punctuation\">.</span>selectedIndex\n                <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> provinceName <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 2. 根据省份信息获取城市信息</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">var</span> province <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>province\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>provinceName <span class=\"token operator\">===</span> province<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>cities\n\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cities<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">var</span> city <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>city\n                            <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span>\n                            opt<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">)</span>\n                            opt<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> city\n                            cityElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">function</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 适用于非IE浏览器</span>\n                    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//   适用于IE浏览器</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// IE 7+</span>\n                        httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Msxml2.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token comment\">//   IE 6-</span>\n                            httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> httpRequest<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h2 id=\"json语法规则\"><a class=\"markdownIt-Anchor\" href=\"#json语法规则\"></a> JSON语法规则</h2>\n<ol>\n<li>\n<p>”名称/值“对的集合。例如对象、字典</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"好人\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"job\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>字符串必须使用双引号。</p>\n</li>\n<li>\n<p>值的有序列表。例如数组。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>JSON的值可以是字符串、数值、布尔值、null、对象、数组。</p>\n<p>JSON可以独立成文件，扩展名为json。</p>\n<h2 id=\"javascript中的json\"><a class=\"markdownIt-Anchor\" href=\"#javascript中的json\"></a> JavaScript中的JSON</h2>\n<ol>\n<li>\n<p>json字符串</p>\n<p>数据格式符合JSON格式的要求，类型是字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>json对象</p>\n<p>JSON数据格式在JavaScript中的具体表现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">'张无忌'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> jsonArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"json对象与json字符串转换\"><a class=\"markdownIt-Anchor\" href=\"#json对象与json字符串转换\"></a> JSON对象与JSON字符串转换</h2>\n<ol>\n<li>\n<p>将json格式字符串转为JSON对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// json字符串</span>\n<span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span>\n<span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/64bc082feff64.png\" alt=\"image-20200822142854868\" /></p>\n</li>\n<li>\n<p>将json对象转换为JSON字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonString <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"张无忌\"&#125;'</span>\n<span class=\"token keyword\">var</span> jsonObject <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> jsonResult <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>jsonObject<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jsonResult<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/640098ab5054b.png\" alt=\"image-20200822143016312\" /></p>\n</li>\n</ol>\n<h3 id=\"浏览器兼容问题\"><a class=\"markdownIt-Anchor\" href=\"#浏览器兼容问题\"></a> 浏览器兼容问题</h3>\n<p>引入json2.js文件之后即可正常操作。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  json2.js</span>\n<span class=\"token comment\">//  2017-06-12</span>\n<span class=\"token comment\">//  Public Domain.</span>\n<span class=\"token comment\">//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.</span>\n\n<span class=\"token comment\">//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO</span>\n<span class=\"token comment\">//  NOT CONTROL.</span>\n\n<span class=\"token comment\">//  This file creates a global JSON object containing two methods: stringify</span>\n<span class=\"token comment\">//  and parse. This file provides the ES5 JSON capability to ES3 systems.</span>\n<span class=\"token comment\">//  If a project might run on IE8 or earlier, then this file should be included.</span>\n<span class=\"token comment\">//  This file does nothing on ES5 systems.</span>\n\n<span class=\"token comment\">//      JSON.stringify(value, replacer, space)</span>\n<span class=\"token comment\">//          value       any JavaScript value, usually an object or array.</span>\n<span class=\"token comment\">//          replacer    an optional parameter that determines how object</span>\n<span class=\"token comment\">//                      values are stringified for objects. It can be a</span>\n<span class=\"token comment\">//                      function or an array of strings.</span>\n<span class=\"token comment\">//          space       an optional parameter that specifies the indentation</span>\n<span class=\"token comment\">//                      of nested structures. If it is omitted, the text will</span>\n<span class=\"token comment\">//                      be packed without extra whitespace. If it is a number,</span>\n<span class=\"token comment\">//                      it will specify the number of spaces to indent at each</span>\n<span class=\"token comment\">//                      level. If it is a string (such as \"\\t\" or \"&amp;nbsp;\"),</span>\n<span class=\"token comment\">//                      it contains the characters used to indent at each level.</span>\n<span class=\"token comment\">//          This method produces a JSON text from a JavaScript value.</span>\n<span class=\"token comment\">//          When an object value is found, if the object contains a toJSON</span>\n<span class=\"token comment\">//          method, its toJSON method will be called and the result will be</span>\n<span class=\"token comment\">//          stringified. A toJSON method does not serialize: it returns the</span>\n<span class=\"token comment\">//          value represented by the name/value pair that should be serialized,</span>\n<span class=\"token comment\">//          or undefined if nothing should be serialized. The toJSON method</span>\n<span class=\"token comment\">//          will be passed the key associated with the value, and this will be</span>\n<span class=\"token comment\">//          bound to the value.</span>\n\n<span class=\"token comment\">//          For example, this would serialize Dates as ISO strings.</span>\n\n<span class=\"token comment\">//              Date.prototype.toJSON = function (key) &#123;</span>\n<span class=\"token comment\">//                  function f(n) &#123;</span>\n<span class=\"token comment\">//                      // Format integers to have at least two digits.</span>\n<span class=\"token comment\">//                      return (n &lt; 10)</span>\n<span class=\"token comment\">//                          ? \"0\" + n</span>\n<span class=\"token comment\">//                          : n;</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return this.getUTCFullYear()   + \"-\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCMonth() + 1) + \"-\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCDate())      + \"T\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCHours())     + \":\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCMinutes())   + \":\" +</span>\n<span class=\"token comment\">//                       f(this.getUTCSeconds())   + \"Z\";</span>\n<span class=\"token comment\">//              &#125;;</span>\n\n<span class=\"token comment\">//          You can provide an optional replacer method. It will be passed the</span>\n<span class=\"token comment\">//          key and value of each member, with this bound to the containing</span>\n<span class=\"token comment\">//          object. The value that is returned from your method will be</span>\n<span class=\"token comment\">//          serialized. If your method returns undefined, then the member will</span>\n<span class=\"token comment\">//          be excluded from the serialization.</span>\n\n<span class=\"token comment\">//          If the replacer parameter is an array of strings, then it will be</span>\n<span class=\"token comment\">//          used to select the members to be serialized. It filters the results</span>\n<span class=\"token comment\">//          such that only members with keys listed in the replacer array are</span>\n<span class=\"token comment\">//          stringified.</span>\n\n<span class=\"token comment\">//          Values that do not have JSON representations, such as undefined or</span>\n<span class=\"token comment\">//          functions, will not be serialized. Such values in objects will be</span>\n<span class=\"token comment\">//          dropped; in arrays they will be replaced with null. You can use</span>\n<span class=\"token comment\">//          a replacer function to replace those with JSON values.</span>\n\n<span class=\"token comment\">//          JSON.stringify(undefined) returns undefined.</span>\n\n<span class=\"token comment\">//          The optional space parameter produces a stringification of the</span>\n<span class=\"token comment\">//          value that is filled with line breaks and indentation to make it</span>\n<span class=\"token comment\">//          easier to read.</span>\n\n<span class=\"token comment\">//          If the space parameter is a non-empty string, then that string will</span>\n<span class=\"token comment\">//          be used for indentation. If the space parameter is a number, then</span>\n<span class=\"token comment\">//          the indentation will be that many spaces.</span>\n\n<span class=\"token comment\">//          Example:</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([\"e\", &#123;pluribus: \"unum\"&#125;]);</span>\n<span class=\"token comment\">//          // text is '[\"e\",&#123;\"pluribus\":\"unum\"&#125;]'</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([\"e\", &#123;pluribus: \"unum\"&#125;], null, \"\\t\");</span>\n<span class=\"token comment\">//          // text is '[\\n\\t\"e\",\\n\\t&#123;\\n\\t\\t\"pluribus\": \"unum\"\\n\\t&#125;\\n]'</span>\n\n<span class=\"token comment\">//          text = JSON.stringify([new Date()], function (key, value) &#123;</span>\n<span class=\"token comment\">//              return this[key] instanceof Date</span>\n<span class=\"token comment\">//                  ? \"Date(\" + this[key] + \")\"</span>\n<span class=\"token comment\">//                  : value;</span>\n<span class=\"token comment\">//          &#125;);</span>\n<span class=\"token comment\">//          // text is '[\"Date(---current time---)\"]'</span>\n\n<span class=\"token comment\">//      JSON.parse(text, reviver)</span>\n<span class=\"token comment\">//          This method parses a JSON text to produce an object or array.</span>\n<span class=\"token comment\">//          It can throw a SyntaxError exception.</span>\n\n<span class=\"token comment\">//          The optional reviver parameter is a function that can filter and</span>\n<span class=\"token comment\">//          transform the results. It receives each of the keys and values,</span>\n<span class=\"token comment\">//          and its return value is used instead of the original value.</span>\n<span class=\"token comment\">//          If it returns what it received, then the structure is not modified.</span>\n<span class=\"token comment\">//          If it returns undefined then the member is deleted.</span>\n\n<span class=\"token comment\">//          Example:</span>\n\n<span class=\"token comment\">//          // Parse the text. Values that look like ISO date strings will</span>\n<span class=\"token comment\">//          // be converted to Date objects.</span>\n\n<span class=\"token comment\">//          myData = JSON.parse(text, function (key, value) &#123;</span>\n<span class=\"token comment\">//              var a;</span>\n<span class=\"token comment\">//              if (typeof value === \"string\") &#123;</span>\n<span class=\"token comment\">//                  a =</span>\n<span class=\"token comment\">//   /^(\\d&#123;4&#125;)-(\\d&#123;2&#125;)-(\\d&#123;2&#125;)T(\\d&#123;2&#125;):(\\d&#123;2&#125;):(\\d&#123;2&#125;(?:\\.\\d*)?)Z$/.exec(value);</span>\n<span class=\"token comment\">//                  if (a) &#123;</span>\n<span class=\"token comment\">//                      return new Date(Date.UTC(</span>\n<span class=\"token comment\">//                         +a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]</span>\n<span class=\"token comment\">//                      ));</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return value;</span>\n<span class=\"token comment\">//              &#125;</span>\n<span class=\"token comment\">//          &#125;);</span>\n\n<span class=\"token comment\">//          myData = JSON.parse(</span>\n<span class=\"token comment\">//              \"[\\\"Date(09/09/2001)\\\"]\",</span>\n<span class=\"token comment\">//              function (key, value) &#123;</span>\n<span class=\"token comment\">//                  var d;</span>\n<span class=\"token comment\">//                  if (</span>\n<span class=\"token comment\">//                      typeof value === \"string\"</span>\n<span class=\"token comment\">//                      &amp;&amp; value.slice(0, 5) === \"Date(\"</span>\n<span class=\"token comment\">//                      &amp;&amp; value.slice(-1) === \")\"</span>\n<span class=\"token comment\">//                  ) &#123;</span>\n<span class=\"token comment\">//                      d = new Date(value.slice(5, -1));</span>\n<span class=\"token comment\">//                      if (d) &#123;</span>\n<span class=\"token comment\">//                          return d;</span>\n<span class=\"token comment\">//                      &#125;</span>\n<span class=\"token comment\">//                  &#125;</span>\n<span class=\"token comment\">//                  return value;</span>\n<span class=\"token comment\">//              &#125;</span>\n<span class=\"token comment\">//          );</span>\n\n<span class=\"token comment\">//  This is a reference implementation. You are free to copy, modify, or</span>\n<span class=\"token comment\">//  redistribute.</span>\n\n<span class=\"token comment\">/*jslint\n    eval, for, this\n*/</span>\n\n<span class=\"token comment\">/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/</span>\n\n\n<span class=\"token comment\">// Create a JSON object only if one does not already exist. We create the</span>\n<span class=\"token comment\">// methods in a closure to avoid creating global variables.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">JSON</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> rx_one <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[\\],:&#123;&#125;\\s]*$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_two <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]&#123;4&#125;)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_three <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_four <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:^|:|,)(?:\\s*\\[)+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_escapable <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rx_dangerous <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Format integers to have at least two digits.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> n\n            <span class=\"token operator\">:</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">this_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"T\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUTCSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"Z\"</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">=</span> this_value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">var</span> gap<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> indent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> meta<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rep<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// If the string contains no control characters, no quote characters, and no</span>\n<span class=\"token comment\">// backslash characters, then we can safely slap some quotes around it.</span>\n<span class=\"token comment\">// Otherwise we must also replace the offending characters with safe escape</span>\n<span class=\"token comment\">// sequences.</span>\n\n        rx_escapable<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> rx_escapable<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">?</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_escapable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> c <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span>\n                    <span class=\"token operator\">?</span> c\n                    <span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\u\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"0000\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">+</span> string <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> holder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// Produce a string from holder[key].</span>\n\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The loop counter.</span>\n        <span class=\"token keyword\">var</span> k<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The member key.</span>\n        <span class=\"token keyword\">var</span> v<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// The member value.</span>\n        <span class=\"token keyword\">var</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> mind <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> partial<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the value has a toJSON method, call it to obtain a replacement value.</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            value\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span>\n            <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">.</span>toJSON <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If we were called with a replacer function, then call the replacer to</span>\n<span class=\"token comment\">// obtain a replacement value.</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rep <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            value <span class=\"token operator\">=</span> <span class=\"token function\">rep</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// What happens next depends on the value's type.</span>\n\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"string\"</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"number\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// JSON numbers must be finite. Encode non-finite numbers as null.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">:</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"boolean\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"null\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// If the value is a boolean or null, convert it to a string. Note:</span>\n<span class=\"token comment\">// typeof null does not produce \"null\". The case is included here in</span>\n<span class=\"token comment\">// the remote chance that this gets fixed someday.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the type is \"object\", we might be dealing with an object or an array or</span>\n<span class=\"token comment\">// null.</span>\n\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"object\"</span><span class=\"token operator\">:</span>\n\n<span class=\"token comment\">// Due to a specification blunder in ECMAScript, typeof null is \"object\",</span>\n<span class=\"token comment\">// so watch out for that case.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Make an array to hold the partial results of stringifying this object value.</span>\n\n            gap <span class=\"token operator\">+=</span> indent<span class=\"token punctuation\">;</span>\n            partial <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Is the value an array?</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The value is an array. Stringify every element. Use null as a placeholder</span>\n<span class=\"token comment\">// for non-JSON values.</span>\n\n                length <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    partial<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Join all of the elements together, separated with commas, and wrap them in</span>\n<span class=\"token comment\">// brackets.</span>\n\n                v <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n                    <span class=\"token operator\">?</span> <span class=\"token string\">\"[]\"</span>\n                    <span class=\"token operator\">:</span> gap\n                        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n                            <span class=\"token string\">\"[\\n\"</span>\n                            <span class=\"token operator\">+</span> gap\n                            <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n\"</span> <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n                            <span class=\"token operator\">+</span> mind\n                            <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">:</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n                gap <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the replacer is an array, use it to select the members to be stringified.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rep <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> rep <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                length <span class=\"token operator\">=</span> rep<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rep<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        k <span class=\"token operator\">=</span> rep<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        v <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            partial<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>\n                                <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span>\n                                    <span class=\"token operator\">?</span> <span class=\"token string\">\": \"</span>\n                                    <span class=\"token operator\">:</span> <span class=\"token string\">\":\"</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// Otherwise, iterate through all of the keys in the object.</span>\n\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        v <span class=\"token operator\">=</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            partial<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>\n                                <span class=\"token punctuation\">(</span>gap<span class=\"token punctuation\">)</span>\n                                    <span class=\"token operator\">?</span> <span class=\"token string\">\": \"</span>\n                                    <span class=\"token operator\">:</span> <span class=\"token string\">\":\"</span>\n                            <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Join all of the member texts together, separated with commas,</span>\n<span class=\"token comment\">// and wrap them in braces.</span>\n\n            v <span class=\"token operator\">=</span> partial<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n                <span class=\"token operator\">?</span> <span class=\"token string\">\"&#123;&#125;\"</span>\n                <span class=\"token operator\">:</span> gap\n                    <span class=\"token operator\">?</span> <span class=\"token string\">\"&#123;\\n\"</span> <span class=\"token operator\">+</span> gap <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\\n\"</span> <span class=\"token operator\">+</span> gap<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> mind <span class=\"token operator\">+</span> <span class=\"token string\">\"&#125;\"</span>\n                    <span class=\"token operator\">:</span> <span class=\"token string\">\"&#123;\"</span> <span class=\"token operator\">+</span> partial<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">;</span>\n            gap <span class=\"token operator\">=</span> mind<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the JSON object does not yet have a stringify method, give it one.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>stringify <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// table of character substitutions</span>\n            <span class=\"token string\">\"\\b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\b\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\t\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\t\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\n\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\n\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\f\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\f\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\r\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\r\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\\"\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\\\\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"\\\\\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\\\\\\\\\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">stringify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">,</span> space</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The stringify method takes a value and an optional replacer, and an optional</span>\n<span class=\"token comment\">// space parameter, and returns a JSON text. The replacer can be a function</span>\n<span class=\"token comment\">// that can replace values, or an array of strings that will select the keys.</span>\n<span class=\"token comment\">// A default replacer method can be provided. Use of the space parameter can</span>\n<span class=\"token comment\">// produce text that is more easily readable.</span>\n\n            <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n            gap <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            indent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// If the space parameter is a number, make an indent string containing that</span>\n<span class=\"token comment\">// many spaces.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> space <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> space<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    indent <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the space parameter is a string, it will be used as the indent string.</span>\n\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> space <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                indent <span class=\"token operator\">=</span> space<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If there is a replacer, it must be a function or an array.</span>\n<span class=\"token comment\">// Otherwise, throw an error.</span>\n\n            rep <span class=\"token operator\">=</span> replacer<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>replacer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> replacer <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">typeof</span> replacer <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span>\n                <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> replacer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON.stringify\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Make a fake root object containing our value under the key of \"\".</span>\n<span class=\"token comment\">// Return the result of stringifying the value.</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"\"</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// If the JSON object does not yet have a parse method, give it one.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>parse <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">parse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text<span class=\"token punctuation\">,</span> reviver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The parse method takes a text and an optional reviver function, and returns</span>\n<span class=\"token comment\">// a JavaScript value if the text is a valid JSON text.</span>\n\n            <span class=\"token keyword\">var</span> j<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">function</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">holder<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// The walk method is used to recursively walk the resulting structure so</span>\n<span class=\"token comment\">// that modifications can be made.</span>\n\n                <span class=\"token keyword\">var</span> k<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> v<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            v <span class=\"token operator\">=</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                                value<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                                <span class=\"token keyword\">delete</span> value<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">reviver</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// Parsing happens in four stages. In the first stage, we replace certain</span>\n<span class=\"token comment\">// Unicode characters with escape sequences. JavaScript handles many characters</span>\n<span class=\"token comment\">// incorrectly, either silently deleting them, or treating them as line endings.</span>\n\n            text <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rx_dangerous<span class=\"token punctuation\">.</span>lastIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rx_dangerous<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_dangerous<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"\\\\u\"</span>\n                        <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"0000\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// In the second stage, we run the text against regular expressions that look</span>\n<span class=\"token comment\">// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"</span>\n<span class=\"token comment\">// because they can cause invocation, and \"=\" because it can cause mutation.</span>\n<span class=\"token comment\">// But just to be safe, we want to reject all unexpected forms.</span>\n\n<span class=\"token comment\">// We split the second stage into 4 regexp operations in order to work around</span>\n<span class=\"token comment\">// crippling inefficiencies in IE's and Safari's regexp engines. First we</span>\n<span class=\"token comment\">// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we</span>\n<span class=\"token comment\">// replace all simple value tokens with \"]\" characters. Third, we delete all</span>\n<span class=\"token comment\">// open brackets that follow a colon or comma or that begin the text. Finally,</span>\n<span class=\"token comment\">// we look to see that the remaining characters are only whitespace or \"]\" or</span>\n<span class=\"token comment\">// \",\" or \":\" or \"&#123;\" or \"&#125;\". If that is so, then the text is safe for eval.</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                rx_one<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>\n                    text\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_two<span class=\"token punctuation\">,</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_three<span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>rx_four<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// In the third stage we use the eval function to compile the text into a</span>\n<span class=\"token comment\">// JavaScript structure. The \"&#123;\" operator is subject to a syntactic ambiguity</span>\n<span class=\"token comment\">// in JavaScript: it can begin a block or an object literal. We wrap the text</span>\n<span class=\"token comment\">// in parens to eliminate the ambiguity.</span>\n\n                j <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> text <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// In the optional fourth stage, we recursively walk the new structure, passing</span>\n<span class=\"token comment\">// each name/value pair to a reviver function for possible transformation.</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reviver <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"\"</span><span class=\"token operator\">:</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">:</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// If the text is not JSON parseable, then a SyntaxError is thrown.</span>\n\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyntaxError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON.parse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ajax中的json\"><a class=\"markdownIt-Anchor\" href=\"#ajax中的json\"></a> Ajax中的JSON</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span>\n<span class=\"token punctuation\">&#125;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'server.json?name'</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ajax中的xml\"><a class=\"markdownIt-Anchor\" href=\"#ajax中的xml\"></a> Ajax中的XML</h2>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.%20createXMLHttpRequest.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span>\n            btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3. xml数据格式.xml'</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">//    接收数据</span>\n                        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version='1.0' encoding='utf-8' ?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>张无忌<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/22/e23e7b009ea86.png\" alt=\"image-20200822150149576\" /></p>\n<h2 id=\"三级联动案例\"><a class=\"markdownIt-Anchor\" href=\"#三级联动案例\"></a> 三级联动案例</h2>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>---<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>---<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> provinceElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'province'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> cityElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> countiesElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'counties'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> datas<span class=\"token punctuation\">;</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> xhr<span class=\"token punctuation\">.</span>responseText\n                    datas <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span>\n                        opt<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>province<span class=\"token punctuation\">)</span>\n                        opt<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>province\n                        provinceElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data/server1.json'</span><span class=\"token punctuation\">)</span>\n            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 为省份下拉列表绑定事件change</span>\n            provinceElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> cityOpts <span class=\"token operator\">=</span> cityElement<span class=\"token punctuation\">.</span>options\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> cityOpts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    cityElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>cityOpts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    k<span class=\"token operator\">--</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> provinceElement<span class=\"token punctuation\">.</span>options\n                <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> provinceElement<span class=\"token punctuation\">.</span>selectedIndex\n                <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">var</span> provinceName <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 2. 根据省份信息获取城市信息</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> datas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> datas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">var</span> province <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>province\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>provinceName <span class=\"token operator\">===</span> province<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>cities\n\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cities<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token keyword\">var</span> city <span class=\"token operator\">=</span> cities<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>city\n                            <span class=\"token keyword\">var</span> opt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span>\n                            opt<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> city<span class=\"token punctuation\">)</span>\n                            opt<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> city\n                            cityElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">function</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 适用于非IE浏览器</span>\n                    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//   适用于IE浏览器</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// IE 7+</span>\n                        httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Msxml2.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token comment\">//   IE 6-</span>\n                            httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> httpRequest<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"Ajax异步交互与跨域访问","path":"api/categories/Ajax异步交互与跨域访问.json"},{"name":"Ajax基础","path":"api/categories/Ajax基础.json"}],"tags":[{"name":"JSON","path":"api/tags/JSON.json"}]}