{"title":"HTTP是什么","slug":"日常学习/技术相关/HTTP协议与网络编程/1. HTTP是什么","date":"2020-08-07T13:18:01.000Z","updated":"2022-02-21T05:08:50.398Z","comments":true,"path":"api/articles/日常学习/技术相关/HTTP协议与网络编程/1. HTTP是什么.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/7ba65ab11d3acf3e0ac33555169f6bdc.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/d253ad0ba74f7ec11c7c142812144714.png"],"content":"<h2 id=\"http是什么\"><a class=\"markdownIt-Anchor\" href=\"#http是什么\"></a> HTTP是什么？</h2>\n<p>HTP全称为 Hypertext Transfer Protocol，被译为超文本传输协议，是互联网上应用最为广泛的一种网络协议。<br />\nHTTP协议是在Web上进行数据交换的基础，是一种“客户端——服务器端”协议。也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。<br />\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<h2 id=\"http请求与响应消息\"><a class=\"markdownIt-Anchor\" href=\"#http请求与响应消息\"></a> HTTP请求与响应消息</h2>\n<p>客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。</p>\n<ul>\n<li>由像浏览器这样的客户端发出的消息叫做请求（requests)</li>\n<li>被服务端回应的消息叫做响应（responses）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/7ba65ab11d3acf3e0ac33555169f6bdc.png\" alt=\"image-20200807213324882\" /></p>\n<h2 id=\"基于http的组件系统\"><a class=\"markdownIt-Anchor\" href=\"#基于http的组件系统\"></a> 基于HTTP的组件系统</h2>\n<p>请求通过一个实体被发出，实体也就是用户代理。大多数情况下，这个用户代理都是指刘览器。</p>\n<p>每一个发送到服务器的请求，都会被服务器处理井返回一个消息，也就是响应。</p>\n<p>在这个请求与回应之间，还有许许多多的被称为 Proxies的实体，他们的作用与表现各不同。</p>\n<h3 id=\"客户端\"><a class=\"markdownIt-Anchor\" href=\"#客户端\"></a> 客户端</h3>\n<p>user-agent就是任何能够为用户发起行为的工具。这个角色通常都是由刘览器来扮演。一些例外情况，比如是工程师使用的程序，以及Web开发人员调试应用程序。</p>\n<p>测览器总是作为发起一个请求的实体（近几年已经出现一些机制能够模拟由服务器起的请求消息，例姒如Node.js)</p>\n<p>浏览器首先发送一个请求来获取页面的HTML文档，再解析文档中的资源信息发送其他请求，获取可执行脚本或CSS样式来进行页面布局這染，以及一些其它页面资源（如图片和视频等）。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/d253ad0ba74f7ec11c7c142812144714.png\" alt=\"image-20200807215546565\" /></p>\n<h3 id=\"web服务器\"><a class=\"markdownIt-Anchor\" href=\"#web服务器\"></a> Web服务器</h3>\n<p>在HTTP协议通信过程的另一端，是由Web服务器来服务并提供客户端所请求的文档。服务器只是虚拟意义上代表一个机器：它可以是共享负载（负载均衡）的一组服务器组成的计算机群，也可以是种复杂的软件，通过向其他计算机（如缓存，数据库服务器，电子商务服务器等）发起请求来获取部分或全部资源。</p>\n<p>Web服务不ー定是一台机器，但一个机器上可以装载的众多Web服务。</p>\n<h3 id=\"代理proxies\"><a class=\"markdownIt-Anchor\" href=\"#代理proxies\"></a> 代理（Proxies）</h3>\n<p>在洳览器和服务器之间，有许多计算机和其他设备转发了HTTP消息。由于Web栈层次结构的原因它们大多都出现在传输层、网络层和物理层上，对于HTTP应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为代理（ Proxies）。代理（ Proxies）既可以表现得透明，又可以不透明（“改变请求”会通过它们）。代理主要有如下几种作用：</p>\n<ul>\n<li>缓存（可以是公开的也可以是私有的，像浏览器的缓存）</li>\n<li>过滤（像反病毒扫描，家长控制）</li>\n<li>负载均衡（让多个服务器服务不同的请求）</li>\n<li>认证（对不同资源进行权限管理）</li>\n<li>日志记录（允许存储历史信息）</li>\n</ul>\n<h2 id=\"http的相关概念\"><a class=\"markdownIt-Anchor\" href=\"#http的相关概念\"></a> HTTP的相关概念</h2>\n<h3 id=\"http的基本特性\"><a class=\"markdownIt-Anchor\" href=\"#http的基本特性\"></a> HTTP的基本特性</h3>\n<ul>\n<li>\n<p>HTTP是简单的</p>\n<p>虽然下一代HTP/2协议将HTTP消息封装到了帧中，HTTP大体上还是被设计得简单易读。HTTP报文能够被人读懂，还允许简单测试，降低了门槛。</p>\n</li>\n<li>\n<p>HTTP是可扩展的</p>\n<p>在HTTP/1.0中出现的HTTP headers让协议扩展变得非常容易</p>\n</li>\n<li>\n<p>HTTP是无状态，有会话的</p>\n<p>在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互。</p>\n</li>\n<li>\n<p>HTTP和连接</p>\n<p>一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。</p>\n</li>\n</ul>\n<h3 id=\"http能控制什么\"><a class=\"markdownIt-Anchor\" href=\"#http能控制什么\"></a> HTTP能控制什么</h3>\n<ul>\n<li>\n<p>缓存</p>\n</li>\n<li>\n<p>开放同源限制</p>\n</li>\n<li>\n<p>认证</p>\n<p>基本的认证功能可以直接通过HTTP提供，或用HTTP Cookies来设置指定的会话</p>\n</li>\n<li>\n<p>代理和隧道</p>\n<p>通常情况下，服务器和/或客户端是处于内网的，对外网隐藏真实IP地址。因此HTTP请求就要通过代理越过这个网络屏障。</p>\n</li>\n<li>\n<p>会话</p>\n</li>\n</ul>\n<h3 id=\"http流\"><a class=\"markdownIt-Anchor\" href=\"#http流\"></a> HTTP流</h3>\n<ol>\n<li>打开一个TCP连接：TCP连接被用来发送一条或多条请求，以及接受回应消息。</li>\n<li>发送一个HTTP报文：HTTP报文（在HTTP2之前）是语义可读的</li>\n<li>读取服务端返回的报文信息</li>\n<li>关闭连接或者为后续请求重用连接。</li>\n</ol>\n","more":"<h2 id=\"http是什么\"><a class=\"markdownIt-Anchor\" href=\"#http是什么\"></a> HTTP是什么？</h2>\n<p>HTP全称为 Hypertext Transfer Protocol，被译为超文本传输协议，是互联网上应用最为广泛的一种网络协议。<br />\nHTTP协议是在Web上进行数据交换的基础，是一种“客户端——服务器端”协议。也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。<br />\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>\n<h2 id=\"http请求与响应消息\"><a class=\"markdownIt-Anchor\" href=\"#http请求与响应消息\"></a> HTTP请求与响应消息</h2>\n<p>客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。</p>\n<ul>\n<li>由像浏览器这样的客户端发出的消息叫做请求（requests)</li>\n<li>被服务端回应的消息叫做响应（responses）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/7ba65ab11d3acf3e0ac33555169f6bdc.png\" alt=\"image-20200807213324882\" /></p>\n<h2 id=\"基于http的组件系统\"><a class=\"markdownIt-Anchor\" href=\"#基于http的组件系统\"></a> 基于HTTP的组件系统</h2>\n<p>请求通过一个实体被发出，实体也就是用户代理。大多数情况下，这个用户代理都是指刘览器。</p>\n<p>每一个发送到服务器的请求，都会被服务器处理井返回一个消息，也就是响应。</p>\n<p>在这个请求与回应之间，还有许许多多的被称为 Proxies的实体，他们的作用与表现各不同。</p>\n<h3 id=\"客户端\"><a class=\"markdownIt-Anchor\" href=\"#客户端\"></a> 客户端</h3>\n<p>user-agent就是任何能够为用户发起行为的工具。这个角色通常都是由刘览器来扮演。一些例外情况，比如是工程师使用的程序，以及Web开发人员调试应用程序。</p>\n<p>测览器总是作为发起一个请求的实体（近几年已经出现一些机制能够模拟由服务器起的请求消息，例姒如Node.js)</p>\n<p>浏览器首先发送一个请求来获取页面的HTML文档，再解析文档中的资源信息发送其他请求，获取可执行脚本或CSS样式来进行页面布局這染，以及一些其它页面资源（如图片和视频等）。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/08/07/d253ad0ba74f7ec11c7c142812144714.png\" alt=\"image-20200807215546565\" /></p>\n<h3 id=\"web服务器\"><a class=\"markdownIt-Anchor\" href=\"#web服务器\"></a> Web服务器</h3>\n<p>在HTTP协议通信过程的另一端，是由Web服务器来服务并提供客户端所请求的文档。服务器只是虚拟意义上代表一个机器：它可以是共享负载（负载均衡）的一组服务器组成的计算机群，也可以是种复杂的软件，通过向其他计算机（如缓存，数据库服务器，电子商务服务器等）发起请求来获取部分或全部资源。</p>\n<p>Web服务不ー定是一台机器，但一个机器上可以装载的众多Web服务。</p>\n<h3 id=\"代理proxies\"><a class=\"markdownIt-Anchor\" href=\"#代理proxies\"></a> 代理（Proxies）</h3>\n<p>在洳览器和服务器之间，有许多计算机和其他设备转发了HTTP消息。由于Web栈层次结构的原因它们大多都出现在传输层、网络层和物理层上，对于HTTP应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为代理（ Proxies）。代理（ Proxies）既可以表现得透明，又可以不透明（“改变请求”会通过它们）。代理主要有如下几种作用：</p>\n<ul>\n<li>缓存（可以是公开的也可以是私有的，像浏览器的缓存）</li>\n<li>过滤（像反病毒扫描，家长控制）</li>\n<li>负载均衡（让多个服务器服务不同的请求）</li>\n<li>认证（对不同资源进行权限管理）</li>\n<li>日志记录（允许存储历史信息）</li>\n</ul>\n<h2 id=\"http的相关概念\"><a class=\"markdownIt-Anchor\" href=\"#http的相关概念\"></a> HTTP的相关概念</h2>\n<h3 id=\"http的基本特性\"><a class=\"markdownIt-Anchor\" href=\"#http的基本特性\"></a> HTTP的基本特性</h3>\n<ul>\n<li>\n<p>HTTP是简单的</p>\n<p>虽然下一代HTP/2协议将HTTP消息封装到了帧中，HTTP大体上还是被设计得简单易读。HTTP报文能够被人读懂，还允许简单测试，降低了门槛。</p>\n</li>\n<li>\n<p>HTTP是可扩展的</p>\n<p>在HTTP/1.0中出现的HTTP headers让协议扩展变得非常容易</p>\n</li>\n<li>\n<p>HTTP是无状态，有会话的</p>\n<p>在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互。</p>\n</li>\n<li>\n<p>HTTP和连接</p>\n<p>一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。</p>\n</li>\n</ul>\n<h3 id=\"http能控制什么\"><a class=\"markdownIt-Anchor\" href=\"#http能控制什么\"></a> HTTP能控制什么</h3>\n<ul>\n<li>\n<p>缓存</p>\n</li>\n<li>\n<p>开放同源限制</p>\n</li>\n<li>\n<p>认证</p>\n<p>基本的认证功能可以直接通过HTTP提供，或用HTTP Cookies来设置指定的会话</p>\n</li>\n<li>\n<p>代理和隧道</p>\n<p>通常情况下，服务器和/或客户端是处于内网的，对外网隐藏真实IP地址。因此HTTP请求就要通过代理越过这个网络屏障。</p>\n</li>\n<li>\n<p>会话</p>\n</li>\n</ul>\n<h3 id=\"http流\"><a class=\"markdownIt-Anchor\" href=\"#http流\"></a> HTTP流</h3>\n<ol>\n<li>打开一个TCP连接：TCP连接被用来发送一条或多条请求，以及接受回应消息。</li>\n<li>发送一个HTTP报文：HTTP报文（在HTTP2之前）是语义可读的</li>\n<li>读取服务端返回的报文信息</li>\n<li>关闭连接或者为后续请求重用连接。</li>\n</ol>\n","categories":[{"name":"HTTP网络协议","path":"api/categories/HTTP网络协议.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"},{"name":"网络编程","path":"api/tags/网络编程.json"}]}