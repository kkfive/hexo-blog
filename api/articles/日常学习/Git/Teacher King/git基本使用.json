{"title":"git的基本使用","slug":"日常学习/Git/Teacher King/git基本使用","date":"2020-08-15T02:40:00.000Z","updated":"2022-02-21T05:08:50.390Z","comments":true,"path":"api/articles/日常学习/Git/Teacher King/git基本使用.json","excerpt":null,"covers":["https://files.alexhchu.com/2020/08/15/921fcc97345ab.png","https://files.alexhchu.com/2020/08/15/f4dd7cf11652f.png","https://files.alexhchu.com/2020/08/15/d5e43993f607c.png","https://files.alexhchu.com/2020/08/15/4dffffdbab440.png","https://files.alexhchu.com/2020/08/15/199a43bd6ebcd.png","https://files.alexhchu.com/2020/08/15/773c9c1e5577d.png","https://files.alexhchu.com/2020/08/15/cd41f6f1f54b7.png","https://rmt.ladydaily.com/fetch/tzk/storage/20201029145104.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20201029145123.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20201029145021.png?w=1280&amp;fmt=jpg","https://files.alexhchu.com/2020/08/15/1bca247edcd52.png","https://files.alexhchu.com/2020/08/15/319fb6ea2f524.png","https://files.alexhchu.com/2020/08/15/bd5cf6dca6092.png","https://files.alexhchu.com/2020/08/15/834da7f59f2e5.png","https://files.alexhchu.com/2020/08/15/431fbdb20c79d.png","https://files.alexhchu.com/2020/08/15/94d91c4d974a5.png","https://files.alexhchu.com/2020/08/15/26b66e2fa4c8f.png","https://files.alexhchu.com/2020/08/15/0e83cbedad5bf.png","https://files.alexhchu.com/2020/08/15/2128d79019559.png"],"content":"<h2 id=\"git是什么\"><a class=\"markdownIt-Anchor\" href=\"#git是什么\"></a> Git是什么</h2>\n<blockquote>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/921fcc97345ab.png\" alt=\"image-20200815104605450\" /></p>\n<p>分布式版本控制系统的安全性要高很多，因为每个开发人员电脑里都有完整的版本库，某一个开发人员的电脑坏掉了不要紧，随便从其他开发人员那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有开发人员都没法工作。</p>\n</blockquote>\n<p>Gt是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>\n<p>G是Linus Torvalds为了帮助管理 Linux内核开发而开发的一个开放源码的版本控制软件。 Torvalds开始着手开发Gt是为了作为一种过渡方来替代Bitkeeper，后者之前一直是Lnux内核开发人员在全球使用的主要源代码工具。</p>\n<p>尽管最初Git的开发是为了辅助Linux内核开发的过程，但是已经发现在很多其他自由软件项目中也使用了Git。</p>\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\"></a> GIT</h2>\n<p>安装可以到<a href=\"https://git-scm.com/\">官网</a>下载对应系统的安装包进行安装。然后正常的安装流程即可。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/f4dd7cf11652f.png\" alt=\"image-20200815112858150\" /></p>\n<h3 id=\"安装后的配置\"><a class=\"markdownIt-Anchor\" href=\"#安装后的配置\"></a> 安装后的配置</h3>\n<p>通过右键即可看到<code>Git Bash Here</code>，即可打开git bash工具。</p>\n<p>通过输入<code>git --version</code>也可以看到版本号。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/d5e43993f607c.png\" alt=\"image-20200815105432030\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Your Name\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"email@example.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装完成后需要设置用户信息，因为Git是分布式版本控制系统，所以每一台电脑注册用户信息（名称和Emai地址）。</p>\n<p>值得注意的是， git config命令的 global参数，表示当前这台电脑上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Emai地址。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">git config user<span class=\"token punctuation\">.</span>name <span class=\"token string\">'你的名字'</span>\ngit config user<span class=\"token punctuation\">.</span>email <span class=\"token string\">'你的邮箱'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"查看配置\"><a class=\"markdownIt-Anchor\" href=\"#查看配置\"></a> 查看配置</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 打印所有config</span>\n<span class=\"token function\">git</span> config --list\n<span class=\"token comment\"># 打印指定config</span>\n<span class=\"token function\">git</span> config user.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"工作区-暂存区和版本库\"><a class=\"markdownIt-Anchor\" href=\"#工作区-暂存区和版本库\"></a> 工作区、暂存区和版本库</h3>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/4dffffdbab440.png\" alt=\"image-20200815110308616\" /></p>\n<ul>\n<li>\n<p>工作区</p>\n<p>当前电脑里能看到的目录</p>\n</li>\n<li>\n<p>暂存区</p>\n<p>英文交stage或index。一般存放在<code>.git</code>目录下的index文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（index）</p>\n</li>\n<li>\n<p>版本库</p>\n<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>\n</li>\n</ul>\n<h3 id=\"git常见的操作\"><a class=\"markdownIt-Anchor\" href=\"#git常见的操作\"></a> Git常见的操作</h3>\n<ol>\n<li>\n<p>clone</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone Repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/199a43bd6ebcd.png\" alt=\"image-20200815111357538\" /></p>\n</li>\n<li>\n<p>添加到版本库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> fileName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/773c9c1e5577d.png\" alt=\"image-20200815111513972\" /></p>\n<blockquote>\n<p>需要进入到版本库目录才可以使用此命令。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加单个文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token number\">1</span>.txt\n\n<span class=\"token comment\"># 添加多个文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token number\">2</span>.txt <span class=\"token number\">3</span>.txt\n\n<span class=\"token comment\"># 添加整个目录</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> ./a\n\n<span class=\"token comment\"># 添加多个目录</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> ./b ./c\n\n<span class=\"token comment\"># 添加所有文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>将添加的文件提交到版本库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">'message'</span> <span class=\"token punctuation\">[</span>file Name<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/cd41f6f1f54b7.png\" alt=\"image-20200815111715947\" /></p>\n<blockquote>\n<p><code>git commit</code>命令后可以添加文件名称，表示只提交这个文件，但一般不会跟文件名称，表示全部提交。</p>\n</blockquote>\n<p>也可以直接使用<code>git commit</code>命令，会调用出默认的编辑器去编辑信息。修改默认的编辑器</p>\n<p>以vacode为例（Windows）。首先在命令行输入<code>code</code>，如果能正常出现vscode编辑器，那么直接输入以下命令即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config core.editor notepad<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果不能出现vscode编辑器，那么将VSCode目录下的<code>bin</code>目录添加到环境变量，然后运行上面的命令即可。</p>\n<blockquote>\n<p>MAC及Linux环境下配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加 vscode 编辑器 - mac</span>\n<span class=\"token comment\"># 通过 vim 打开环境变量配置文件</span>\n<span class=\"token function\">vim</span> ~/.bash_profile\n<span class=\"token comment\"># 添加环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/Applications/Visual<span class=\"token punctuation\">\\</span> Studio<span class=\"token punctuation\">\\</span> Code.app/Contents/Resources/app/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token comment\"># 保存退出</span>\n<span class=\"token builtin class-name\">source</span> ~/.bash_profile\n<span class=\"token comment\"># 测试：在终端中直接通过命令 code 调用 vscode</span>\n<span class=\"token function\">git</span> config --global core.editor <span class=\"token string\">\"code --wait\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p>日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 完整格式\n<span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145104.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145104369\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 简要格式（单行）\n<span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145123.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145122973\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// graph模式\n<span class=\"token function\">git</span> log --all --graph<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145021.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145021216\" /></p>\n</li>\n<li>\n<p>修复上次提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit --amend -m 提交<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将本地版本库Push到远程库中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push URL master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/1bca247edcd52.png\" alt=\"image-20200815112810004\" /></p>\n</li>\n<li>\n<p>从远程库更新到本地库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/319fb6ea2f524.png\" alt=\"image-20200815113234094\" /></p>\n</li>\n<li>\n<p>查看上次修改的信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>查看执行git status命令结果的详情信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>git diff</code>命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。</p>\n<ul>\n<li>\n<p>查看尚未缓存的改动</p>\n<p><code>git dff</code></p>\n</li>\n<li>\n<p>查看已缓存的改动</p>\n<p><code>git diff --cached</code></p>\n</li>\n<li>\n<p>查看已缓存的与未缓存的所有改动</p>\n<p><code>git diff HEAD</code></p>\n</li>\n<li>\n<p>显示摘要而非整个dif</p>\n<p><code>git diff --stat</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"git分支管理\"><a class=\"markdownIt-Anchor\" href=\"#git分支管理\"></a> Git分支管理</h2>\n<p>每一种版本控制系统都以某种形式支持分支。使用分支意味着可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p>有人把Git的分支模型称为&quot;必杀技特性&quot;,而正是因为它，将Git从版本控制系统家族里区分出来。</p>\n<ol>\n<li>\n<p>创建分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/bd5cf6dca6092.png\" alt=\"image-20200815114513318\" /></p>\n<p>如果只输入<code>git branch</code>那么将显示当前的分支，有标识的表示当前正在使用的分支。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/834da7f59f2e5.png\" alt=\"image-20200815114620749\" /></p>\n</li>\n<li>\n<p>切换分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/431fbdb20c79d.png\" alt=\"image-20200815114719083\" /></p>\n</li>\n<li>\n<p>合并分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换到主分支</span>\n<span class=\"token function\">git</span> checkout master\n<span class=\"token comment\"># 将某个分支合并到master分支</span>\n<span class=\"token function\">git</span> merge name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果两个分支同一文件同一行都发生了修改，那么将不会自动合并分支，而是需要处理冲突。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/94d91c4d974a5.png\" alt=\"image-20200815115610742\" /></p>\n</li>\n<li>\n<p>删除分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/26b66e2fa4c8f.png\" alt=\"image-20200815120329189\" /></p>\n</li>\n<li>\n<p>推送分支时，删除多余分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin --delete branchName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"合并分支遇到冲突\"><a class=\"markdownIt-Anchor\" href=\"#合并分支遇到冲突\"></a> 合并分支遇到冲突</h3>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/0e83cbedad5bf.png\" alt=\"image-20200815115757045\" /></p>\n<p>可以通过VSCODE中的插件进行快速的合并。合并完成后通过<code>git add</code>命令告诉git冲突已经解决。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/2128d79019559.png\" alt=\"image-20200815120034510\" /></p>\n","more":"<h2 id=\"git是什么\"><a class=\"markdownIt-Anchor\" href=\"#git是什么\"></a> Git是什么</h2>\n<blockquote>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/921fcc97345ab.png\" alt=\"image-20200815104605450\" /></p>\n<p>分布式版本控制系统的安全性要高很多，因为每个开发人员电脑里都有完整的版本库，某一个开发人员的电脑坏掉了不要紧，随便从其他开发人员那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有开发人员都没法工作。</p>\n</blockquote>\n<p>Gt是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>\n<p>G是Linus Torvalds为了帮助管理 Linux内核开发而开发的一个开放源码的版本控制软件。 Torvalds开始着手开发Gt是为了作为一种过渡方来替代Bitkeeper，后者之前一直是Lnux内核开发人员在全球使用的主要源代码工具。</p>\n<p>尽管最初Git的开发是为了辅助Linux内核开发的过程，但是已经发现在很多其他自由软件项目中也使用了Git。</p>\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\"></a> GIT</h2>\n<p>安装可以到<a href=\"https://git-scm.com/\">官网</a>下载对应系统的安装包进行安装。然后正常的安装流程即可。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/f4dd7cf11652f.png\" alt=\"image-20200815112858150\" /></p>\n<h3 id=\"安装后的配置\"><a class=\"markdownIt-Anchor\" href=\"#安装后的配置\"></a> 安装后的配置</h3>\n<p>通过右键即可看到<code>Git Bash Here</code>，即可打开git bash工具。</p>\n<p>通过输入<code>git --version</code>也可以看到版本号。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/d5e43993f607c.png\" alt=\"image-20200815105432030\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"Your Name\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"email@example.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>安装完成后需要设置用户信息，因为Git是分布式版本控制系统，所以每一台电脑注册用户信息（名称和Emai地址）。</p>\n<p>值得注意的是， git config命令的 global参数，表示当前这台电脑上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Emai地址。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">git config user<span class=\"token punctuation\">.</span>name <span class=\"token string\">'你的名字'</span>\ngit config user<span class=\"token punctuation\">.</span>email <span class=\"token string\">'你的邮箱'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"查看配置\"><a class=\"markdownIt-Anchor\" href=\"#查看配置\"></a> 查看配置</h3>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 打印所有config</span>\n<span class=\"token function\">git</span> config --list\n<span class=\"token comment\"># 打印指定config</span>\n<span class=\"token function\">git</span> config user.name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"工作区-暂存区和版本库\"><a class=\"markdownIt-Anchor\" href=\"#工作区-暂存区和版本库\"></a> 工作区、暂存区和版本库</h3>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/4dffffdbab440.png\" alt=\"image-20200815110308616\" /></p>\n<ul>\n<li>\n<p>工作区</p>\n<p>当前电脑里能看到的目录</p>\n</li>\n<li>\n<p>暂存区</p>\n<p>英文交stage或index。一般存放在<code>.git</code>目录下的index文件（<code>.git/index</code>）中，所以我们把暂存区有时也叫作索引（index）</p>\n</li>\n<li>\n<p>版本库</p>\n<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>\n</li>\n</ul>\n<h3 id=\"git常见的操作\"><a class=\"markdownIt-Anchor\" href=\"#git常见的操作\"></a> Git常见的操作</h3>\n<ol>\n<li>\n<p>clone</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone Repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/199a43bd6ebcd.png\" alt=\"image-20200815111357538\" /></p>\n</li>\n<li>\n<p>添加到版本库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> fileName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/773c9c1e5577d.png\" alt=\"image-20200815111513972\" /></p>\n<blockquote>\n<p>需要进入到版本库目录才可以使用此命令。</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加单个文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token number\">1</span>.txt\n\n<span class=\"token comment\"># 添加多个文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token number\">2</span>.txt <span class=\"token number\">3</span>.txt\n\n<span class=\"token comment\"># 添加整个目录</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> ./a\n\n<span class=\"token comment\"># 添加多个目录</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> ./b ./c\n\n<span class=\"token comment\"># 添加所有文件</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>将添加的文件提交到版本库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -m <span class=\"token string\">'message'</span> <span class=\"token punctuation\">[</span>file Name<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/cd41f6f1f54b7.png\" alt=\"image-20200815111715947\" /></p>\n<blockquote>\n<p><code>git commit</code>命令后可以添加文件名称，表示只提交这个文件，但一般不会跟文件名称，表示全部提交。</p>\n</blockquote>\n<p>也可以直接使用<code>git commit</code>命令，会调用出默认的编辑器去编辑信息。修改默认的编辑器</p>\n<p>以vacode为例（Windows）。首先在命令行输入<code>code</code>，如果能正常出现vscode编辑器，那么直接输入以下命令即可。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config core.editor notepad<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果不能出现vscode编辑器，那么将VSCode目录下的<code>bin</code>目录添加到环境变量，然后运行上面的命令即可。</p>\n<blockquote>\n<p>MAC及Linux环境下配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 添加 vscode 编辑器 - mac</span>\n<span class=\"token comment\"># 通过 vim 打开环境变量配置文件</span>\n<span class=\"token function\">vim</span> ~/.bash_profile\n<span class=\"token comment\"># 添加环境变量</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/Applications/Visual<span class=\"token punctuation\">\\</span> Studio<span class=\"token punctuation\">\\</span> Code.app/Contents/Resources/app/bin:<span class=\"token environment constant\">$PATH</span>\n<span class=\"token comment\"># 保存退出</span>\n<span class=\"token builtin class-name\">source</span> ~/.bash_profile\n<span class=\"token comment\"># 测试：在终端中直接通过命令 code 调用 vscode</span>\n<span class=\"token function\">git</span> config --global core.editor <span class=\"token string\">\"code --wait\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n</li>\n<li>\n<p>日志</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 完整格式\n<span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145104.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145104369\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 简要格式（单行）\n<span class=\"token function\">git</span> log --oneline<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145123.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145122973\" /></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// graph模式\n<span class=\"token function\">git</span> log --all --graph<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201029145021.png?w=1280&amp;fmt=jpg\" alt=\"image-20201029145021216\" /></p>\n</li>\n<li>\n<p>修复上次提交</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit --amend -m 提交<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>将本地版本库Push到远程库中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push URL master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/1bca247edcd52.png\" alt=\"image-20200815112810004\" /></p>\n</li>\n<li>\n<p>从远程库更新到本地库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/319fb6ea2f524.png\" alt=\"image-20200815113234094\" /></p>\n</li>\n<li>\n<p>查看上次修改的信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>查看执行git status命令结果的详情信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>git diff</code>命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。</p>\n<ul>\n<li>\n<p>查看尚未缓存的改动</p>\n<p><code>git dff</code></p>\n</li>\n<li>\n<p>查看已缓存的改动</p>\n<p><code>git diff --cached</code></p>\n</li>\n<li>\n<p>查看已缓存的与未缓存的所有改动</p>\n<p><code>git diff HEAD</code></p>\n</li>\n<li>\n<p>显示摘要而非整个dif</p>\n<p><code>git diff --stat</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"git分支管理\"><a class=\"markdownIt-Anchor\" href=\"#git分支管理\"></a> Git分支管理</h2>\n<p>每一种版本控制系统都以某种形式支持分支。使用分支意味着可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>\n<p>有人把Git的分支模型称为&quot;必杀技特性&quot;,而正是因为它，将Git从版本控制系统家族里区分出来。</p>\n<ol>\n<li>\n<p>创建分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/bd5cf6dca6092.png\" alt=\"image-20200815114513318\" /></p>\n<p>如果只输入<code>git branch</code>那么将显示当前的分支，有标识的表示当前正在使用的分支。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/834da7f59f2e5.png\" alt=\"image-20200815114620749\" /></p>\n</li>\n<li>\n<p>切换分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/431fbdb20c79d.png\" alt=\"image-20200815114719083\" /></p>\n</li>\n<li>\n<p>合并分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换到主分支</span>\n<span class=\"token function\">git</span> checkout master\n<span class=\"token comment\"># 将某个分支合并到master分支</span>\n<span class=\"token function\">git</span> merge name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果两个分支同一文件同一行都发生了修改，那么将不会自动合并分支，而是需要处理冲突。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/94d91c4d974a5.png\" alt=\"image-20200815115610742\" /></p>\n</li>\n<li>\n<p>删除分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch -d dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/26b66e2fa4c8f.png\" alt=\"image-20200815120329189\" /></p>\n</li>\n<li>\n<p>推送分支时，删除多余分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin --delete branchName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"合并分支遇到冲突\"><a class=\"markdownIt-Anchor\" href=\"#合并分支遇到冲突\"></a> 合并分支遇到冲突</h3>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/0e83cbedad5bf.png\" alt=\"image-20200815115757045\" /></p>\n<p>可以通过VSCODE中的插件进行快速的合并。合并完成后通过<code>git add</code>命令告诉git冲突已经解决。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/15/2128d79019559.png\" alt=\"image-20200815120034510\" /></p>\n","categories":[{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}