{"title":"Python网络编程","slug":"日常学习/技术相关/Python/Python网络编程","date":"2019-11-02T16:00:00.000Z","updated":"2022-02-21T04:45:27.392Z","comments":true,"path":"api/articles/日常学习/技术相关/Python/Python网络编程.json","excerpt":null,"covers":["https://tva1.sinaimg.cn/large/832afe33ly1g8kpgdi8aoj22oh19dwra.jpg"],"content":"<h1 id=\"基础理论知识\"><a class=\"markdownIt-Anchor\" href=\"#基础理论知识\"></a> 基础理论知识</h1>\n<h2 id=\"cs-bs架构\"><a class=\"markdownIt-Anchor\" href=\"#cs-bs架构\"></a> C/S 、B/S架构</h2>\n<table>\n<thead>\n<tr>\n<th>架构名称</th>\n<th>定义</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/S</td>\n<td>基于客户端与用户端之间的架构</td>\n<td>界面和操作丰富，安全性容易保证，响应速度快</td>\n<td>需要开发两套程序，开发维护成本高，兼容性差</td>\n</tr>\n<tr>\n<td>B/S</td>\n<td>基于C/S架构的一种特殊的C/S架构，浏览器与服务端之间的架构。</td>\n<td>分布性强，客户端几乎不需要维护，开发简单，共享性强，维护简单方便</td>\n<td>个性化低，安全性及响应速度需要花费巨大设计成本</td>\n</tr>\n</tbody>\n</table>\n<p>CS响应速度快，安全性强，一般应用于局域网中，但是开发维护成本高；BS可以实现跨平台，客户端零维护，但是个性化能力低，响应速度较慢。所以有些单位日常办公应用BS，在实际生产中使用CS结构。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8kpgdi8aoj22oh19dwra.jpg\" alt=\"OSI七层.png\" /></p>\n<h1 id=\"网络通信\"><a class=\"markdownIt-Anchor\" href=\"#网络通信\"></a> 网络通信</h1>\n<h2 id=\"单个客户端与服务端通信\"><a class=\"markdownIt-Anchor\" href=\"#单个客户端与服务端通信\"></a> 单个客户端与服务端通信</h2>\n<p>服务端代码示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># 1. 创建socket对象（买电话）</span>\nphone <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数可以默认不写</span>\n\n<span class=\"token comment\"># 2. 绑定IP地址和端口  # 安装电话卡</span>\nphone<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">8848</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 监听（开机）</span>\nphone<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. 等待电话连接（等别人给你打电话）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start...'</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">,</span>client_addr <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时运行就会一直阻塞住。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接来了：'</span><span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">,</span>client_addr<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. 接受消息</span>\nmsg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 每次至多读取1024个字节</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'客户端的消息：'</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6. 关闭连接</span>\nconn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 7. 关机</span>\nphone<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>socket.AF_INET</code>：基于网络的socket套接字。</p>\n<p><code>socket.SOCK_STREAM</code>：基于TCP协议的socket套接字。</p>\n<p><code>phone.listen</code>:这个知识点有一些不容易理解，服务端开启之后，等待客户端连接，listen做了一个客户端数量的限定，listen(n)只有n+1的客户端可以连接上我的服务端，但是连接上之后，只有第一个客户端可以与服务端进行互相通信，其他的n个客户端已经成功建立链接但是需要等待第一个客户端结束之后，逐一进行通信，通信之前的状态都是阻塞状态；n+1以外的客户端虽然也是阻塞，但是是连链接都建立不成的，就是单纯的阻塞。只有第一客户端结束之后，剩余的才可以逐一建立链接等待。这个其实与服务端开启的半链接池相关，什么叫半链接池？服务端开启之后，只要有客户端链接我，理论上来说都可以与我建立链接的，但是只要建立链接，在我服务端就会占有一定的内存，暂存这些链接数据，试想一下，如果1000万个链接进入我的服务端的内存，这样会极大的浪费内存资源，所以服务端设置一个半链接池，只允许n+1个客户端与我服务端建立链接，剩下的客户端也是处于阻塞状态，但是不会进入我的内存，这样可以控制客户端的数量，节省内存。</p>\n<p><code>accept</code>：服务端会处于阻塞状态，直至有客户端链接我，服务端代码才会向下执行。</p>\n</blockquote>\n<p>客户端代码示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># 1. 创建socket对象（买电话）</span>\nphone <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. 与服务端建立链接</span>\nphone<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">8848</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 发消息</span>\nphone<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfrom_server_data <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>from_server_data<span class=\"token punctuation\">)</span>\n\nphone<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h1 id=\"基础理论知识\"><a class=\"markdownIt-Anchor\" href=\"#基础理论知识\"></a> 基础理论知识</h1>\n<h2 id=\"cs-bs架构\"><a class=\"markdownIt-Anchor\" href=\"#cs-bs架构\"></a> C/S 、B/S架构</h2>\n<table>\n<thead>\n<tr>\n<th>架构名称</th>\n<th>定义</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C/S</td>\n<td>基于客户端与用户端之间的架构</td>\n<td>界面和操作丰富，安全性容易保证，响应速度快</td>\n<td>需要开发两套程序，开发维护成本高，兼容性差</td>\n</tr>\n<tr>\n<td>B/S</td>\n<td>基于C/S架构的一种特殊的C/S架构，浏览器与服务端之间的架构。</td>\n<td>分布性强，客户端几乎不需要维护，开发简单，共享性强，维护简单方便</td>\n<td>个性化低，安全性及响应速度需要花费巨大设计成本</td>\n</tr>\n</tbody>\n</table>\n<p>CS响应速度快，安全性强，一般应用于局域网中，但是开发维护成本高；BS可以实现跨平台，客户端零维护，但是个性化能力低，响应速度较慢。所以有些单位日常办公应用BS，在实际生产中使用CS结构。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/832afe33ly1g8kpgdi8aoj22oh19dwra.jpg\" alt=\"OSI七层.png\" /></p>\n<h1 id=\"网络通信\"><a class=\"markdownIt-Anchor\" href=\"#网络通信\"></a> 网络通信</h1>\n<h2 id=\"单个客户端与服务端通信\"><a class=\"markdownIt-Anchor\" href=\"#单个客户端与服务端通信\"></a> 单个客户端与服务端通信</h2>\n<p>服务端代码示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># 1. 创建socket对象（买电话）</span>\nphone <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 参数可以默认不写</span>\n\n<span class=\"token comment\"># 2. 绑定IP地址和端口  # 安装电话卡</span>\nphone<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">8848</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 监听（开机）</span>\nphone<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 4. 等待电话连接（等别人给你打电话）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start...'</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">,</span>client_addr <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 此时运行就会一直阻塞住。</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接来了：'</span><span class=\"token punctuation\">,</span>conn<span class=\"token punctuation\">,</span>client_addr<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 5. 接受消息</span>\nmsg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 每次至多读取1024个字节</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'客户端的消息：'</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 6. 关闭连接</span>\nconn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 7. 关机</span>\nphone<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><code>socket.AF_INET</code>：基于网络的socket套接字。</p>\n<p><code>socket.SOCK_STREAM</code>：基于TCP协议的socket套接字。</p>\n<p><code>phone.listen</code>:这个知识点有一些不容易理解，服务端开启之后，等待客户端连接，listen做了一个客户端数量的限定，listen(n)只有n+1的客户端可以连接上我的服务端，但是连接上之后，只有第一个客户端可以与服务端进行互相通信，其他的n个客户端已经成功建立链接但是需要等待第一个客户端结束之后，逐一进行通信，通信之前的状态都是阻塞状态；n+1以外的客户端虽然也是阻塞，但是是连链接都建立不成的，就是单纯的阻塞。只有第一客户端结束之后，剩余的才可以逐一建立链接等待。这个其实与服务端开启的半链接池相关，什么叫半链接池？服务端开启之后，只要有客户端链接我，理论上来说都可以与我建立链接的，但是只要建立链接，在我服务端就会占有一定的内存，暂存这些链接数据，试想一下，如果1000万个链接进入我的服务端的内存，这样会极大的浪费内存资源，所以服务端设置一个半链接池，只允许n+1个客户端与我服务端建立链接，剩下的客户端也是处于阻塞状态，但是不会进入我的内存，这样可以控制客户端的数量，节省内存。</p>\n<p><code>accept</code>：服务端会处于阻塞状态，直至有客户端链接我，服务端代码才会向下执行。</p>\n</blockquote>\n<p>客户端代码示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> socket\n\n<span class=\"token comment\"># 1. 创建socket对象（买电话）</span>\nphone <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. 与服务端建立链接</span>\nphone<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">8848</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 3. 发消息</span>\nphone<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfrom_server_data <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>from_server_data<span class=\"token punctuation\">)</span>\n\nphone<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"}]}