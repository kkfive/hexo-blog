{"title":"原生JS实现一个Ajax跨域请求","slug":"日常学习/技术相关/大前端/Ajax异步交互与跨域访问/1. Ajax基础/原生JS实现一个Ajax跨域请求","date":"2020-08-29T09:52:01.000Z","updated":"2022-02-21T06:11:10.028Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/Ajax异步交互与跨域访问/1. Ajax基础/原生JS实现一个Ajax跨域请求.json","excerpt":null,"covers":["https://files.alexhchu.com/2020/08/28/aeafa65fd1958.gif","https://files.alexhchu.com/2020/08/29/37888798bf017.png","https://files.alexhchu.com/2020/08/29/368f2d89b4cd3.png","https://files.alexhchu.com/2020/08/29/f2da6cccf680a.png"],"content":"<h2 id=\"什么ajax\"><a class=\"markdownIt-Anchor\" href=\"#什么ajax\"></a> 什么Ajax</h2>\n<p>在现实Ajax之前，我们需要了解下什么Ajax？</p>\n<p>Asynchronous JavaScript + XML（异步 JavaScript 和 XML）, 其本身不是一种新技术，而是一个在 2005 年被 Jesse James Garrett 提出的新术语，用来描述一种使用现有技术集合的‘新’方法。</p>\n<p>当使用结合了这些技术的 AJAX 模型以后， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。</p>\n<h2 id=\"异步交互\"><a class=\"markdownIt-Anchor\" href=\"#异步交互\"></a> 异步交互</h2>\n<p>接下来便要弄清楚什么是异步交互。</p>\n<p>所谓异步交互，就是指指发送一个请求，不需要等待返回，随时可以再发送下一个请求。同步交互与异步交互的区别在于同步交互需要等待结果，而异步交互不需要等待。</p>\n<p>举个简单的例子就是当点击某个按钮后，程序会去请求一些数据，而这个过程整个页面是不会刷新的。如下图所示，异步获取一言并且显示在页面中</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/28/aeafa65fd1958.gif\" alt=\"e1137ef9-a733-41df-a6bb-af0e14452124\" /></p>\n<h2 id=\"快速开始\"><a class=\"markdownIt-Anchor\" href=\"#快速开始\"></a> 快速开始</h2>\n<h3 id=\"一核心对象\"><a class=\"markdownIt-Anchor\" href=\"#一核心对象\"></a> 一：核心对象</h3>\n<p>关于核心对象：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></p>\n<p>核心对象是实现Ajax的关键所在，因为后边的一切方法都是基于这个核心对象进行操作。创建核心对象的方式固定，但需要注意的问题就是浏览器兼容问题（注意是IE）。</p>\n<ul>\n<li>\n<p>谷歌、火狐、safari等浏览器</p>\n<p>使用<code>new XMLHttpRequest()</code>的方式进行创建</p>\n</li>\n<li>\n<p>IE 7+</p>\n<p>使用<code>new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</code>方式进行创建</p>\n</li>\n<li>\n<p>IE 6-</p>\n<p>使用<code>new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code>方式进行创建</p>\n</li>\n</ul>\n<p>为了方便后期的使用，我会将其赋予window对象。并通过一个匿名函数，进行自动调用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 适用于非IE浏览器</span>\n      httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//   适用于IE浏览器</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// IE 7+</span>\n        httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Msxml2.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//   IE 6-</span>\n          httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> httpRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  window<span class=\"token punctuation\">.</span>createXMLHttpRequest <span class=\"token operator\">=</span> createXMLHttpRequest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将创建核心对象的代码写入某个js文件后，我们在html文件中进行引用并初始化核心对象，将其打印。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/37888798bf017.png\" alt=\"image-20200829180920024\" /></p>\n<p>可以看到我们的核心对象成功的被打印出来了。</p>\n<h3 id=\"二监听onreadystatechange事件\"><a class=\"markdownIt-Anchor\" href=\"#二监听onreadystatechange事件\"></a> 二：监听onreadystatechange事件</h3>\n<p>此事件可以通过核心对象<code>readyState</code>属性获取当前请求内容的状态，因此可以利用此状态来判断异步请求是否完成。</p>\n<p>监听很简单，调用核心对象的<code>onreadystatechange</code>方法即可进行监听。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>监听完事件后还没完，我们首先需要通过核心对象的<code>readyState</code>属性进行判断当前异步提交的状态，其次无论服务器端返回结果是什么（404，服务器错误等），<code>readyState</code>属性最终都会变成4，因此需要通过<code>status</code>属性判断响应码。<code>status</code>属性可以判断响应结果是否成功或者失败。</p>\n<blockquote>\n<p>关于readyState一共有五种状态，</p>\n<ul>\n<li>\n<p>0</p>\n<p>未初始化</p>\n</li>\n<li>\n<p>1</p>\n<p><code>open()</code>方法被调用</p>\n</li>\n<li>\n<p>2</p>\n<p><code>send()</code>方法被调用</p>\n</li>\n<li>\n<p>3</p>\n<p>正在相应</p>\n</li>\n<li>\n<p>4</p>\n<p>相应完毕</p>\n</li>\n</ul>\n<p>而响应码指的是网络请求返回的状态码，通常有200，301，404，502等状态码。其中200表示请求成功，也就是我们需要判断的条件。</p>\n</blockquote>\n<p>因此我们监听事件即可改为如下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"三设置请求方式及地址\"><a class=\"markdownIt-Anchor\" href=\"#三设置请求方式及地址\"></a> 三：设置请求方式及地址</h3>\n<p>设置请求方式及地址用到的是核心对象的<code>open</code>方法。此方法共有四种传参形式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但通常我们只会用第一种，其他三种可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open\">MDN</a></p>\n<p>这里我们以<a href=\"https://developer.hitokoto.cn/sentence/#%E6%97%B6%E9%97%B4%E8%A7%84%E5%88%92\">一言</a>接口为例，演示GET请求。所以我们的open传递两个参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"四设置发送的数据\"><a class=\"markdownIt-Anchor\" href=\"#四设置发送的数据\"></a> 四：设置发送的数据</h3>\n<p>发送数据使用<code>send()</code>方法即可。其中传入的参数为需要发送的数据。但是并非所有方式都需要传入数据。</p>\n<ul>\n<li>\n<p>请求方式为<code>GET</code>时</p>\n<p>传入参数一定为<code>null</code>，而不是与将数据当作参数传入</p>\n</li>\n<li>\n<p>请求方式<code>POST</code>时</p>\n<p>传入参数为需要提交的参数。格式为<code>key=value&amp;key=value</code>.传参格式可以通过<code>setRequestHeader</code>属性进行修改。</p>\n<p>例如<code>xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</code></p>\n</li>\n</ul>\n<p>因为一言的接口请求是通过<code>GET</code>方式获取的，因此我们传送的参数为<code>null</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"五处理数据\"><a class=\"markdownIt-Anchor\" href=\"#五处理数据\"></a> 五：处理数据</h3>\n<p>接下来只需要在第二步中在<em>当请求成功时执行的代码</em>部分进行编写处理代码。但是遇到一个问题，如何获得返回结果？通过核心对象<code>responseText</code>属性可以获取响应的内容。</p>\n<ol>\n<li>\n<p>先来打印下返回结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/368f2d89b4cd3.png\" alt=\"image-20200829215812773\" /></p>\n</li>\n<li>\n<p>处理数据</p>\n<p>很明显数据是一个字符串格式，那么为了方便处理，我们需要将他转换为JSON对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/f2da6cccf680a.png\" alt=\"image-20200829220108041\" /></p>\n<p>可以看到，刚刚的数据已经变成了一个js的对象。我们只需要将这个对象取出来，进行处理即可。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>hitokoto\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来页面中就显示了我们的一言。但是只有当刷新页面时才会更新一言，因此我们需要在做一个按钮，用来获取一言。</p>\n</li>\n</ol>\n<h2 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\"></a> 示例代码</h2>\n<p>在线地址：[<a href=\"https://tzk.acs.pw\">https://tzk.acs.pw</a>](<a href=\"https://tzk.acs.pw/2020-08/29/code/4\">https://tzk.acs.pw/2020-08/29/code/4</a>. JS_ajax.html)</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createXMLHttpRequestObject.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击获取<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span>\n            btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 1. 创建核心对象</span>\n                <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 2. 监听异步请求状态</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n                        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n                        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>hitokoto\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// 设置请求方式及地址</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 设置发送数据</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h2 id=\"什么ajax\"><a class=\"markdownIt-Anchor\" href=\"#什么ajax\"></a> 什么Ajax</h2>\n<p>在现实Ajax之前，我们需要了解下什么Ajax？</p>\n<p>Asynchronous JavaScript + XML（异步 JavaScript 和 XML）, 其本身不是一种新技术，而是一个在 2005 年被 Jesse James Garrett 提出的新术语，用来描述一种使用现有技术集合的‘新’方法。</p>\n<p>当使用结合了这些技术的 AJAX 模型以后， 网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。</p>\n<h2 id=\"异步交互\"><a class=\"markdownIt-Anchor\" href=\"#异步交互\"></a> 异步交互</h2>\n<p>接下来便要弄清楚什么是异步交互。</p>\n<p>所谓异步交互，就是指指发送一个请求，不需要等待返回，随时可以再发送下一个请求。同步交互与异步交互的区别在于同步交互需要等待结果，而异步交互不需要等待。</p>\n<p>举个简单的例子就是当点击某个按钮后，程序会去请求一些数据，而这个过程整个页面是不会刷新的。如下图所示，异步获取一言并且显示在页面中</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/28/aeafa65fd1958.gif\" alt=\"e1137ef9-a733-41df-a6bb-af0e14452124\" /></p>\n<h2 id=\"快速开始\"><a class=\"markdownIt-Anchor\" href=\"#快速开始\"></a> 快速开始</h2>\n<h3 id=\"一核心对象\"><a class=\"markdownIt-Anchor\" href=\"#一核心对象\"></a> 一：核心对象</h3>\n<p>关于核心对象：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></p>\n<p>核心对象是实现Ajax的关键所在，因为后边的一切方法都是基于这个核心对象进行操作。创建核心对象的方式固定，但需要注意的问题就是浏览器兼容问题（注意是IE）。</p>\n<ul>\n<li>\n<p>谷歌、火狐、safari等浏览器</p>\n<p>使用<code>new XMLHttpRequest()</code>的方式进行创建</p>\n</li>\n<li>\n<p>IE 7+</p>\n<p>使用<code>new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</code>方式进行创建</p>\n</li>\n<li>\n<p>IE 6-</p>\n<p>使用<code>new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code>方式进行创建</p>\n</li>\n</ul>\n<p>为了方便后期的使用，我会将其赋予window对象。并通过一个匿名函数，进行自动调用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 适用于非IE浏览器</span>\n      httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">//   适用于IE浏览器</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// IE 7+</span>\n        httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Msxml2.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">//   IE 6-</span>\n          httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> httpRequest<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  window<span class=\"token punctuation\">.</span>createXMLHttpRequest <span class=\"token operator\">=</span> createXMLHttpRequest<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将创建核心对象的代码写入某个js文件后，我们在html文件中进行引用并初始化核心对象，将其打印。</p>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/37888798bf017.png\" alt=\"image-20200829180920024\" /></p>\n<p>可以看到我们的核心对象成功的被打印出来了。</p>\n<h3 id=\"二监听onreadystatechange事件\"><a class=\"markdownIt-Anchor\" href=\"#二监听onreadystatechange事件\"></a> 二：监听onreadystatechange事件</h3>\n<p>此事件可以通过核心对象<code>readyState</code>属性获取当前请求内容的状态，因此可以利用此状态来判断异步请求是否完成。</p>\n<p>监听很简单，调用核心对象的<code>onreadystatechange</code>方法即可进行监听。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>监听完事件后还没完，我们首先需要通过核心对象的<code>readyState</code>属性进行判断当前异步提交的状态，其次无论服务器端返回结果是什么（404，服务器错误等），<code>readyState</code>属性最终都会变成4，因此需要通过<code>status</code>属性判断响应码。<code>status</code>属性可以判断响应结果是否成功或者失败。</p>\n<blockquote>\n<p>关于readyState一共有五种状态，</p>\n<ul>\n<li>\n<p>0</p>\n<p>未初始化</p>\n</li>\n<li>\n<p>1</p>\n<p><code>open()</code>方法被调用</p>\n</li>\n<li>\n<p>2</p>\n<p><code>send()</code>方法被调用</p>\n</li>\n<li>\n<p>3</p>\n<p>正在相应</p>\n</li>\n<li>\n<p>4</p>\n<p>相应完毕</p>\n</li>\n</ul>\n<p>而响应码指的是网络请求返回的状态码，通常有200，301，404，502等状态码。其中200表示请求成功，也就是我们需要判断的条件。</p>\n</blockquote>\n<p>因此我们监听事件即可改为如下代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"三设置请求方式及地址\"><a class=\"markdownIt-Anchor\" href=\"#三设置请求方式及地址\"></a> 三：设置请求方式及地址</h3>\n<p>设置请求方式及地址用到的是核心对象的<code>open</code>方法。此方法共有四种传参形式。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhrReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> async<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但通常我们只会用第一种，其他三种可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open\">MDN</a></p>\n<p>这里我们以<a href=\"https://developer.hitokoto.cn/sentence/#%E6%97%B6%E9%97%B4%E8%A7%84%E5%88%92\">一言</a>接口为例，演示GET请求。所以我们的open传递两个参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"四设置发送的数据\"><a class=\"markdownIt-Anchor\" href=\"#四设置发送的数据\"></a> 四：设置发送的数据</h3>\n<p>发送数据使用<code>send()</code>方法即可。其中传入的参数为需要发送的数据。但是并非所有方式都需要传入数据。</p>\n<ul>\n<li>\n<p>请求方式为<code>GET</code>时</p>\n<p>传入参数一定为<code>null</code>，而不是与将数据当作参数传入</p>\n</li>\n<li>\n<p>请求方式<code>POST</code>时</p>\n<p>传入参数为需要提交的参数。格式为<code>key=value&amp;key=value</code>.传参格式可以通过<code>setRequestHeader</code>属性进行修改。</p>\n<p>例如<code>xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</code></p>\n</li>\n</ul>\n<p>因为一言的接口请求是通过<code>GET</code>方式获取的，因此我们传送的参数为<code>null</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"五处理数据\"><a class=\"markdownIt-Anchor\" href=\"#五处理数据\"></a> 五：处理数据</h3>\n<p>接下来只需要在第二步中在<em>当请求成功时执行的代码</em>部分进行编写处理代码。但是遇到一个问题，如何获得返回结果？通过核心对象<code>responseText</code>属性可以获取响应的内容。</p>\n<ol>\n<li>\n<p>先来打印下返回结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/368f2d89b4cd3.png\" alt=\"image-20200829215812773\" /></p>\n</li>\n<li>\n<p>处理数据</p>\n<p>很明显数据是一个字符串格式，那么为了方便处理，我们需要将他转换为JSON对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://files.alexhchu.com/2020/08/29/f2da6cccf680a.png\" alt=\"image-20200829220108041\" /></p>\n<p>可以看到，刚刚的数据已经变成了一个js的对象。我们只需要将这个对象取出来，进行处理即可。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>hitokoto\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来页面中就显示了我们的一言。但是只有当刷新页面时才会更新一言，因此我们需要在做一个按钮，用来获取一言。</p>\n</li>\n</ol>\n<h2 id=\"示例代码\"><a class=\"markdownIt-Anchor\" href=\"#示例代码\"></a> 示例代码</h2>\n<p>在线地址：[<a href=\"https://tzk.acs.pw\">https://tzk.acs.pw</a>](<a href=\"https://tzk.acs.pw/2020-08/29/code/4\">https://tzk.acs.pw/2020-08/29/code/4</a>. JS_ajax.html)</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createXMLHttpRequestObject.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击获取<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n            <span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span>\n            btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 1. 创建核心对象</span>\n                <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">createXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 2. 监听异步请求状态</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token comment\">// 当请求成功时执行的代码</span>\n                        <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n                        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>hitokoto\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token comment\">// 设置请求方式及地址</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 设置发送数据</span>\n                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"Ajax异步交互与跨域访问","path":"api/categories/Ajax异步交互与跨域访问.json"},{"name":"Ajax基础","path":"api/categories/Ajax基础.json"}],"tags":[{"name":"跨域访问","path":"api/tags/跨域访问.json"}]}