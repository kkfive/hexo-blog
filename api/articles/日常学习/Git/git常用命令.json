{"title":"git常用命令总结","slug":"日常学习/Git/git常用命令","date":"2020-04-08T14:18:00.000Z","updated":"2022-02-21T04:45:27.384Z","comments":true,"path":"api/articles/日常学习/Git/git常用命令.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0bbc2ade6bf9d079ed2f6be2ccc6e7ba.png"],"content":"<h1 id=\"git常用命令\"><a class=\"markdownIt-Anchor\" href=\"#git常用命令\"></a> Git常用命令</h1>\n<h2 id=\"代码仓库\"><a class=\"markdownIt-Anchor\" href=\"#代码仓库\"></a> 代码仓库</h2>\n<h3 id=\"创建仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建仓库\"></a> 创建仓库</h3>\n<ol>\n<li>\n<p>进入需要创建代码库的文件夹</p>\n<p><code>cd 文件路径</code></p>\n</li>\n<li>\n<p>创建/初始化仓库</p>\n<p><code>git init</code></p>\n</li>\n<li>\n<p>拉取远程仓库到本地(<strong>建议使用</strong>)</p>\n<p><code>git clone</code></p>\n</li>\n</ol>\n<h3 id=\"添加文件到仓库\"><a class=\"markdownIt-Anchor\" href=\"#添加文件到仓库\"></a> 添加文件到仓库</h3>\n<ol>\n<li>\n<p>添加文件到暂存区</p>\n<ul>\n<li>\n<p>添加单个文件</p>\n<p><code>git add 文件名</code></p>\n</li>\n<li>\n<p>添加所有文件</p>\n<p><code>git add .</code></p>\n</li>\n</ul>\n<p>添加的过程中需注意以下两点：</p>\n<ul>\n<li>.gitignore中指定的文件会被忽略</li>\n<li>空目录不会添加</li>\n</ul>\n</li>\n<li>\n<p>提交到本地仓库</p>\n<p><code>git commit</code> 填写<code>commit message</code>并保存</p>\n<p>不建议使用<code>git commit -m &quot;commit message&quot;</code>，建议提交遵循commit message规范</p>\n</li>\n<li>\n<p>查看工作区状态</p>\n<p><code>git status</code></p>\n</li>\n<li>\n<p>对比工作区文件变化</p>\n<p><code>git diff</code></p>\n<p>建议将beyond compare配置为diff工具，用于diff以及merge冲突。</p>\n</li>\n</ol>\n<h3 id=\"仓库配置\"><a class=\"markdownIt-Anchor\" href=\"#仓库配置\"></a> 仓库配置</h3>\n<ol>\n<li>\n<p>配置全局用户名和邮箱</p>\n<p>个人开发机配置：</p>\n<ul>\n<li><code>git config --global user.name &quot;[name]&quot;</code>\n<ul>\n<li>比如：git config --global <a href=\"http://user.name\">user.name</a> “yousali”</li>\n</ul>\n</li>\n<li><code>git config --global user.email &quot;[email address]&quot;</code></li>\n</ul>\n<p>配置当前用户：</p>\n<ul>\n<li>git config <a href=\"http://user.name\">user.name</a> “[name]”</li>\n<li>git config user.email “[email address]”</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码版本提交切换\"><a class=\"markdownIt-Anchor\" href=\"#代码版本提交切换\"></a> 代码版本/提交切换</h2>\n<p><strong>注：这里的版本均为本地仓库版本</strong></p>\n<h3 id=\"查看过去版本提交\"><a class=\"markdownIt-Anchor\" href=\"#查看过去版本提交\"></a> 查看过去版本/提交</h3>\n<ol>\n<li>\n<p>提交详情</p>\n<p><code>git log</code></p>\n</li>\n<li>\n<p>提交简介</p>\n<p><code>git log --pretty=oneline</code></p>\n</li>\n</ol>\n<h3 id=\"回退版本提交\"><a class=\"markdownIt-Anchor\" href=\"#回退版本提交\"></a> 回退版本/提交</h3>\n<ol>\n<li>\n<p>回退到当前最新提交</p>\n<p><code>git reset --hard HEAD</code></p>\n</li>\n<li>\n<p>回退到上次提交</p>\n<p><code>git reset --hard HEAD^</code></p>\n</li>\n<li>\n<p>回退到上n次提交</p>\n<p><code>git reset --hard HEAD~n</code></p>\n</li>\n<li>\n<p>回退到某次提交</p>\n<p><code>git reset --hard commitid</code></p>\n</li>\n</ol>\n<h3 id=\"重返未来版本\"><a class=\"markdownIt-Anchor\" href=\"#重返未来版本\"></a> 重返未来版本</h3>\n<ol>\n<li>\n<p>查看历史提交以及被回退的提交(查看所有分支的所有操作记录)</p>\n<p><code>git reflog</code></p>\n<p><strong>注意：该记录有时限，且只在本地</strong></p>\n</li>\n<li>\n<p>回到未来版本</p>\n<p><code>git reset --hard commitid</code></p>\n</li>\n</ol>\n<h3 id=\"撤销修改\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改\"></a> 撤销修改</h3>\n<ol>\n<li>\n<p>工作区文件撤销(没有提交到暂存区/没有git add)</p>\n<p>撤销修改：<code>git checkout 文件名</code></p>\n</li>\n<li>\n<p>暂存区文件撤销</p>\n<p>将暂存区文件撤销到工作区：<code>git reset HEAD 文件不带--hard</code></p>\n</li>\n<li>\n<p>提交到了版本库</p>\n<p>参见<a href=\"#%E5%9B%9E%E9%80%80%E7%89%88%E6%9C%AC%E6%8F%90%E4%BA%A4\">回退版本/提交</a></p>\n</li>\n</ol>\n<h3 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\"></a> 删除文件</h3>\n<ol>\n<li>\n<p>删除文件从版本库中删除文件</p>\n<p><code>git rm 文件名</code></p>\n<p>修改后需要提交</p>\n</li>\n<li>\n<p>恢复删除</p>\n<p>参见<a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9\">撤销修改</a></p>\n</li>\n<li>\n<p>从版本库中删除文件，但是本地不删除该文件</p>\n<p><code>git rm --cached 文件名</code></p>\n</li>\n</ol>\n<h3 id=\"重命名文件\"><a class=\"markdownIt-Anchor\" href=\"#重命名文件\"></a> 重命名文件</h3>\n<ol>\n<li>\n<p>将<strong>文件/文件夹</strong>重命名</p>\n<p><code>git mv</code></p>\n</li>\n</ol>\n<h3 id=\"暂存修改\"><a class=\"markdownIt-Anchor\" href=\"#暂存修改\"></a> 暂存修改</h3>\n<p>参照<a href=\"#%E6%9A%82%E5%AD%98%E4%BF%AE%E6%94%B9\">分支-暂存修改</a></p>\n<h3 id=\"忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#忽略文件\"></a> 忽略文件</h3>\n<p>通过git仓库下的.gitignore文件屏蔽某些中间文件/生成文件</p>\n<h2 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\"></a> 分支</h2>\n<h3 id=\"创建与合并分支\"><a class=\"markdownIt-Anchor\" href=\"#创建与合并分支\"></a> 创建与合并分支</h3>\n<ol>\n<li>\n<p>创建分支</p>\n<ul>\n<li>\n<p>仅创建分支</p>\n<p><code>git branch 分支名</code></p>\n</li>\n<li>\n<p>创建并切换</p>\n<p><code>git checkout -b 分支名</code></p>\n</li>\n</ul>\n<p><strong>注：在本地仓库操作，创建的都是本地分支</strong></p>\n</li>\n<li>\n<p>切换分支</p>\n<ul>\n<li><code>git checkout 分支名</code></li>\n<li><code>git switch</code> <em>早期版本不支持，需使用最新版的git</em></li>\n</ul>\n</li>\n<li>\n<p>合并分支</p>\n<ul>\n<li>\n<p>合并某分支到当前分支：<code>git merge 分支名</code></p>\n<p>注意：合并分支时禁用fast forward：<code>git merge --no-ff 分支名</code></p>\n</li>\n<li>\n<p><code>git rebase</code></p>\n<p>若无特殊需要不建议使用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>删除分支</p>\n<ul>\n<li>\n<p>删除本地分支</p>\n<ul>\n<li>删除未合并分支：<code>git branch -D 分支名</code></li>\n<li>删除已合并分支：<code>git branch -d 分支名</code></li>\n</ul>\n</li>\n<li>\n<p>删除远程分支</p>\n<ul>\n<li><code>git push origin -d 分支名</code></li>\n<li><code>git push &amp;lt;远程仓库名&amp;gt; -d 分支名</code></li>\n</ul>\n<p>建议界面操作</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看分支</p>\n<ul>\n<li>查看当前分支：<code>git branch</code></li>\n<li>查看所有分支信息：<code>git branch -a</code></li>\n</ul>\n<p>本地分支为本地分支名；远程分支为<code>&lt;远程仓库名&gt;/分支名</code></p>\n</li>\n<li>\n<p>合并分支，解决分支冲突</p>\n<ul>\n<li>将要合并的分支更新到最新</li>\n<li>切换到主分支</li>\n<li>合并分支</li>\n<li>解决合并时的conflict</li>\n<li>提交到版本库</li>\n<li>合并成功</li>\n<li>查看分支状态\n<ul>\n<li><code>git log --graph</code></li>\n<li><code>git log --graph --pretty=oneline --abbrey-commit</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>开发完需要提交PR/MR</p>\n<p>通过PR/MR来合并开发分支与主分支</p>\n</li>\n</ol>\n<h3 id=\"暂存修改-2\"><a class=\"markdownIt-Anchor\" href=\"#暂存修改-2\"></a> 暂存修改</h3>\n<ol>\n<li>\n<p>暂存工作现场</p>\n<p><code>git stash</code></p>\n</li>\n<li>\n<p>恢复工作现场</p>\n<ul>\n<li>恢复：<code>git stash apply</code></li>\n<li>删除：<code>git stash drop</code></li>\n<li>恢复+删除：<code>git stash pop</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多人协作\"><a class=\"markdownIt-Anchor\" href=\"#多人协作\"></a> 多人协作</h3>\n<p>建议开发遵循或者参照git标准工作流，比如git flow、github flow或者gitlab flow</p>\n<ol>\n<li>\n<p>查看远程仓库信息</p>\n<ul>\n<li>详细：<code>git remote -v</code></li>\n<li>不详细：<code>git remote</code></li>\n</ul>\n</li>\n<li>\n<p>更新/推送远程库</p>\n<ul>\n<li>\n<p>更新远程库信息：<code>git fetch</code></p>\n</li>\n<li>\n<p>将远程库最新修改更新到本地：<code>git pull</code></p>\n<p><code>git pull</code>可以认为是<code>git fetch</code>+<code>git merge</code></p>\n</li>\n<li>\n<p>将本地修改推送到远程库</p>\n<ul>\n<li><code>git push</code></li>\n<li><code>git push origin 分支名</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>本地分支与远程分支交互</p>\n<ul>\n<li>\n<p>使用远程分支A创建本地分支：<code>git checkout -b A origin/A</code></p>\n<p>origin是远程仓库名，若名字一样origin/A可以省略</p>\n</li>\n<li>\n<p>将本地分支与远程分支作关联：<code>git branch --set-upstream A origin/A</code></p>\n<p>提示no tracking information错误</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码版本tag\"><a class=\"markdownIt-Anchor\" href=\"#代码版本tag\"></a> 代码版本tag</h2>\n<p>tag与branch的操作基本一致，因为tag就是一个仅可读的branch</p>\n<h3 id=\"查看tag\"><a class=\"markdownIt-Anchor\" href=\"#查看tag\"></a> 查看tag</h3>\n<ol>\n<li>\n<p>本地tag</p>\n<p><code>git tag</code></p>\n</li>\n<li>\n<p>远程tag</p>\n<p><code>git tag -r</code></p>\n</li>\n</ol>\n<h3 id=\"操作tag\"><a class=\"markdownIt-Anchor\" href=\"#操作tag\"></a> 操作tag</h3>\n<ol>\n<li>\n<p>添加tag</p>\n<ul>\n<li>给当前版本添加tag：<code>git tag 标签名</code></li>\n<li>给历史版本添加tag：<code>git tag 标签名 commitid</code></li>\n</ul>\n</li>\n<li>\n<p>删除tag</p>\n<ul>\n<li>删除本地标签：<code>git tag -d 标签名</code></li>\n<li>删除远程标签：<code>git push origin -d 标签名</code></li>\n</ul>\n</li>\n<li>\n<p>推送到远端仓库</p>\n<ul>\n<li>推送单个tag：<code>git push origin 标签名</code></li>\n<li>推送所有未提交的tag：<code>git push origin --tags</code></li>\n</ul>\n</li>\n<li>\n<p>更新到本地</p>\n<p><code>git pull origin --tags</code></p>\n</li>\n</ol>\n<h2 id=\"其他生僻命令\"><a class=\"markdownIt-Anchor\" href=\"#其他生僻命令\"></a> 其他生僻命令</h2>\n<p>可以使用git help查看git常用的命令，使用git help -a查看git可用的所有命令</p>\n<h2 id=\"命令脑图分布\"><a class=\"markdownIt-Anchor\" href=\"#命令脑图分布\"></a> 命令脑图分布</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0bbc2ade6bf9d079ed2f6be2ccc6e7ba.png\" alt=\"\" /></p>\n","more":"<h1 id=\"git常用命令\"><a class=\"markdownIt-Anchor\" href=\"#git常用命令\"></a> Git常用命令</h1>\n<h2 id=\"代码仓库\"><a class=\"markdownIt-Anchor\" href=\"#代码仓库\"></a> 代码仓库</h2>\n<h3 id=\"创建仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建仓库\"></a> 创建仓库</h3>\n<ol>\n<li>\n<p>进入需要创建代码库的文件夹</p>\n<p><code>cd 文件路径</code></p>\n</li>\n<li>\n<p>创建/初始化仓库</p>\n<p><code>git init</code></p>\n</li>\n<li>\n<p>拉取远程仓库到本地(<strong>建议使用</strong>)</p>\n<p><code>git clone</code></p>\n</li>\n</ol>\n<h3 id=\"添加文件到仓库\"><a class=\"markdownIt-Anchor\" href=\"#添加文件到仓库\"></a> 添加文件到仓库</h3>\n<ol>\n<li>\n<p>添加文件到暂存区</p>\n<ul>\n<li>\n<p>添加单个文件</p>\n<p><code>git add 文件名</code></p>\n</li>\n<li>\n<p>添加所有文件</p>\n<p><code>git add .</code></p>\n</li>\n</ul>\n<p>添加的过程中需注意以下两点：</p>\n<ul>\n<li>.gitignore中指定的文件会被忽略</li>\n<li>空目录不会添加</li>\n</ul>\n</li>\n<li>\n<p>提交到本地仓库</p>\n<p><code>git commit</code> 填写<code>commit message</code>并保存</p>\n<p>不建议使用<code>git commit -m &quot;commit message&quot;</code>，建议提交遵循commit message规范</p>\n</li>\n<li>\n<p>查看工作区状态</p>\n<p><code>git status</code></p>\n</li>\n<li>\n<p>对比工作区文件变化</p>\n<p><code>git diff</code></p>\n<p>建议将beyond compare配置为diff工具，用于diff以及merge冲突。</p>\n</li>\n</ol>\n<h3 id=\"仓库配置\"><a class=\"markdownIt-Anchor\" href=\"#仓库配置\"></a> 仓库配置</h3>\n<ol>\n<li>\n<p>配置全局用户名和邮箱</p>\n<p>个人开发机配置：</p>\n<ul>\n<li><code>git config --global user.name &quot;[name]&quot;</code>\n<ul>\n<li>比如：git config --global <a href=\"http://user.name\">user.name</a> “yousali”</li>\n</ul>\n</li>\n<li><code>git config --global user.email &quot;[email address]&quot;</code></li>\n</ul>\n<p>配置当前用户：</p>\n<ul>\n<li>git config <a href=\"http://user.name\">user.name</a> “[name]”</li>\n<li>git config user.email “[email address]”</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码版本提交切换\"><a class=\"markdownIt-Anchor\" href=\"#代码版本提交切换\"></a> 代码版本/提交切换</h2>\n<p><strong>注：这里的版本均为本地仓库版本</strong></p>\n<h3 id=\"查看过去版本提交\"><a class=\"markdownIt-Anchor\" href=\"#查看过去版本提交\"></a> 查看过去版本/提交</h3>\n<ol>\n<li>\n<p>提交详情</p>\n<p><code>git log</code></p>\n</li>\n<li>\n<p>提交简介</p>\n<p><code>git log --pretty=oneline</code></p>\n</li>\n</ol>\n<h3 id=\"回退版本提交\"><a class=\"markdownIt-Anchor\" href=\"#回退版本提交\"></a> 回退版本/提交</h3>\n<ol>\n<li>\n<p>回退到当前最新提交</p>\n<p><code>git reset --hard HEAD</code></p>\n</li>\n<li>\n<p>回退到上次提交</p>\n<p><code>git reset --hard HEAD^</code></p>\n</li>\n<li>\n<p>回退到上n次提交</p>\n<p><code>git reset --hard HEAD~n</code></p>\n</li>\n<li>\n<p>回退到某次提交</p>\n<p><code>git reset --hard commitid</code></p>\n</li>\n</ol>\n<h3 id=\"重返未来版本\"><a class=\"markdownIt-Anchor\" href=\"#重返未来版本\"></a> 重返未来版本</h3>\n<ol>\n<li>\n<p>查看历史提交以及被回退的提交(查看所有分支的所有操作记录)</p>\n<p><code>git reflog</code></p>\n<p><strong>注意：该记录有时限，且只在本地</strong></p>\n</li>\n<li>\n<p>回到未来版本</p>\n<p><code>git reset --hard commitid</code></p>\n</li>\n</ol>\n<h3 id=\"撤销修改\"><a class=\"markdownIt-Anchor\" href=\"#撤销修改\"></a> 撤销修改</h3>\n<ol>\n<li>\n<p>工作区文件撤销(没有提交到暂存区/没有git add)</p>\n<p>撤销修改：<code>git checkout 文件名</code></p>\n</li>\n<li>\n<p>暂存区文件撤销</p>\n<p>将暂存区文件撤销到工作区：<code>git reset HEAD 文件不带--hard</code></p>\n</li>\n<li>\n<p>提交到了版本库</p>\n<p>参见<a href=\"#%E5%9B%9E%E9%80%80%E7%89%88%E6%9C%AC%E6%8F%90%E4%BA%A4\">回退版本/提交</a></p>\n</li>\n</ol>\n<h3 id=\"删除文件\"><a class=\"markdownIt-Anchor\" href=\"#删除文件\"></a> 删除文件</h3>\n<ol>\n<li>\n<p>删除文件从版本库中删除文件</p>\n<p><code>git rm 文件名</code></p>\n<p>修改后需要提交</p>\n</li>\n<li>\n<p>恢复删除</p>\n<p>参见<a href=\"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9\">撤销修改</a></p>\n</li>\n<li>\n<p>从版本库中删除文件，但是本地不删除该文件</p>\n<p><code>git rm --cached 文件名</code></p>\n</li>\n</ol>\n<h3 id=\"重命名文件\"><a class=\"markdownIt-Anchor\" href=\"#重命名文件\"></a> 重命名文件</h3>\n<ol>\n<li>\n<p>将<strong>文件/文件夹</strong>重命名</p>\n<p><code>git mv</code></p>\n</li>\n</ol>\n<h3 id=\"暂存修改\"><a class=\"markdownIt-Anchor\" href=\"#暂存修改\"></a> 暂存修改</h3>\n<p>参照<a href=\"#%E6%9A%82%E5%AD%98%E4%BF%AE%E6%94%B9\">分支-暂存修改</a></p>\n<h3 id=\"忽略文件\"><a class=\"markdownIt-Anchor\" href=\"#忽略文件\"></a> 忽略文件</h3>\n<p>通过git仓库下的.gitignore文件屏蔽某些中间文件/生成文件</p>\n<h2 id=\"分支\"><a class=\"markdownIt-Anchor\" href=\"#分支\"></a> 分支</h2>\n<h3 id=\"创建与合并分支\"><a class=\"markdownIt-Anchor\" href=\"#创建与合并分支\"></a> 创建与合并分支</h3>\n<ol>\n<li>\n<p>创建分支</p>\n<ul>\n<li>\n<p>仅创建分支</p>\n<p><code>git branch 分支名</code></p>\n</li>\n<li>\n<p>创建并切换</p>\n<p><code>git checkout -b 分支名</code></p>\n</li>\n</ul>\n<p><strong>注：在本地仓库操作，创建的都是本地分支</strong></p>\n</li>\n<li>\n<p>切换分支</p>\n<ul>\n<li><code>git checkout 分支名</code></li>\n<li><code>git switch</code> <em>早期版本不支持，需使用最新版的git</em></li>\n</ul>\n</li>\n<li>\n<p>合并分支</p>\n<ul>\n<li>\n<p>合并某分支到当前分支：<code>git merge 分支名</code></p>\n<p>注意：合并分支时禁用fast forward：<code>git merge --no-ff 分支名</code></p>\n</li>\n<li>\n<p><code>git rebase</code></p>\n<p>若无特殊需要不建议使用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>删除分支</p>\n<ul>\n<li>\n<p>删除本地分支</p>\n<ul>\n<li>删除未合并分支：<code>git branch -D 分支名</code></li>\n<li>删除已合并分支：<code>git branch -d 分支名</code></li>\n</ul>\n</li>\n<li>\n<p>删除远程分支</p>\n<ul>\n<li><code>git push origin -d 分支名</code></li>\n<li><code>git push &amp;lt;远程仓库名&amp;gt; -d 分支名</code></li>\n</ul>\n<p>建议界面操作</p>\n</li>\n</ul>\n</li>\n<li>\n<p>查看分支</p>\n<ul>\n<li>查看当前分支：<code>git branch</code></li>\n<li>查看所有分支信息：<code>git branch -a</code></li>\n</ul>\n<p>本地分支为本地分支名；远程分支为<code>&lt;远程仓库名&gt;/分支名</code></p>\n</li>\n<li>\n<p>合并分支，解决分支冲突</p>\n<ul>\n<li>将要合并的分支更新到最新</li>\n<li>切换到主分支</li>\n<li>合并分支</li>\n<li>解决合并时的conflict</li>\n<li>提交到版本库</li>\n<li>合并成功</li>\n<li>查看分支状态\n<ul>\n<li><code>git log --graph</code></li>\n<li><code>git log --graph --pretty=oneline --abbrey-commit</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>开发完需要提交PR/MR</p>\n<p>通过PR/MR来合并开发分支与主分支</p>\n</li>\n</ol>\n<h3 id=\"暂存修改-2\"><a class=\"markdownIt-Anchor\" href=\"#暂存修改-2\"></a> 暂存修改</h3>\n<ol>\n<li>\n<p>暂存工作现场</p>\n<p><code>git stash</code></p>\n</li>\n<li>\n<p>恢复工作现场</p>\n<ul>\n<li>恢复：<code>git stash apply</code></li>\n<li>删除：<code>git stash drop</code></li>\n<li>恢复+删除：<code>git stash pop</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"多人协作\"><a class=\"markdownIt-Anchor\" href=\"#多人协作\"></a> 多人协作</h3>\n<p>建议开发遵循或者参照git标准工作流，比如git flow、github flow或者gitlab flow</p>\n<ol>\n<li>\n<p>查看远程仓库信息</p>\n<ul>\n<li>详细：<code>git remote -v</code></li>\n<li>不详细：<code>git remote</code></li>\n</ul>\n</li>\n<li>\n<p>更新/推送远程库</p>\n<ul>\n<li>\n<p>更新远程库信息：<code>git fetch</code></p>\n</li>\n<li>\n<p>将远程库最新修改更新到本地：<code>git pull</code></p>\n<p><code>git pull</code>可以认为是<code>git fetch</code>+<code>git merge</code></p>\n</li>\n<li>\n<p>将本地修改推送到远程库</p>\n<ul>\n<li><code>git push</code></li>\n<li><code>git push origin 分支名</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>本地分支与远程分支交互</p>\n<ul>\n<li>\n<p>使用远程分支A创建本地分支：<code>git checkout -b A origin/A</code></p>\n<p>origin是远程仓库名，若名字一样origin/A可以省略</p>\n</li>\n<li>\n<p>将本地分支与远程分支作关联：<code>git branch --set-upstream A origin/A</code></p>\n<p>提示no tracking information错误</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"代码版本tag\"><a class=\"markdownIt-Anchor\" href=\"#代码版本tag\"></a> 代码版本tag</h2>\n<p>tag与branch的操作基本一致，因为tag就是一个仅可读的branch</p>\n<h3 id=\"查看tag\"><a class=\"markdownIt-Anchor\" href=\"#查看tag\"></a> 查看tag</h3>\n<ol>\n<li>\n<p>本地tag</p>\n<p><code>git tag</code></p>\n</li>\n<li>\n<p>远程tag</p>\n<p><code>git tag -r</code></p>\n</li>\n</ol>\n<h3 id=\"操作tag\"><a class=\"markdownIt-Anchor\" href=\"#操作tag\"></a> 操作tag</h3>\n<ol>\n<li>\n<p>添加tag</p>\n<ul>\n<li>给当前版本添加tag：<code>git tag 标签名</code></li>\n<li>给历史版本添加tag：<code>git tag 标签名 commitid</code></li>\n</ul>\n</li>\n<li>\n<p>删除tag</p>\n<ul>\n<li>删除本地标签：<code>git tag -d 标签名</code></li>\n<li>删除远程标签：<code>git push origin -d 标签名</code></li>\n</ul>\n</li>\n<li>\n<p>推送到远端仓库</p>\n<ul>\n<li>推送单个tag：<code>git push origin 标签名</code></li>\n<li>推送所有未提交的tag：<code>git push origin --tags</code></li>\n</ul>\n</li>\n<li>\n<p>更新到本地</p>\n<p><code>git pull origin --tags</code></p>\n</li>\n</ol>\n<h2 id=\"其他生僻命令\"><a class=\"markdownIt-Anchor\" href=\"#其他生僻命令\"></a> 其他生僻命令</h2>\n<p>可以使用git help查看git常用的命令，使用git help -a查看git可用的所有命令</p>\n<h2 id=\"命令脑图分布\"><a class=\"markdownIt-Anchor\" href=\"#命令脑图分布\"></a> 命令脑图分布</h2>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/04/09/0bbc2ade6bf9d079ed2f6be2ccc6e7ba.png\" alt=\"\" /></p>\n","categories":[{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}