{"title":"五、Dockerfile","slug":"日常学习/部署与构建/Docker/5. Dockerfile","date":"2021-02-28T13:02:00.000Z","updated":"2021-02-28T13:02:00.000Z","comments":true,"path":"api/articles/日常学习/部署与构建/Docker/5. Dockerfile.json","excerpt":null,"covers":["https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png","https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png"],"content":"<h2 id=\"什么是dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#什么是dockerfile\"></a> 什么是Dockerfile</h2>\n<p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png\" alt=\"image-20200404111908085\" /></p>\n<p>通过架构图可以看出通过DockerFile可以直接构建镜像</p>\n<h2 id=\"dockerfile解析过程\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile解析过程\"></a> Dockerfile解析过程</h2>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png\" alt=\"image-20200603181253804\" /></p>\n<h2 id=\"dockerfile的保留命令\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的保留命令\"></a> Dockerfile的保留命令</h2>\n<p>官方说明:<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">保留字</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>FROM</strong></td>\n<td style=\"text-align:center\"><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>RUN</strong></td>\n<td style=\"text-align:center\"><strong>构建镜像时需要运行的指令</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>EXPOSE</strong></td>\n<td style=\"text-align:center\"><strong>当前容器对外暴露出的端口号</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>WORKDIR</strong></td>\n<td style=\"text-align:center\"><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENV</strong></td>\n<td style=\"text-align:center\"><strong>用来在构建镜像过程中设置环境变量</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ADD</strong></td>\n<td style=\"text-align:center\"><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>COPY</strong></td>\n<td style=\"text-align:center\"><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>VOLUME</strong></td>\n<td style=\"text-align:center\"><strong>容器数据卷，用于数据保存和持久化工作</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>CMD</strong></td>\n<td style=\"text-align:center\"><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENTRYPOINT</strong></td>\n<td style=\"text-align:center\"><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"from-命令\"><a class=\"markdownIt-Anchor\" href=\"#from-命令\"></a> FROM 命令</h3>\n<ul>\n<li>\n<p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">FROM  &lt;image&gt;\nFROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest\nFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"run-命令\"><a class=\"markdownIt-Anchor\" href=\"#run-命令\"></a> RUN 命令</h3>\n<ul>\n<li>\n<p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)\nRUN echo hello\n\nRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)\nRUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"expose-命令\"><a class=\"markdownIt-Anchor\" href=\"#expose-命令\"></a> EXPOSE 命令</h3>\n<ul>\n<li>\n<p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcp\nEXPOSE 80&#x2F;udp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"cmd-命令\"><a class=\"markdownIt-Anchor\" href=\"#cmd-命令\"></a> CMD 命令</h3>\n<ul>\n<li>\n<p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>\n</li>\n<li>\n<p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)\nCMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)\nCMD command param1 param2 (shell form)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"workdir-命令\"><a class=\"markdownIt-Anchor\" href=\"#workdir-命令\"></a> WORKDIR 命令</h3>\n<ul>\n<li>\n<p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir\n\nWORKDIR &#x2F;a\nWORKDIR b\nWORKDIR c\n&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"env-命令\"><a class=\"markdownIt-Anchor\" href=\"#env-命令\"></a> ENV 命令</h3>\n<ul>\n<li>\n<p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>\n</li>\n<li>\n<p>语法：</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;&#x3D;&lt;value&gt; ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"add-命令\"><a class=\"markdownIt-Anchor\" href=\"#add-命令\"></a> ADD 命令</h3>\n<ul>\n<li>\n<p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件\nADD hom?.txt &#x2F;mydir&#x2F;   通配符添加\nADD test.txt relativeDir&#x2F;  可以指定相对路径\nADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径\nADD url <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"copy-命令\"><a class=\"markdownIt-Anchor\" href=\"#copy-命令\"></a> COPY 命令</h3>\n<ul>\n<li>\n<p>用来将context目录中指定文件复制到镜像的指定目录中</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">COPY src dest\nCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"volume-命令\"><a class=\"markdownIt-Anchor\" href=\"#volume-命令\"></a> VOLUME 命令</h3>\n<ul>\n<li>\n<p>用来定义容器运行时可以挂在到宿主机的目录</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">VOLUME [&quot;&#x2F;data&quot;]\nVOLUME &#x2F;data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"entrypoint命令\"><a class=\"markdownIt-Anchor\" href=\"#entrypoint命令\"></a> ENTRYPOINT命令</h3>\n<ul>\n<li>\n<p>用来指定容器启动时执行命令和CMD类似</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">  [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\nENTRYPOINT command param1 param2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br />\nCMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>\n</li>\n</ul>\n","more":"<h2 id=\"什么是dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#什么是dockerfile\"></a> 什么是Dockerfile</h2>\n<p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png\" alt=\"image-20200404111908085\" /></p>\n<p>通过架构图可以看出通过DockerFile可以直接构建镜像</p>\n<h2 id=\"dockerfile解析过程\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile解析过程\"></a> Dockerfile解析过程</h2>\n<p><img src=\"https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png\" alt=\"image-20200603181253804\" /></p>\n<h2 id=\"dockerfile的保留命令\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile的保留命令\"></a> Dockerfile的保留命令</h2>\n<p>官方说明:<a href=\"https://docs.docker.com/engine/reference/builder/\">https://docs.docker.com/engine/reference/builder/</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">保留字</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>FROM</strong></td>\n<td style=\"text-align:center\"><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>RUN</strong></td>\n<td style=\"text-align:center\"><strong>构建镜像时需要运行的指令</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>EXPOSE</strong></td>\n<td style=\"text-align:center\"><strong>当前容器对外暴露出的端口号</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>WORKDIR</strong></td>\n<td style=\"text-align:center\"><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENV</strong></td>\n<td style=\"text-align:center\"><strong>用来在构建镜像过程中设置环境变量</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ADD</strong></td>\n<td style=\"text-align:center\"><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>COPY</strong></td>\n<td style=\"text-align:center\"><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>VOLUME</strong></td>\n<td style=\"text-align:center\"><strong>容器数据卷，用于数据保存和持久化工作</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>CMD</strong></td>\n<td style=\"text-align:center\"><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ENTRYPOINT</strong></td>\n<td style=\"text-align:center\"><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"from-命令\"><a class=\"markdownIt-Anchor\" href=\"#from-命令\"></a> FROM 命令</h3>\n<ul>\n<li>\n<p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">FROM  &lt;image&gt;\nFROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest\nFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"run-命令\"><a class=\"markdownIt-Anchor\" href=\"#run-命令\"></a> RUN 命令</h3>\n<ul>\n<li>\n<p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)\nRUN echo hello\n\nRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)\nRUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"expose-命令\"><a class=\"markdownIt-Anchor\" href=\"#expose-命令\"></a> EXPOSE 命令</h3>\n<ul>\n<li>\n<p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcp\nEXPOSE 80&#x2F;udp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"cmd-命令\"><a class=\"markdownIt-Anchor\" href=\"#cmd-命令\"></a> CMD 命令</h3>\n<ul>\n<li>\n<p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>\n</li>\n<li>\n<p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)\nCMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)\nCMD command param1 param2 (shell form)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"workdir-命令\"><a class=\"markdownIt-Anchor\" href=\"#workdir-命令\"></a> WORKDIR 命令</h3>\n<ul>\n<li>\n<p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">WORKDIR &#x2F;path&#x2F;to&#x2F;workdir\n\nWORKDIR &#x2F;a\nWORKDIR b\nWORKDIR c\n&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"env-命令\"><a class=\"markdownIt-Anchor\" href=\"#env-命令\"></a> ENV 命令</h3>\n<ul>\n<li>\n<p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>\n</li>\n<li>\n<p>语法：</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;&#x3D;&lt;value&gt; ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"add-命令\"><a class=\"markdownIt-Anchor\" href=\"#add-命令\"></a> ADD 命令</h3>\n<ul>\n<li>\n<p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件\nADD hom?.txt &#x2F;mydir&#x2F;   通配符添加\nADD test.txt relativeDir&#x2F;  可以指定相对路径\nADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径\nADD url <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"copy-命令\"><a class=\"markdownIt-Anchor\" href=\"#copy-命令\"></a> COPY 命令</h3>\n<ul>\n<li>\n<p>用来将context目录中指定文件复制到镜像的指定目录中</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">COPY src dest\nCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"volume-命令\"><a class=\"markdownIt-Anchor\" href=\"#volume-命令\"></a> VOLUME 命令</h3>\n<ul>\n<li>\n<p>用来定义容器运行时可以挂在到宿主机的目录</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">VOLUME [&quot;&#x2F;data&quot;]\nVOLUME &#x2F;data<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h3 id=\"entrypoint命令\"><a class=\"markdownIt-Anchor\" href=\"#entrypoint命令\"></a> ENTRYPOINT命令</h3>\n<ul>\n<li>\n<p>用来指定容器启动时执行命令和CMD类似</p>\n</li>\n<li>\n<p>语法:</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\">  [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]\nENTRYPOINT command param1 param2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br />\nCMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>\n</li>\n</ul>\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}