{"title":"05JavaScript函数","slug":"日常学习/技术相关/大前端/JavaScript学习/基础部分/05JavaScript函数","date":"2020-04-05T06:01:58.000Z","updated":"2022-02-21T06:11:10.028Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/基础部分/05JavaScript函数.json","excerpt":null,"covers":null,"content":"<h2 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\"></a> 函数声明</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 函数声明方式</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 函数表达方式</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数与变量同名时的问题\"><a class=\"markdownIt-Anchor\" href=\"#函数与变量同名时的问题\"></a> 函数与变量同名时的问题</h2>\n<ol>\n<li>\n<p>使用函数声明方式时</p>\n<p><strong>变量会覆盖函数，与顺序无关</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出message</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错 TypeError: fn is not a function</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用函数表达式方式时</p>\n<p><strong>函数会覆盖变量（变量先声明，函数后声明），与顺序有关。</strong></p>\n<p><em>简单来说就是变量的重复声明</em></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 [Function: fn]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>所以我们的得出结论：</p>\n<ul>\n<li>函数的声明方式和函数的表达式方式，在内存的结构上应该是不同的</li>\n<li>当使用函数声明方式时，变量名与函数名同名时，变量会覆盖函数</li>\n</ul>\n<h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\"></a> 函数参数</h2>\n<p>传入参数数量的情况</p>\n<ul>\n<li>\n<p>函数形参与实参个数相同</p>\n<p>正常运行</p>\n</li>\n<li>\n<p>传入实参少于形参个数</p>\n<p>不报错，但少传入的参数会变成<code>undefined</code></p>\n</li>\n<li>\n<p>传入实参多余形参个数</p>\n<p>不报错，多余的参数会舍弃</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">情况</th>\n<th style=\"text-align:center\">参数a</th>\n<th style=\"text-align:center\">参数b</th>\n<th style=\"text-align:center\">参数c</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">正常传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">不涉及</td>\n<td style=\"text-align:center\">正常运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">少传入一个参数</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">不传入</td>\n<td style=\"text-align:center\">不涉及</td>\n<td style=\"text-align:center\">正常运行，但b参数会称为<code>undefined</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">多传入一个参数</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">正常运行，但b参数会被舍弃掉。</td>\n</tr>\n</tbody>\n</table>\n<p>利用<code>JavaScript</code>第二个特性（少传入不报错），我们可以在一个函数中实现多个不同的功能。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"undefind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解决第三个问题：</p>\n<p>因为不定义参数并不会导致函数报错，因此函数定义时可以不必声明形参，利用<code>JavaScript</code>提供的一个属性可以获得传入参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 4</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [Arguments] &#123; '0': 1, '1': 2, '2': 3, '3': 4 &#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以以数组方式进行取值 输出1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数返回值的作用\"><a class=\"markdownIt-Anchor\" href=\"#函数返回值的作用\"></a> 函数返回值的作用</h2>\n<ol>\n<li>\n<p>函数返回值</p>\n<p>也就是一个函数返回的东西</p>\n</li>\n<li>\n<p>阻止代码执行</p>\n<p>页面开发时，当<code>return false</code>时，阻止DOM事件的冒泡</p>\n<p><code>return</code>语句后所有的语句都不执行。</p>\n</li>\n</ol>\n","more":"<h2 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\"></a> 函数声明</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 函数声明方式</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 函数表达方式</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数与变量同名时的问题\"><a class=\"markdownIt-Anchor\" href=\"#函数与变量同名时的问题\"></a> 函数与变量同名时的问题</h2>\n<ol>\n<li>\n<p>使用函数声明方式时</p>\n<p><strong>变量会覆盖函数，与顺序无关</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出message</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//报错 TypeError: fn is not a function</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>使用函数表达式方式时</p>\n<p><strong>函数会覆盖变量（变量先声明，函数后声明），与顺序有关。</strong></p>\n<p><em>简单来说就是变量的重复声明</em></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 [Function: fn]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<p>所以我们的得出结论：</p>\n<ul>\n<li>函数的声明方式和函数的表达式方式，在内存的结构上应该是不同的</li>\n<li>当使用函数声明方式时，变量名与函数名同名时，变量会覆盖函数</li>\n</ul>\n<h2 id=\"函数参数\"><a class=\"markdownIt-Anchor\" href=\"#函数参数\"></a> 函数参数</h2>\n<p>传入参数数量的情况</p>\n<ul>\n<li>\n<p>函数形参与实参个数相同</p>\n<p>正常运行</p>\n</li>\n<li>\n<p>传入实参少于形参个数</p>\n<p>不报错，但少传入的参数会变成<code>undefined</code></p>\n</li>\n<li>\n<p>传入实参多余形参个数</p>\n<p>不报错，多余的参数会舍弃</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">情况</th>\n<th style=\"text-align:center\">参数a</th>\n<th style=\"text-align:center\">参数b</th>\n<th style=\"text-align:center\">参数c</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">正常传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">不涉及</td>\n<td style=\"text-align:center\">正常运行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">少传入一个参数</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">不传入</td>\n<td style=\"text-align:center\">不涉及</td>\n<td style=\"text-align:center\">正常运行，但b参数会称为<code>undefined</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">多传入一个参数</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">传入</td>\n<td style=\"text-align:center\">正常运行，但b参数会被舍弃掉。</td>\n</tr>\n</tbody>\n</table>\n<p>利用<code>JavaScript</code>第二个特性（少传入不报错），我们可以在一个函数中实现多个不同的功能。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"undefind\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>解决第三个问题：</p>\n<p>因为不定义参数并不会导致函数报错，因此函数定义时可以不必声明形参，利用<code>JavaScript</code>提供的一个属性可以获得传入参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出 4</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [Arguments] &#123; '0': 1, '1': 2, '2': 3, '3': 4 &#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以以数组方式进行取值 输出1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数返回值的作用\"><a class=\"markdownIt-Anchor\" href=\"#函数返回值的作用\"></a> 函数返回值的作用</h2>\n<ol>\n<li>\n<p>函数返回值</p>\n<p>也就是一个函数返回的东西</p>\n</li>\n<li>\n<p>阻止代码执行</p>\n<p>页面开发时，当<code>return false</code>时，阻止DOM事件的冒泡</p>\n<p><code>return</code>语句后所有的语句都不执行。</p>\n</li>\n</ol>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}