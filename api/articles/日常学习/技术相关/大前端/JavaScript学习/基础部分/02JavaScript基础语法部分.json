{"title":"02JavaScript基础语法部分","slug":"日常学习/技术相关/大前端/JavaScript学习/基础部分/02JavaScript基础语法部分","date":"2020-03-31T07:06:58.000Z","updated":"2022-02-21T06:11:10.028Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/基础部分/02JavaScript基础语法部分.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/03/31/cf54e38d944e50e68c306547f5ca5c33.png"],"content":"<h2 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h2>\n<p>在JavaScript语言中，原始类型与包装类型创建的数据在使用上<strong>没有任何差异</strong></p>\n<p>定义变量的两种方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 直接/字面量 量方式定义</span>\n<span class=\"token keyword\">var</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//构造函数方式</span>\n<span class=\"token keyword\">var</span> Bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>创建对象的语法格式 <code>new 构造函数();</code> 例如<code>var Bool = new Boolean(true);</code>表示创建一个值为true的变量Bool</p>\n</blockquote>\n<p>三种包装类型分别是 布尔类型、数字类型、字符串类类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>判断包装类型<strong>不能</strong>使用<code>typeof</code>而是使用<code>instanceof</code> 。语法结构<code>变量名/对象名 instanceof 构造函数/数据类型</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Str <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"特殊类型\"><a class=\"markdownIt-Anchor\" href=\"#特殊类型\"></a> 特殊类型</h2>\n<h3 id=\"undefined\"><a class=\"markdownIt-Anchor\" href=\"#undefined\"></a> undefined</h3>\n<p>得到<code>undefined</code>这个值的情况</p>\n<ul>\n<li>\n<p>声明变量但未初始化值时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>声明变量并初始化值为<code>undefined</code>时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg1 <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>函数中的<code>return</code>语句的默认返回值。</p>\n</li>\n<li>\n<p>函数中的<code>return</code>语句的返回值的设置为<code>undefined</code></p>\n</li>\n<li>\n<p>访问某一对象中不存在的属性时。</p>\n</li>\n</ul>\n<h3 id=\"null\"><a class=\"markdownIt-Anchor\" href=\"#null\"></a> null</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/03/31/cf54e38d944e50e68c306547f5ca5c33.png\" alt=\"\" /></p>\n<p>null 是5个基本类型的一个，但是得到的类型是object。这是JavaScript语言的历史遗留问题/当初设计的纰漏。所以当我们判断<code>null</code>类型时可以使用特殊方法<code>console.log(Object.prototype.toString.call(null));</code></p>\n<h3 id=\"undefined与null的关系\"><a class=\"markdownIt-Anchor\" href=\"#undefined与null的关系\"></a> undefined与null的关系</h3>\n<p>undefined<strong>派生</strong>于null。他们两个值相等但类型不等。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果true 说明值相等</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果false 说明类型不等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\"></a> 类型转换</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关键点</th>\n<th style=\"text-align:center\">隐式类型转换</th>\n<th style=\"text-align:center\">显式类型转换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JavaScript官方规范</td>\n<td style=\"text-align:center\">官方未提及</td>\n<td style=\"text-align:center\">明确表明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">执行效率/性能</td>\n<td style=\"text-align:center\">优于显式转换</td>\n<td style=\"text-align:center\">弱于隐式转换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">难易程度</td>\n<td style=\"text-align:center\">不易</td>\n<td style=\"text-align:center\">容易</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"隐式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转换\"></a> 隐式类型转换</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">欲转换为</th>\n<th style=\"text-align:center\">转换符号</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\"><code>!!</code></td>\n<td style=\"text-align:center\">将数据转换为布尔类型，在数据前加<code>!!</code>即可</td>\n<td style=\"text-align:center\"><code>!!&quot;this is message&quot;</code><br /><code>!!11</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字</td>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">将数据转换为数字类型，在数据前加<code>+</code>即可</td>\n<td style=\"text-align:center\"><code>+&quot;this is message&quot;</code><br /><code>+true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\"><code>&quot;&quot;+</code></td>\n<td style=\"text-align:center\">将数据转换为字符串类型，与空字符串相加即可(位置无关)</td>\n<td style=\"text-align:center\"><code>&quot;&quot; + 100</code><br/><code>&quot;&quot; + true</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如果存在字符串的话，按照字符串的拼接操作</li>\n<li>没有字符串，而存在数字值的话，按照算数运算操作</li>\n</ul>\n<h3 id=\"显式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#显式类型转换\"></a> 显式类型转换</h3>\n<p>显示类型转换则是利用类型的构造方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 转化为 boolean 类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 转化为number类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 转化为 string 类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于转换为数字时<code>JavaScript</code>提供了提供了两个函数用户转换为number类型的整数和浮点数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>但需要注意的是：转换为整型即<code>parseInt</code>函数，如果包含小数则将小数部分舍掉，并不会四舍五入计算。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n输出结果为：\n100转化为 100\n100.55转化为 100\n100转化为 100\n100.55转化为 100.55\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于转换为string类型JavaScript还提供一个<code>toString</code>方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> bool<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h2 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h2>\n<p>在JavaScript语言中，原始类型与包装类型创建的数据在使用上<strong>没有任何差异</strong></p>\n<p>定义变量的两种方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 直接/字面量 量方式定义</span>\n<span class=\"token keyword\">var</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//构造函数方式</span>\n<span class=\"token keyword\">var</span> Bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>创建对象的语法格式 <code>new 构造函数();</code> 例如<code>var Bool = new Boolean(true);</code>表示创建一个值为true的变量Bool</p>\n</blockquote>\n<p>三种包装类型分别是 布尔类型、数字类型、字符串类类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> Bool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>判断包装类型<strong>不能</strong>使用<code>typeof</code>而是使用<code>instanceof</code> 。语法结构<code>变量名/对象名 instanceof 构造函数/数据类型</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Str <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"特殊类型\"><a class=\"markdownIt-Anchor\" href=\"#特殊类型\"></a> 特殊类型</h2>\n<h3 id=\"undefined\"><a class=\"markdownIt-Anchor\" href=\"#undefined\"></a> undefined</h3>\n<p>得到<code>undefined</code>这个值的情况</p>\n<ul>\n<li>\n<p>声明变量但未初始化值时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>声明变量并初始化值为<code>undefined</code>时。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> msg1 <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>函数中的<code>return</code>语句的默认返回值。</p>\n</li>\n<li>\n<p>函数中的<code>return</code>语句的返回值的设置为<code>undefined</code></p>\n</li>\n<li>\n<p>访问某一对象中不存在的属性时。</p>\n</li>\n</ul>\n<h3 id=\"null\"><a class=\"markdownIt-Anchor\" href=\"#null\"></a> null</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/picbed@master/2020/03/31/cf54e38d944e50e68c306547f5ca5c33.png\" alt=\"\" /></p>\n<p>null 是5个基本类型的一个，但是得到的类型是object。这是JavaScript语言的历史遗留问题/当初设计的纰漏。所以当我们判断<code>null</code>类型时可以使用特殊方法<code>console.log(Object.prototype.toString.call(null));</code></p>\n<h3 id=\"undefined与null的关系\"><a class=\"markdownIt-Anchor\" href=\"#undefined与null的关系\"></a> undefined与null的关系</h3>\n<p>undefined<strong>派生</strong>于null。他们两个值相等但类型不等。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果true 说明值相等</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果false 说明类型不等</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\"></a> 类型转换</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关键点</th>\n<th style=\"text-align:center\">隐式类型转换</th>\n<th style=\"text-align:center\">显式类型转换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JavaScript官方规范</td>\n<td style=\"text-align:center\">官方未提及</td>\n<td style=\"text-align:center\">明确表明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">执行效率/性能</td>\n<td style=\"text-align:center\">优于显式转换</td>\n<td style=\"text-align:center\">弱于隐式转换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">难易程度</td>\n<td style=\"text-align:center\">不易</td>\n<td style=\"text-align:center\">容易</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"隐式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#隐式类型转换\"></a> 隐式类型转换</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">欲转换为</th>\n<th style=\"text-align:center\">转换符号</th>\n<th style=\"text-align:center\">说明</th>\n<th style=\"text-align:center\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">布尔</td>\n<td style=\"text-align:center\"><code>!!</code></td>\n<td style=\"text-align:center\">将数据转换为布尔类型，在数据前加<code>!!</code>即可</td>\n<td style=\"text-align:center\"><code>!!&quot;this is message&quot;</code><br /><code>!!11</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字</td>\n<td style=\"text-align:center\"><code>+</code></td>\n<td style=\"text-align:center\">将数据转换为数字类型，在数据前加<code>+</code>即可</td>\n<td style=\"text-align:center\"><code>+&quot;this is message&quot;</code><br /><code>+true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\"><code>&quot;&quot;+</code></td>\n<td style=\"text-align:center\">将数据转换为字符串类型，与空字符串相加即可(位置无关)</td>\n<td style=\"text-align:center\"><code>&quot;&quot; + 100</code><br/><code>&quot;&quot; + true</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如果存在字符串的话，按照字符串的拼接操作</li>\n<li>没有字符串，而存在数字值的话，按照算数运算操作</li>\n</ul>\n<h3 id=\"显式类型转换\"><a class=\"markdownIt-Anchor\" href=\"#显式类型转换\"></a> 显式类型转换</h3>\n<p>显示类型转换则是利用类型的构造方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 转化为 boolean 类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 转化为number类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 转化为 string 类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于转换为数字时<code>JavaScript</code>提供了提供了两个函数用户转换为number类型的整数和浮点数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">11.11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>但需要注意的是：转换为整型即<code>parseInt</code>函数，如果包含小数则将小数部分舍掉，并不会四舍五入计算。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55转化为\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100.55\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n输出结果为：\n100转化为 100\n100.55转化为 100\n100转化为 100\n100.55转化为 100.55\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>关于转换为string类型JavaScript还提供一个<code>toString</code>方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bool <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> bool<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}