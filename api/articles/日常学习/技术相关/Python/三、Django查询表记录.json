{"title":"三、Django查询表记录","slug":"日常学习/技术相关/Python/三、Django查询表记录","date":"2020-01-28T16:00:03.000Z","updated":"2022-02-21T05:08:50.402Z","comments":true,"path":"api/articles/日常学习/技术相关/Python/三、Django查询表记录.json","excerpt":null,"covers":null,"content":"<h2 id=\"查询接口\"><a class=\"markdownIt-Anchor\" href=\"#查询接口\"></a> 查询接口</h2>\n<h3 id=\"all\"><a class=\"markdownIt-Anchor\" href=\"#all\"></a> all()</h3>\n<p>查询所有结果，结果是queryset类型</p>\n<h3 id=\"filterkwargs\"><a class=\"markdownIt-Anchor\" href=\"#filterkwargs\"></a> filter(**kwargs)</h3>\n<p>and条件关系：参数用逗号分割表示and关系</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'dazhuang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">'大壮禅师'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中filter的参数也可以通过字典方式传入</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">odels<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'大壮禅师'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nmodels<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#queryset类型可以调用fitler在过滤</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"getkwargs\"><a class=\"markdownIt-Anchor\" href=\"#getkwargs\"></a> get(**kwargs)</h3>\n<p>返回与所给筛选条件相匹配的对象，不是queryset类型，是行记录对象，返回结果有且只有一个，如果符合筛选条件的对象超过一个或者没有都会抛出错误。捕获异常try。</p>\n<p><code>Book.objects.get(id=1)</code></p>\n<h3 id=\"excludekwargs\"><a class=\"markdownIt-Anchor\" href=\"#excludekwargs\"></a> exclude(**kwargs)</h3>\n<p>排除的意思，它包含了与所给筛选条件不匹配的对象，没有不等于的操作，用这个exclude，返回值是queryset类型 <strong>Book.objects.exclude(id=6)，返回id不等于6的所有的对象</strong>，<strong>或者在queryset基础上调用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\nquery <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"order_byfield\"><a class=\"markdownIt-Anchor\" href=\"#order_byfield\"></a> order_by(*field)</h3>\n<p>queryset类型的数据来调用，对查询结果排序,默认是按照id来升序排列的，返回值还是queryset类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#直接写price，默认是按照price升序排列，按照字段降序排列，就写个负号就行了order_by('-price'),order_by('price','id')是多条件排序，按照price进行升序，price相同的数据，按照id进行升序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\"></a> reverse()</h3>\n<p>queryset类型的数据来调用，对查询结果反向排序，返回值还是queryset类型</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"count\"><a class=\"markdownIt-Anchor\" href=\"#count\"></a> count()</h3>\n<p>queryset类型的数据来调用，返回数据库中匹配查询(QuerySet)的对象数量。</p>\n<h3 id=\"first\"><a class=\"markdownIt-Anchor\" href=\"#first\"></a> first()</h3>\n<p>queryset类型的数据来调用，返回第一条记录。<code>Book.objects.all()[0] = Book.objects.all().first()</code>得到的都是model对象，不是queryset</p>\n<h3 id=\"last\"><a class=\"markdownIt-Anchor\" href=\"#last\"></a> last()</h3>\n<p>queryset类型的数据来调用，返回最后一条记录,结果为model对象类型</p>\n<h3 id=\"exists\"><a class=\"markdownIt-Anchor\" href=\"#exists\"></a> exists()</h3>\n<p>queryset类型的数据来调用，如果QuerySet包含数据，就返回True，否则返回False。</p>\n<p>空的queryset类型数据也有布尔值True和False，但是一般不用它来判断数据库里面是不是有数据，如果有大量的数据，你用它来判断，那么就需要查询出所有的数据，效率太差了，用count或者exits。</p>\n<blockquote>\n<p>例：all_books = models.Book.objects.all().exists() #翻译成的sql是SELECT (1) AS `a` FROM `app01_book` LIMIT 1，就是通过limit 1，取一条来看看是不是有数据</p>\n</blockquote>\n<h3 id=\"valuesfield\"><a class=\"markdownIt-Anchor\" href=\"#valuesfield\"></a> values(*field)</h3>\n<p>用的比较多，queryset类型的数据来调用，返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列model的实例化对象，而是一个可迭代的字典序列,只要是返回的queryset类型，就可以继续链式调用queryset类型的其他的查找方法，其他方法也是一样的。</p>\n<h3 id=\"values_listfield\"><a class=\"markdownIt-Anchor\" href=\"#values_listfield\"></a> values_list(*field)</h3>\n<p>它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列</p>\n<h3 id=\"distinct\"><a class=\"markdownIt-Anchor\" href=\"#distinct\"></a> distinct()</h3>\n<p>values和values_list得到的queryset类型的数据来调用，从返回结果中剔除重复纪录,结果还是queryset</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>总结表格</p>\n<table>\n<thead>\n<tr>\n<th>接口名</th>\n<th>作用</th>\n<th>调用类型</th>\n<th>结果类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>all()</code></td>\n<td>查询所有结果</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>filter</code></td>\n<td>条件查询</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>get</code></td>\n<td>条件查询,但只返回一条数据</td>\n<td>objects</td>\n<td>Model（行记录对象）</td>\n</tr>\n<tr>\n<td><code>exclude</code></td>\n<td>匹配非条件的对象</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>order_by</code></td>\n<td>对<strong>查询结果</strong>进行排序</td>\n<td>QuerySet</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>reverse</code></td>\n<td>对查询结果反向排序</td>\n<td>QuerySet</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>返回匹配查询的对象数量</td>\n<td>QuerySet</td>\n<td>int</td>\n</tr>\n<tr>\n<td><code>first</code></td>\n<td>返回第一条记录</td>\n<td>QuerySet</td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>last</code></td>\n<td>返回最后一条记录</td>\n<td>QuerySet</td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>判断QuerySet是否包含数据</td>\n<td>QuerySet</td>\n<td>bool（True、False）</td>\n</tr>\n<tr>\n<td><code>values</code></td>\n<td>以字典方式返回</td>\n<td>QuerySet</td>\n<td>ValueQuerySet</td>\n</tr>\n<tr>\n<td><code>values_list</code></td>\n<td>以元组方式返回</td>\n<td>QuerySet</td>\n<td>dic</td>\n</tr>\n<tr>\n<td><code>distinct</code></td>\n<td>去重</td>\n<td>values和values_list得到的queryset类型</td>\n<td>queryset</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#模糊查询\"></a> 模糊查询</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__in<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#price值等于这三个里面的任意一个的对象</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__gt<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#大于，大于等于是price__gte=100，别写price>100，这种参数不支持</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__lt<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__range<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#sql的between and，大于等于100，小于等于200</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__contains<span class=\"token operator\">=</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#title值中包含python的</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__icontains<span class=\"token operator\">=</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#不区分大小写</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__startswith<span class=\"token operator\">=</span><span class=\"token string\">\"py\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#以什么开头，istartswith  不区分大小写</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pub_date__year<span class=\"token operator\">=</span><span class=\"token number\">2012</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># all_books = models.Book.objects.filter(pub_date__year=2012) #找2012年的所有书籍</span>\n    <span class=\"token comment\"># all_books = models.Book.objects.filter(pub_date__year__gt=2012)#找大于2012年的所有书籍</span>\n    all_books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pub_date__year<span class=\"token operator\">=</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span>pub_date__month<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#找2019年月份的所有书籍，如果明明有结果，你却查不出结果，是因为mysql数据库的时区和咱们django的时区不同导致的，了解一下就行了，你需要做的就是将django中的settings配置文件里面的USE_TZ = True改为False，就可以查到结果了，以后这个值就改为False，而且就是因为咱们用的mysql数据库才会有这个问题，其他数据库没有这个问题。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>假如说查找的字段为<code>xx</code></p>\n<table>\n<thead>\n<tr>\n<th>模糊查找类型</th>\n<th>表示方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任意包含某个值</td>\n<td>xx__in=[100,200,300</td>\n</tr>\n<tr>\n<td>大于某个值</td>\n<td>xx__gt=100</td>\n</tr>\n<tr>\n<td>小于某个值</td>\n<td>xx_lt=100</td>\n</tr>\n<tr>\n<td>介于某个值之间</td>\n<td>xx_range=[100,200]</td>\n</tr>\n<tr>\n<td>包含某个字符</td>\n<td>xx_contains=‘python’</td>\n</tr>\n<tr>\n<td>不区分大小写</td>\n<td>xx_icontains=‘python’</td>\n</tr>\n<tr>\n<td>以什么开头</td>\n<td>xx_startswith=‘py’</td>\n</tr>\n<tr>\n<td>查询某一年</td>\n<td>xx_year=2012</td>\n</tr>\n<tr>\n<td>大于某一年</td>\n<td>xx_year_gt=2012</td>\n</tr>\n</tbody>\n</table>\n","more":"<h2 id=\"查询接口\"><a class=\"markdownIt-Anchor\" href=\"#查询接口\"></a> 查询接口</h2>\n<h3 id=\"all\"><a class=\"markdownIt-Anchor\" href=\"#all\"></a> all()</h3>\n<p>查询所有结果，结果是queryset类型</p>\n<h3 id=\"filterkwargs\"><a class=\"markdownIt-Anchor\" href=\"#filterkwargs\"></a> filter(**kwargs)</h3>\n<p>and条件关系：参数用逗号分割表示and关系</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">'dazhuang'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">'大壮禅师'</span><span class=\"token punctuation\">,</span>\n    age <span class=\"token operator\">=</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中filter的参数也可以通过字典方式传入</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">odels<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'大壮禅师'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nmodels<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#queryset类型可以调用fitler在过滤</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"getkwargs\"><a class=\"markdownIt-Anchor\" href=\"#getkwargs\"></a> get(**kwargs)</h3>\n<p>返回与所给筛选条件相匹配的对象，不是queryset类型，是行记录对象，返回结果有且只有一个，如果符合筛选条件的对象超过一个或者没有都会抛出错误。捕获异常try。</p>\n<p><code>Book.objects.get(id=1)</code></p>\n<h3 id=\"excludekwargs\"><a class=\"markdownIt-Anchor\" href=\"#excludekwargs\"></a> exclude(**kwargs)</h3>\n<p>排除的意思，它包含了与所给筛选条件不匹配的对象，没有不等于的操作，用这个exclude，返回值是queryset类型 <strong>Book.objects.exclude(id=6)，返回id不等于6的所有的对象</strong>，<strong>或者在queryset基础上调用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\nquery <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">=</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"order_byfield\"><a class=\"markdownIt-Anchor\" href=\"#order_byfield\"></a> order_by(*field)</h3>\n<p>queryset类型的数据来调用，对查询结果排序,默认是按照id来升序排列的，返回值还是queryset类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">#直接写price，默认是按照price升序排列，按照字段降序排列，就写个负号就行了order_by('-price'),order_by('price','id')是多条件排序，按照price进行升序，price相同的数据，按照id进行升序</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"reverse\"><a class=\"markdownIt-Anchor\" href=\"#reverse\"></a> reverse()</h3>\n<p>queryset类型的数据来调用，对查询结果反向排序，返回值还是queryset类型</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"count\"><a class=\"markdownIt-Anchor\" href=\"#count\"></a> count()</h3>\n<p>queryset类型的数据来调用，返回数据库中匹配查询(QuerySet)的对象数量。</p>\n<h3 id=\"first\"><a class=\"markdownIt-Anchor\" href=\"#first\"></a> first()</h3>\n<p>queryset类型的数据来调用，返回第一条记录。<code>Book.objects.all()[0] = Book.objects.all().first()</code>得到的都是model对象，不是queryset</p>\n<h3 id=\"last\"><a class=\"markdownIt-Anchor\" href=\"#last\"></a> last()</h3>\n<p>queryset类型的数据来调用，返回最后一条记录,结果为model对象类型</p>\n<h3 id=\"exists\"><a class=\"markdownIt-Anchor\" href=\"#exists\"></a> exists()</h3>\n<p>queryset类型的数据来调用，如果QuerySet包含数据，就返回True，否则返回False。</p>\n<p>空的queryset类型数据也有布尔值True和False，但是一般不用它来判断数据库里面是不是有数据，如果有大量的数据，你用它来判断，那么就需要查询出所有的数据，效率太差了，用count或者exits。</p>\n<blockquote>\n<p>例：all_books = models.Book.objects.all().exists() #翻译成的sql是SELECT (1) AS `a` FROM `app01_book` LIMIT 1，就是通过limit 1，取一条来看看是不是有数据</p>\n</blockquote>\n<h3 id=\"valuesfield\"><a class=\"markdownIt-Anchor\" href=\"#valuesfield\"></a> values(*field)</h3>\n<p>用的比较多，queryset类型的数据来调用，返回一个ValueQuerySet——一个特殊的QuerySet，运行后得到的并不是一系列model的实例化对象，而是一个可迭代的字典序列,只要是返回的queryset类型，就可以继续链式调用queryset类型的其他的查找方法，其他方法也是一样的。</p>\n<h3 id=\"values_listfield\"><a class=\"markdownIt-Anchor\" href=\"#values_listfield\"></a> values_list(*field)</h3>\n<p>它与values()非常相似，它返回的是一个元组序列，values返回的是一个字典序列</p>\n<h3 id=\"distinct\"><a class=\"markdownIt-Anchor\" href=\"#distinct\"></a> distinct()</h3>\n<p>values和values_list得到的queryset类型的数据来调用，从返回结果中剔除重复纪录,结果还是queryset</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">query <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>总结表格</p>\n<table>\n<thead>\n<tr>\n<th>接口名</th>\n<th>作用</th>\n<th>调用类型</th>\n<th>结果类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>all()</code></td>\n<td>查询所有结果</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>filter</code></td>\n<td>条件查询</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>get</code></td>\n<td>条件查询,但只返回一条数据</td>\n<td>objects</td>\n<td>Model（行记录对象）</td>\n</tr>\n<tr>\n<td><code>exclude</code></td>\n<td>匹配非条件的对象</td>\n<td>objects</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>order_by</code></td>\n<td>对<strong>查询结果</strong>进行排序</td>\n<td>QuerySet</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>reverse</code></td>\n<td>对查询结果反向排序</td>\n<td>QuerySet</td>\n<td>QuerySet</td>\n</tr>\n<tr>\n<td><code>count</code></td>\n<td>返回匹配查询的对象数量</td>\n<td>QuerySet</td>\n<td>int</td>\n</tr>\n<tr>\n<td><code>first</code></td>\n<td>返回第一条记录</td>\n<td>QuerySet</td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>last</code></td>\n<td>返回最后一条记录</td>\n<td>QuerySet</td>\n<td>Model</td>\n</tr>\n<tr>\n<td><code>exists</code></td>\n<td>判断QuerySet是否包含数据</td>\n<td>QuerySet</td>\n<td>bool（True、False）</td>\n</tr>\n<tr>\n<td><code>values</code></td>\n<td>以字典方式返回</td>\n<td>QuerySet</td>\n<td>ValueQuerySet</td>\n</tr>\n<tr>\n<td><code>values_list</code></td>\n<td>以元组方式返回</td>\n<td>QuerySet</td>\n<td>dic</td>\n</tr>\n<tr>\n<td><code>distinct</code></td>\n<td>去重</td>\n<td>values和values_list得到的queryset类型</td>\n<td>queryset</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#模糊查询\"></a> 模糊查询</h2>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__in<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#price值等于这三个里面的任意一个的对象</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__gt<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#大于，大于等于是price__gte=100，别写price>100，这种参数不支持</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__lt<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>price__range<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#sql的between and，大于等于100，小于等于200</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__contains<span class=\"token operator\">=</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#title值中包含python的</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__icontains<span class=\"token operator\">=</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#不区分大小写</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>title__startswith<span class=\"token operator\">=</span><span class=\"token string\">\"py\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#以什么开头，istartswith  不区分大小写</span>\nBook<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pub_date__year<span class=\"token operator\">=</span><span class=\"token number\">2012</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># all_books = models.Book.objects.filter(pub_date__year=2012) #找2012年的所有书籍</span>\n    <span class=\"token comment\"># all_books = models.Book.objects.filter(pub_date__year__gt=2012)#找大于2012年的所有书籍</span>\n    all_books <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pub_date__year<span class=\"token operator\">=</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span>pub_date__month<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#找2019年月份的所有书籍，如果明明有结果，你却查不出结果，是因为mysql数据库的时区和咱们django的时区不同导致的，了解一下就行了，你需要做的就是将django中的settings配置文件里面的USE_TZ = True改为False，就可以查到结果了，以后这个值就改为False，而且就是因为咱们用的mysql数据库才会有这个问题，其他数据库没有这个问题。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>假如说查找的字段为<code>xx</code></p>\n<table>\n<thead>\n<tr>\n<th>模糊查找类型</th>\n<th>表示方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任意包含某个值</td>\n<td>xx__in=[100,200,300</td>\n</tr>\n<tr>\n<td>大于某个值</td>\n<td>xx__gt=100</td>\n</tr>\n<tr>\n<td>小于某个值</td>\n<td>xx_lt=100</td>\n</tr>\n<tr>\n<td>介于某个值之间</td>\n<td>xx_range=[100,200]</td>\n</tr>\n<tr>\n<td>包含某个字符</td>\n<td>xx_contains=‘python’</td>\n</tr>\n<tr>\n<td>不区分大小写</td>\n<td>xx_icontains=‘python’</td>\n</tr>\n<tr>\n<td>以什么开头</td>\n<td>xx_startswith=‘py’</td>\n</tr>\n<tr>\n<td>查询某一年</td>\n<td>xx_year=2012</td>\n</tr>\n<tr>\n<td>大于某一年</td>\n<td>xx_year_gt=2012</td>\n</tr>\n</tbody>\n</table>\n","categories":[{"name":"Python","path":"api/categories/Python.json"},{"name":"Django的ORM操作","path":"api/categories/Django的ORM操作.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Django","path":"api/tags/Django.json"}]}