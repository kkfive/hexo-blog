{"title":"HTTP缓存机制与Cookie","slug":"日常学习/技术相关/HTTP协议与网络编程/3. HTTP缓存机制","date":"2020-08-10T13:29:01.000Z","updated":"2022-02-21T06:11:10.020Z","comments":true,"path":"api/articles/日常学习/技术相关/HTTP协议与网络编程/3. HTTP缓存机制.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@06d51b9d75d9ae9560d5d09c65c7649f7a91a59c/2020/08/10/b80cbde1d12d69b94f708a992a518e5a.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@801fbf05692ac99e49300ce0991786a6f474c2a0/2020/08/10/68027e413487a346a000bdbbda4c63d6.png","https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@ab642c1677b0990fca8e5b3651826f9683cc707e/2020/08/10/b088b483a2755493b77d51a06acb82fb.png"],"content":"<h2 id=\"http的缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#http的缓存机制\"></a> HTTP的缓存机制</h2>\n<h3 id=\"缓存是什么\"><a class=\"markdownIt-Anchor\" href=\"#缓存是什么\"></a> 缓存是什么</h3>\n<p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当Web缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。</p>\n<p>缓存需要合理配置，因为并不是所有资源都是永久不変的。重要的是对一个资源的缓存应截止到其下次发生改变（即不能缓存过期的资源）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@06d51b9d75d9ae9560d5d09c65c7649f7a91a59c/2020/08/10/b80cbde1d12d69b94f708a992a518e5a.png\" alt=\"image-20200810213242542\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@801fbf05692ac99e49300ce0991786a6f474c2a0/2020/08/10/68027e413487a346a000bdbbda4c63d6.png\" alt=\"image-20200810214608480\" /></p>\n<p>缓存服务器端的数据的优点</p>\n<ol>\n<li>缓解服务器端的资源消耗和运行压力，提升服务器端的整体性能。</li>\n<li>减少服务器端资源加载的延迟，进而成少显示某个资源所用的时间</li>\n<li>减少对带宽造成的压力，避免网络阻塞问题的出现</li>\n<li>Web站点变得更具有响应性</li>\n</ol>\n<p>常见的HTTP缓存只能存储GET响应，对于其他类型的响应则无能为力。</p>\n<ul>\n<li>检索请求的成功响应：响应状态码为200,则表示为成功。包含例如HTML文档，图片，或者文件的响应。</li>\n<li>不变的重定向：响应状态码为301</li>\n<li>错误响应：响应状态码为404的一个页面。</li>\n<li>不完全的响应：响应状态码为206,只返回局部的信息。</li>\n<li>除了GET请求外，如果匹配到作为ー个已被定义的cache键名的响应。</li>\n</ul>\n<h2 id=\"缓存类型\"><a class=\"markdownIt-Anchor\" href=\"#缓存类型\"></a> 缓存类型</h2>\n<h3 id=\"私有缓存\"><a class=\"markdownIt-Anchor\" href=\"#私有缓存\"></a> 私有缓存</h3>\n<p>私有缓存只能用于单独用户。洳览器缓存拥有用户通过HTTP下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航、保存网页、查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存內容的离线览。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control:private<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"共享缓存\"><a class=\"markdownIt-Anchor\" href=\"#共享缓存\"></a> 共享缓存</h3>\n<p>共享缓存可以被多个用户使用。例如，ISP或所在的公司可能会架设一个web代理来作为本地网络基础的一部分提供给用户。这样热门的资源就会被重复使用，减少网络拥堵与延迟</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control:public<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"缓存控制\"><a class=\"markdownIt-Anchor\" href=\"#缓存控制\"></a> 缓存控制</h2>\n<h3 id=\"cache-control头\"><a class=\"markdownIt-Anchor\" href=\"#cache-control头\"></a> Cache-control头</h3>\n<p>HTTP/1.1定义的Cache-Control头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义存策略。</p>\n<ol>\n<li>\n<p>禁止进行缓存</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: no-store\nCache-Control: no-cache, no-store, must-revalidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>强制确认缓存</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>缓存过期机制</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: max-age&#x3D;31536000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>缓存验证确认</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: must-revalidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"pragma头\"><a class=\"markdownIt-Anchor\" href=\"#pragma头\"></a> Pragma头</h3>\n<p>Pragma头是HTTP/1.0标准中定义的一个header属性，请求中包含Pragma的效果跟在头信息中定义“Cache-Control:no-cache”相同。但是HTTP的响应头不支持这个属性，所以它不能拿来完全替代HTTP/1.1中定义的Cache-Control头。通常定义Pragma以向后兼容基于HTTP/1.0的客户。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Pragma: no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"expires头\"><a class=\"markdownIt-Anchor\" href=\"#expires头\"></a> Expires头</h3>\n<p>Expires响应头包含日期/肘间，即在此时候之后，响应过期。</p>\n<ul>\n<li>无效的日期，比如0代表着过去的日期，即该资源已经过期。</li>\n<li>如果在Cache-Control响应头设置了“max-age”或者“s-max-age”指令，那么 Expires头会被忽略</li>\n</ul>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Expires: Wed,21 Oct 2015 07:28:00 GMT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\"></a> Cookie</h2>\n<h3 id=\"cookie是什么\"><a class=\"markdownIt-Anchor\" href=\"#cookie是什么\"></a> Cookie是什么</h3>\n<p>Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@ab642c1677b0990fca8e5b3651826f9683cc707e/2020/08/10/b088b483a2755493b77d51a06acb82fb.png\" alt=\"image-20200810230507691\" /></p>\n<p>通常，Cookie用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。 cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。Cookie技术产生源于HTTP协议在互联网上的急速发展。</p>\n<p>Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段。但现在随着现代洳览器开始支持各种各杵的存储方式， Cookie渐渐被淘汰。由于服务器指定Cookie后，浏览器的每次请求都会携带Cookie数据，会带来额外的性能开销。</p>\n<h3 id=\"cookie的存储\"><a class=\"markdownIt-Anchor\" href=\"#cookie的存储\"></a> Cookie的存储</h3>\n<p>Cookie保存在客户端某个特定的目录下的一个扩展名为“.txt”文本文件中，井且不同站点的 Cookie数据保存不同的文件中。</p>\n<p>Cookie数据一般都是加密后保存的。</p>\n<h3 id=\"cookie的作用域\"><a class=\"markdownIt-Anchor\" href=\"#cookie的作用域\"></a> Cookie的作用域</h3>\n<p>Domain和Path标识定义了Cookie的作用域，即Cookie应该发送给哪些URL.</p>\n<ul>\n<li>Domain标识指定了哪些主机可以接受Cookie\n<ul>\n<li>如果不指定，默认为当前文档的主机（不包含子域名）。</li>\n<li>如果指定了 Domain，则一般包含子域名。例如，如果设置Domain=<code>wolongxueyuan.com</code>,则（Cookie也包含在子域名中（如<code>developer.wolongxueyuan.com</code>).</li>\n</ul>\n</li>\n<li>Path标识指定了主机下的哪些路径可以接受Cookie（该URL路径必须存在于请求URL中）。以字符%x2F(“/”）作为路径分隔符，子路径也会被匹配。</li>\n</ul>\n<h3 id=\"cookie的有效期\"><a class=\"markdownIt-Anchor\" href=\"#cookie的有效期\"></a> Cookie的有效期</h3>\n<p>Max-Age和 Expires/标识定义了 Cookie的有效期，即 Cookie的生命周期。</p>\n<ul>\n<li>\n<p>会话期Cookie</p>\n<p>会话期Cookie是最简单的Cookie。浏览器关之后Cookie会被自动删除，也就是说cookie仅在会话期内有效。会话期 Cookie不需要指定过期时间（Expires）或者有效期（MaxーAge)</p>\n</li>\n<li>\n<p>持久性Cookie</p>\n<p>持久性 Cookie可以指定一个特定的过期时间（ Expires）或有效期（Max-Age)</p>\n</li>\n</ul>\n<h3 id=\"cookie的应用\"><a class=\"markdownIt-Anchor\" href=\"#cookie的应用\"></a> Cookie的应用</h3>\n<p>Cookie主要用于以下三个方面</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<h2 id=\"访问与更新cookie\"><a class=\"markdownIt-Anchor\" href=\"#访问与更新cookie\"></a> 访问与更新Cookie</h2>\n<h3 id=\"创建cookie\"><a class=\"markdownIt-Anchor\" href=\"#创建cookie\"></a> 创建Cookie</h3>\n<p>Cookie存储可以是多个内容，其格式为键值对<code>name=value</code>。多个内容中间用<code>;</code>隔开。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=zhuangwuji'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"读取cookie\"><a class=\"markdownIt-Anchor\" href=\"#读取cookie\"></a> 读取Cookie</h3>\n<p><code>allCookies</code>被赋值为一个字符串，该字符串包含所有的Cookie，每条cookie以分号分隔（即key= value键值对）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> allCookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allCookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> allCookies<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> cookie <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> cookiePair <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cookiePair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> cookiePair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改cookie\"><a class=\"markdownIt-Anchor\" href=\"#修改cookie\"></a> 修改Cookie</h3>\n<p>与创建类似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=zhuangwuji'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除cookie\"><a class=\"markdownIt-Anchor\" href=\"#删除cookie\"></a> 删除Cookie</h3>\n<p>删除Cookie只需要将键对应的值设置为空，并且把Expires标识为以前的时间即可。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=;expires=Thu,01 jan 1970 00:00:00 GMT'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"http中的cookie\"><a class=\"markdownIt-Anchor\" href=\"#http中的cookie\"></a> HTTP中的Cookie</h2>\n<h3 id=\"set-cookie响应头\"><a class=\"markdownIt-Anchor\" href=\"#set-cookie响应头\"></a> Set-Cookie响应头</h3>\n<p>服务器使用Set-Cookie响应头部向用户代理（一般是浏览器）发送cookie信息。一个简单的Cookie可能像这样</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Set-Cookie: &lt;cookie名&gt;&#x3D;&lt;cookie值&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>服务器通过该头部告知客户端保存Cookie信息。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">HTTP&#x2F;1.0 200 ok\nContent-type: text&#x2F;html\nSet-Cookie: yummy_cookie&#x3D;choco\nSet-Cookie: tasty_cookie&#x3D;strawberry<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"cookie请求头\"><a class=\"markdownIt-Anchor\" href=\"#cookie请求头\"></a> Cookie请求头</h3>\n<p>对服务器发起的每一次新请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头部再发送给服务器。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">GET &#x2F;sample_page.html HTTP&#x2F;1.1\nHost: www.example.org\nCookie: yummy_cookie&#x3D;choco;tasty_cookie&#x3D;strawberry<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","more":"<h2 id=\"http的缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#http的缓存机制\"></a> HTTP的缓存机制</h2>\n<h3 id=\"缓存是什么\"><a class=\"markdownIt-Anchor\" href=\"#缓存是什么\"></a> 缓存是什么</h3>\n<p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当Web缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。</p>\n<p>缓存需要合理配置，因为并不是所有资源都是永久不変的。重要的是对一个资源的缓存应截止到其下次发生改变（即不能缓存过期的资源）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@06d51b9d75d9ae9560d5d09c65c7649f7a91a59c/2020/08/10/b80cbde1d12d69b94f708a992a518e5a.png\" alt=\"image-20200810213242542\" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@801fbf05692ac99e49300ce0991786a6f474c2a0/2020/08/10/68027e413487a346a000bdbbda4c63d6.png\" alt=\"image-20200810214608480\" /></p>\n<p>缓存服务器端的数据的优点</p>\n<ol>\n<li>缓解服务器端的资源消耗和运行压力，提升服务器端的整体性能。</li>\n<li>减少服务器端资源加载的延迟，进而成少显示某个资源所用的时间</li>\n<li>减少对带宽造成的压力，避免网络阻塞问题的出现</li>\n<li>Web站点变得更具有响应性</li>\n</ol>\n<p>常见的HTTP缓存只能存储GET响应，对于其他类型的响应则无能为力。</p>\n<ul>\n<li>检索请求的成功响应：响应状态码为200,则表示为成功。包含例如HTML文档，图片，或者文件的响应。</li>\n<li>不变的重定向：响应状态码为301</li>\n<li>错误响应：响应状态码为404的一个页面。</li>\n<li>不完全的响应：响应状态码为206,只返回局部的信息。</li>\n<li>除了GET请求外，如果匹配到作为ー个已被定义的cache键名的响应。</li>\n</ul>\n<h2 id=\"缓存类型\"><a class=\"markdownIt-Anchor\" href=\"#缓存类型\"></a> 缓存类型</h2>\n<h3 id=\"私有缓存\"><a class=\"markdownIt-Anchor\" href=\"#私有缓存\"></a> 私有缓存</h3>\n<p>私有缓存只能用于单独用户。洳览器缓存拥有用户通过HTTP下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航、保存网页、查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存內容的离线览。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control:private<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"共享缓存\"><a class=\"markdownIt-Anchor\" href=\"#共享缓存\"></a> 共享缓存</h3>\n<p>共享缓存可以被多个用户使用。例如，ISP或所在的公司可能会架设一个web代理来作为本地网络基础的一部分提供给用户。这样热门的资源就会被重复使用，减少网络拥堵与延迟</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control:public<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"缓存控制\"><a class=\"markdownIt-Anchor\" href=\"#缓存控制\"></a> 缓存控制</h2>\n<h3 id=\"cache-control头\"><a class=\"markdownIt-Anchor\" href=\"#cache-control头\"></a> Cache-control头</h3>\n<p>HTTP/1.1定义的Cache-Control头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义存策略。</p>\n<ol>\n<li>\n<p>禁止进行缓存</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: no-store\nCache-Control: no-cache, no-store, must-revalidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>\n<p>强制确认缓存</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>缓存过期机制</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: max-age&#x3D;31536000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>\n<p>缓存验证确认</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Cache-Control: must-revalidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"pragma头\"><a class=\"markdownIt-Anchor\" href=\"#pragma头\"></a> Pragma头</h3>\n<p>Pragma头是HTTP/1.0标准中定义的一个header属性，请求中包含Pragma的效果跟在头信息中定义“Cache-Control:no-cache”相同。但是HTTP的响应头不支持这个属性，所以它不能拿来完全替代HTTP/1.1中定义的Cache-Control头。通常定义Pragma以向后兼容基于HTTP/1.0的客户。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Pragma: no-cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"expires头\"><a class=\"markdownIt-Anchor\" href=\"#expires头\"></a> Expires头</h3>\n<p>Expires响应头包含日期/肘间，即在此时候之后，响应过期。</p>\n<ul>\n<li>无效的日期，比如0代表着过去的日期，即该资源已经过期。</li>\n<li>如果在Cache-Control响应头设置了“max-age”或者“s-max-age”指令，那么 Expires头会被忽略</li>\n</ul>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Expires: Wed,21 Oct 2015 07:28:00 GMT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\"></a> Cookie</h2>\n<h3 id=\"cookie是什么\"><a class=\"markdownIt-Anchor\" href=\"#cookie是什么\"></a> Cookie是什么</h3>\n<p>Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@ab642c1677b0990fca8e5b3651826f9683cc707e/2020/08/10/b088b483a2755493b77d51a06acb82fb.png\" alt=\"image-20200810230507691\" /></p>\n<p>通常，Cookie用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。 cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。Cookie技术产生源于HTTP协议在互联网上的急速发展。</p>\n<p>Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段。但现在随着现代洳览器开始支持各种各杵的存储方式， Cookie渐渐被淘汰。由于服务器指定Cookie后，浏览器的每次请求都会携带Cookie数据，会带来额外的性能开销。</p>\n<h3 id=\"cookie的存储\"><a class=\"markdownIt-Anchor\" href=\"#cookie的存储\"></a> Cookie的存储</h3>\n<p>Cookie保存在客户端某个特定的目录下的一个扩展名为“.txt”文本文件中，井且不同站点的 Cookie数据保存不同的文件中。</p>\n<p>Cookie数据一般都是加密后保存的。</p>\n<h3 id=\"cookie的作用域\"><a class=\"markdownIt-Anchor\" href=\"#cookie的作用域\"></a> Cookie的作用域</h3>\n<p>Domain和Path标识定义了Cookie的作用域，即Cookie应该发送给哪些URL.</p>\n<ul>\n<li>Domain标识指定了哪些主机可以接受Cookie\n<ul>\n<li>如果不指定，默认为当前文档的主机（不包含子域名）。</li>\n<li>如果指定了 Domain，则一般包含子域名。例如，如果设置Domain=<code>wolongxueyuan.com</code>,则（Cookie也包含在子域名中（如<code>developer.wolongxueyuan.com</code>).</li>\n</ul>\n</li>\n<li>Path标识指定了主机下的哪些路径可以接受Cookie（该URL路径必须存在于请求URL中）。以字符%x2F(“/”）作为路径分隔符，子路径也会被匹配。</li>\n</ul>\n<h3 id=\"cookie的有效期\"><a class=\"markdownIt-Anchor\" href=\"#cookie的有效期\"></a> Cookie的有效期</h3>\n<p>Max-Age和 Expires/标识定义了 Cookie的有效期，即 Cookie的生命周期。</p>\n<ul>\n<li>\n<p>会话期Cookie</p>\n<p>会话期Cookie是最简单的Cookie。浏览器关之后Cookie会被自动删除，也就是说cookie仅在会话期内有效。会话期 Cookie不需要指定过期时间（Expires）或者有效期（MaxーAge)</p>\n</li>\n<li>\n<p>持久性Cookie</p>\n<p>持久性 Cookie可以指定一个特定的过期时间（ Expires）或有效期（Max-Age)</p>\n</li>\n</ul>\n<h3 id=\"cookie的应用\"><a class=\"markdownIt-Anchor\" href=\"#cookie的应用\"></a> Cookie的应用</h3>\n<p>Cookie主要用于以下三个方面</p>\n<ul>\n<li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li>\n<li>个性化设置（如用户自定义设置、主题等）</li>\n<li>浏览器行为跟踪（如跟踪分析用户行为等）</li>\n</ul>\n<h2 id=\"访问与更新cookie\"><a class=\"markdownIt-Anchor\" href=\"#访问与更新cookie\"></a> 访问与更新Cookie</h2>\n<h3 id=\"创建cookie\"><a class=\"markdownIt-Anchor\" href=\"#创建cookie\"></a> 创建Cookie</h3>\n<p>Cookie存储可以是多个内容，其格式为键值对<code>name=value</code>。多个内容中间用<code>;</code>隔开。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=zhuangwuji'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"读取cookie\"><a class=\"markdownIt-Anchor\" href=\"#读取cookie\"></a> 读取Cookie</h3>\n<p><code>allCookies</code>被赋值为一个字符串，该字符串包含所有的Cookie，每条cookie以分号分隔（即key= value键值对）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> allCookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allCookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> allCookies<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> cookie <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> cookiePair <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cookiePair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> cookiePair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改cookie\"><a class=\"markdownIt-Anchor\" href=\"#修改cookie\"></a> 修改Cookie</h3>\n<p>与创建类似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=zhuangwuji'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"删除cookie\"><a class=\"markdownIt-Anchor\" href=\"#删除cookie\"></a> 删除Cookie</h3>\n<p>删除Cookie只需要将键对应的值设置为空，并且把Expires标识为以前的时间即可。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=;expires=Thu,01 jan 1970 00:00:00 GMT'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"http中的cookie\"><a class=\"markdownIt-Anchor\" href=\"#http中的cookie\"></a> HTTP中的Cookie</h2>\n<h3 id=\"set-cookie响应头\"><a class=\"markdownIt-Anchor\" href=\"#set-cookie响应头\"></a> Set-Cookie响应头</h3>\n<p>服务器使用Set-Cookie响应头部向用户代理（一般是浏览器）发送cookie信息。一个简单的Cookie可能像这样</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">Set-Cookie: &lt;cookie名&gt;&#x3D;&lt;cookie值&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>服务器通过该头部告知客户端保存Cookie信息。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">HTTP&#x2F;1.0 200 ok\nContent-type: text&#x2F;html\nSet-Cookie: yummy_cookie&#x3D;choco\nSet-Cookie: tasty_cookie&#x3D;strawberry<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"cookie请求头\"><a class=\"markdownIt-Anchor\" href=\"#cookie请求头\"></a> Cookie请求头</h3>\n<p>对服务器发起的每一次新请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头部再发送给服务器。</p>\n<pre class=\"line-numbers language-header\" data-language=\"header\"><code class=\"language-header\">GET &#x2F;sample_page.html HTTP&#x2F;1.1\nHost: www.example.org\nCookie: yummy_cookie&#x3D;choco;tasty_cookie&#x3D;strawberry<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"HTTP网络协议","path":"api/categories/HTTP网络协议.json"}],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"},{"name":"网络编程","path":"api/tags/网络编程.json"}]}