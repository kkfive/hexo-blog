{"title":"21错误与异常","slug":"日常学习/技术相关/大前端/JavaScript学习/面向对象/21错误与异常","date":"2020-06-04T01:15:58.000Z","updated":"2022-02-21T06:11:10.028Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/JavaScript学习/面向对象/21错误与异常.json","excerpt":null,"covers":null,"content":"<h2 id=\"错误与异常是什么\"><a class=\"markdownIt-Anchor\" href=\"#错误与异常是什么\"></a> 错误与异常是什么</h2>\n<p>错误，指程序中的非正常运行状态，在其它编程语言中称为“异常”或“错误”。解释器会为每个错误情形创建并抛出一个Error对象，其中包含错误的描述信息。</p>\n<p>通过使用Javascript提供的异常处理语句，可以用结构化的方式来捕捉发生的错误，让异常处理代码与核心业务代码实现分离。</p>\n<p>错误与异常处理在应用中的重要性是毋庸置疑的。任何有影响力的Web应用都需要一套完善的错误处理机制。</p>\n<h2 id=\"trycatch语句\"><a class=\"markdownIt-Anchor\" href=\"#trycatch语句\"></a> try…catch语句</h2>\n<p><code>try</code>表示标记一块待尝试的语句，如果语句出现错误，则通过<code>catch</code>语句进行捕捉。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用于捕获指定语句块中的错误或异常</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用未定义的变量 -> 报错</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 用于处理try语句中的错误</span>\n  <span class=\"token comment\">// error 表示try语句中出现错误的信息</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"改变量未定义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// catch语句无法处理try语句中的错误或异常时，执行finally语句中的内容</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>finally</code>表示最后执行，无论是走<code>try</code>还是<code>catch</code>都会执行finally语句。</p>\n<h2 id=\"throw语句\"><a class=\"markdownIt-Anchor\" href=\"#throw语句\"></a> throw语句</h2>\n<p>人为抛出错误或异常，语法结构<code>throw 异常或错误的表达式</code>。其表达式允许是任意类型的内容。作用为预判断当前使用的变量、函数或对象是否存在。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n     * throw 语句 - 人为抛出错误或异常\n     * 语法结构\n     *   - throw 异常或错误的表达式\n     *   表达式允许是任意类型的内容\n     * 作用 - 预判断当前使用的变量、函数或对象是否存在\n     */</span>\n        <span class=\"token comment\">// 真是情况下应抛出一个错误对象</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// console.log(fn(10));</span>\n<span class=\"token comment\">// console.log(fn());</span>\n\n<span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"unkown\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unkown</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"嵌套trycatch语句\"><a class=\"markdownIt-Anchor\" href=\"#嵌套trycatch语句\"></a> 嵌套try…catch语句</h2>\n<p>可以嵌套一个或多个try…catch语句。如果一个内部的try…catch语句没有捕捉块，将会启动匹配外部的try…catch语句的捕捉块。</p>\n<p><strong>注意：嵌套在catch语句块内。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"错误类型\"><a class=\"markdownIt-Anchor\" href=\"#错误类型\"></a> 错误类型</h2>\n<h3 id=\"基本错误类型\"><a class=\"markdownIt-Anchor\" href=\"#基本错误类型\"></a> 基本错误类型</h3>\n<p>执行代码期间可能会发生的错误有多种类型，每种错误都有对应的错误类型。当错误发生时，就会抛出对应类型的错误对象。</p>\n<p>Error是基本错误类型，其他错误类型都继承自该类型。Error类型的错误很少见，如果有也是浏览器抛出的。这个基本错误类型的主要目的是提供给开发人员抛出自定义错误的。</p>\n<h3 id=\"预定义错误类型\"><a class=\"markdownIt-Anchor\" href=\"#预定义错误类型\"></a> 预定义错误类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">错误类型</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>EvaError</code></td>\n<td style=\"text-align:center\">表示错误的原因：与<code>eval()</code>有关。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>internalError</code></td>\n<td style=\"text-align:center\">表示JavaScript引擎内部错误的异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>RangeError</code></td>\n<td style=\"text-align:center\">表示错误的原因：数值变量或参数超出其有效范围。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ReferenceError</code></td>\n<td style=\"text-align:center\">表示错误的原因：无效引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SyntaxError</code></td>\n<td style=\"text-align:center\">表示错误的原因：<code>eval()</code>在解析代码的过程中发生的语法错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TypeError</code></td>\n<td style=\"text-align:center\">表示错误的原因：变量或参数不属于有效类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>URIError</code></td>\n<td style=\"text-align:center\">表示错误的原因：给<code>encodeURI()</code>或<code>decodeURI()</code>传递的参数无效。</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors\">JavaScript 错误参考</a></p>\n","more":"<h2 id=\"错误与异常是什么\"><a class=\"markdownIt-Anchor\" href=\"#错误与异常是什么\"></a> 错误与异常是什么</h2>\n<p>错误，指程序中的非正常运行状态，在其它编程语言中称为“异常”或“错误”。解释器会为每个错误情形创建并抛出一个Error对象，其中包含错误的描述信息。</p>\n<p>通过使用Javascript提供的异常处理语句，可以用结构化的方式来捕捉发生的错误，让异常处理代码与核心业务代码实现分离。</p>\n<p>错误与异常处理在应用中的重要性是毋庸置疑的。任何有影响力的Web应用都需要一套完善的错误处理机制。</p>\n<h2 id=\"trycatch语句\"><a class=\"markdownIt-Anchor\" href=\"#trycatch语句\"></a> try…catch语句</h2>\n<p><code>try</code>表示标记一块待尝试的语句，如果语句出现错误，则通过<code>catch</code>语句进行捕捉。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用于捕获指定语句块中的错误或异常</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用未定义的变量 -> 报错</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 用于处理try语句中的错误</span>\n  <span class=\"token comment\">// error 表示try语句中出现错误的信息</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"改变量未定义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// catch语句无法处理try语句中的错误或异常时，执行finally语句中的内容</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>finally</code>表示最后执行，无论是走<code>try</code>还是<code>catch</code>都会执行finally语句。</p>\n<h2 id=\"throw语句\"><a class=\"markdownIt-Anchor\" href=\"#throw语句\"></a> throw语句</h2>\n<p>人为抛出错误或异常，语法结构<code>throw 异常或错误的表达式</code>。其表达式允许是任意类型的内容。作用为预判断当前使用的变量、函数或对象是否存在。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/**\n     * throw 语句 - 人为抛出错误或异常\n     * 语法结构\n     *   - throw 异常或错误的表达式\n     *   表达式允许是任意类型的内容\n     * 作用 - 预判断当前使用的变量、函数或对象是否存在\n     */</span>\n        <span class=\"token comment\">// 真是情况下应抛出一个错误对象</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// console.log(fn(10));</span>\n<span class=\"token comment\">// console.log(fn());</span>\n\n<span class=\"token keyword\">var</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"unkown\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unkown</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"嵌套trycatch语句\"><a class=\"markdownIt-Anchor\" href=\"#嵌套trycatch语句\"></a> 嵌套try…catch语句</h2>\n<p>可以嵌套一个或多个try…catch语句。如果一个内部的try…catch语句没有捕捉块，将会启动匹配外部的try…catch语句的捕捉块。</p>\n<p><strong>注意：嵌套在catch语句块内。</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"错误类型\"><a class=\"markdownIt-Anchor\" href=\"#错误类型\"></a> 错误类型</h2>\n<h3 id=\"基本错误类型\"><a class=\"markdownIt-Anchor\" href=\"#基本错误类型\"></a> 基本错误类型</h3>\n<p>执行代码期间可能会发生的错误有多种类型，每种错误都有对应的错误类型。当错误发生时，就会抛出对应类型的错误对象。</p>\n<p>Error是基本错误类型，其他错误类型都继承自该类型。Error类型的错误很少见，如果有也是浏览器抛出的。这个基本错误类型的主要目的是提供给开发人员抛出自定义错误的。</p>\n<h3 id=\"预定义错误类型\"><a class=\"markdownIt-Anchor\" href=\"#预定义错误类型\"></a> 预定义错误类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">错误类型</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>EvaError</code></td>\n<td style=\"text-align:center\">表示错误的原因：与<code>eval()</code>有关。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>internalError</code></td>\n<td style=\"text-align:center\">表示JavaScript引擎内部错误的异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>RangeError</code></td>\n<td style=\"text-align:center\">表示错误的原因：数值变量或参数超出其有效范围。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ReferenceError</code></td>\n<td style=\"text-align:center\">表示错误的原因：无效引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>SyntaxError</code></td>\n<td style=\"text-align:center\">表示错误的原因：<code>eval()</code>在解析代码的过程中发生的语法错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TypeError</code></td>\n<td style=\"text-align:center\">表示错误的原因：变量或参数不属于有效类型。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>URIError</code></td>\n<td style=\"text-align:center\">表示错误的原因：给<code>encodeURI()</code>或<code>decodeURI()</code>传递的参数无效。</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Errors\">JavaScript 错误参考</a></p>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"JavaScript笔记","path":"api/categories/JavaScript笔记.json"}],"tags":[{"name":"大前端","path":"api/tags/大前端.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}