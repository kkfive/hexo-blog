{"title":"2、TypeScript的类型系统","slug":"日常学习/技术相关/大前端/TypeScript/2、TypeScript的类型系统","date":"2020-12-13T12:02:25.000Z","updated":"2022-02-21T04:45:27.400Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/TypeScript/2、TypeScript的类型系统.json","excerpt":null,"covers":["https://rmt.ladydaily.com/fetch/tzk/storage/20201214091531.png?w=1280&amp;fmt=jpg"],"content":"<h2 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\"></a> 基础类型</h2>\n<p>基础类型包括<code>String</code>、<code>number</code>、<code>boolean</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 通过冒号标注变量值的类型</span>\n<span class=\"token keyword\">let</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">let</span> isOk<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"空和未定义类型\"><a class=\"markdownIt-Anchor\" href=\"#空和未定义类型\"></a> 空和未定义类型</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n\n<span class=\"token comment\">// a与b无法被赋值，但是可以将其赋值给其他类型</span>\n\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\nc <span class=\"token operator\">=</span> b\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果声明了一个变量，但没有赋值，那么值默认为<code>undefined</code>，类型为<code>any</code></p>\n</blockquote>\n<h3 id=\"避免赋值为空值时的配置\"><a class=\"markdownIt-Anchor\" href=\"#避免赋值为空值时的配置\"></a> 避免赋值为空值时的配置</h3>\n<p>修改tsc配置文件，加入字段<code>strictNullChecks</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时就不能将空值赋值给其他变量</p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201214091531.png?w=1280&amp;fmt=jpg\" alt=\"image-20201214091524329\" /></p>\n<h2 id=\"对象类型\"><a class=\"markdownIt-Anchor\" href=\"#对象类型\"></a> 对象类型</h2>\n<h3 id=\"内置对象\"><a class=\"markdownIt-Anchor\" href=\"#内置对象\"></a> 内置对象</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 数组</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 时间</span>\n<span class=\"token keyword\">let</span> d1<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 对象</span>\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义对象类型\"><a class=\"markdownIt-Anchor\" href=\"#自定义对象类型\"></a> 自定义对象类型</h3>\n<p>自定义对象相较于内置对象的优点是复用性高。但其不能作为值，<code>interface</code>只存在于编译前，编译后是不存在的。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以通过对象定义</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过对象定义可以作为值使用。<strong>因此当只作为某个函数接收的参数结构，可以使用<code>interface</code></strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\n<span class=\"token comment\">//  不可以</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> str2<span class=\"token operator\">:</span> String\n<span class=\"token comment\">// 可以</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组类型\"><a class=\"markdownIt-Anchor\" href=\"#数组类型\"></a> 数组类型</h2>\n<p><code>Typescript</code>中数组存储的类型必须一致，所以在标注数组类型的时候，同时要标注数组中存储的数据类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 泛型标注</span>\n<span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 简单标注</span>\n<span class=\"token keyword\">let</span> arr2<span class=\"token operator\">:</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"元组类型\"><a class=\"markdownIt-Anchor\" href=\"#元组类型\"></a> 元组类型</h2>\n<p>元组类型与数组类似，但可以存储不同类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 元组类型中初始化时，值与类型必须一一匹配</span>\n<span class=\"token keyword\">let</span> data1<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 但是元组类型可以添加值，但只能添加定义中的类型</span>\ndata1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndata1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康1'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型\"></a> 枚举类型</h2>\n<h3 id=\"数字枚举\"><a class=\"markdownIt-Anchor\" href=\"#数字枚举\"></a> 数字枚举</h3>\n<p>枚举的作用组织收集一组关联数据的方式，通过枚举我们可以给一组有关联意义的数据賦予一些友好的名字</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 枚举类型一旦定义无法在被赋值</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">HTTP_CODE</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">NOT_FOUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果没有指定值，那么默认值为上一个值 + 1</span>\n  <span class=\"token constant\">METHOD_NOT_ALLOWED</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token constant\">HTTP_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意事项：</p>\n<ul>\n<li><u>key</u> 不能是数字</li>\n<li><u>value</u> 可以是数字，称为 <u>数字类型枚举</u>，也可以是字符串，称为 <u>字符串类型枚举</u>，但不能是其它值，默认为数字：<u>0</u></li>\n<li>枚举值可以省略，如果省略，则：\n<ul>\n<li>第一个枚举值默认为：0</li>\n<li>非第一个枚举值为上一个数字枚举值 + 1</li>\n</ul>\n</li>\n<li>枚举值为只读（常量），初始化后不可修改</li>\n</ul>\n<h3 id=\"字符串类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型枚举\"></a> 字符串类型枚举</h3>\n<p>枚举类型的值，也可以是字符串类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">URLS</span>  <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">USER_REGISETER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/user/register'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_LOGIN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/user/login'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果前一个枚举值类型为字符串，则后续枚举项必须手动赋值</span>\n  <span class=\"token constant\">INDEX</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：如果前一个枚举值类型为字符串，则后续枚举项必须手动赋值</p>\n<blockquote>\n<p>小技巧：枚举名称可以是大写，也可以是小写，推荐使用全大写（通常使用全大写的命名方式来标注值为常量）</p>\n</blockquote>\n<h2 id=\"无值类型\"><a class=\"markdownIt-Anchor\" href=\"#无值类型\"></a> 无值类型</h2>\n<p>表示没有任何数据的类型，通常用于标注无返回值函数的返回值类型，函数默认标注类型为：<code>void</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// 没有 return 或者 return undefined</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在 <code>strictNullChecks</code> 为 <code>false</code> 的情况下，<code>undefined</code> 和 <code>null</code> 都可以赋值给 <code>void</code> ，但是当 <code>strictNullChecks</code> 为 <code>true</code> 的情况下，只有 <code>undefined</code> 才可以赋值给 <code>void</code></p>\n</blockquote>\n<h2 id=\"never类型\"><a class=\"markdownIt-Anchor\" href=\"#never类型\"></a> Never类型</h2>\n<p>当一个函数永远不可能执行 <code>return</code> 的时候，返回的就是 <code>never</code> ，与 <u>void</u> 不同，<code>void</code> 是执行了 <code>return</code>， 只是没有值，<code>never</code> 是不会执行 <code>return</code>，比如抛出错误，导致函数终止执行</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"任意类型\"><a class=\"markdownIt-Anchor\" href=\"#任意类型\"></a> 任意类型</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> any1<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>有的时候，我们并不确定这个值到底是什么类型或者不需要对该值进行类型检测，就可以标注为 <code>any</code> 类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>一个变量申明未赋值且未标注类型的情况下，默认为 <code>any</code> 类型</li>\n<li>任何类型值都可以赋值给 <code>any</code> 类型</li>\n<li><code>any</code> 类型也可以赋值给任意类型</li>\n<li><code>any</code> 类型有任意属性和方法</li>\n</ul>\n<p>注意：标注为 <code>any</code> 类型，也意味着放弃对该值的类型检测，同时放弃 IDE 的智能提示</p>\n<blockquote>\n<p>小技巧：当指定 <code>noImplicitAny</code> 配置为 <code>true</code>，当函数参数出现隐含的 <code>any</code> 类型时报错</p>\n</blockquote>\n<h2 id=\"未知类型\"><a class=\"markdownIt-Anchor\" href=\"#未知类型\"></a> 未知类型</h2>\n<p><u>unknow</u>，3.0 版本中新增，属于安全版的 <u>any</u>，但是与 any 不同的是：</p>\n<ul>\n<li><u>unknow</u> 仅能赋值给 <u>unknow</u>、<u>any</u></li>\n<li><u>unknow</u> 没有任何属性和方法</li>\n</ul>\n<h2 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\"></a> 函数类型</h2>\n<p>在 <u>JavaScript</u> 函数是非常重要的，在 <u>TypeScript</u> 也是如此。同样的，函数也有自己的类型标注格式</p>\n<ul>\n<li>参数</li>\n<li>返回值</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">函数名称</span><span class=\"token punctuation\">(</span> 参数<span class=\"token number\">1</span><span class=\"token operator\">:</span> 类型<span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span><span class=\"token operator\">:</span> 类型<span class=\"token operator\">...</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 返回值类型<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型保护\"><a class=\"markdownIt-Anchor\" href=\"#类型保护\"></a> 类型保护</h2>\n<p>我们通常在<code>JavaScript</code>中通过判断来处理⼀些逻辑，在<code>TypeScript</code>中这种条件语句块还有另外⼀个特性：根据判断逻辑的结果，缩⼩类型范围（有点类似断⾔），这种特性称为 类型保护，触发条件：</p>\n<ul>\n<li>逻辑条件语句块：if、else、elseif</li>\n<li>特定的⼀些关键字：typeof、instanceof、in……</li>\n</ul>\n<h3 id=\"typeof\"><a class=\"markdownIt-Anchor\" href=\"#typeof\"></a> typeof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 此时 a 变量就是 string类型</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这里就是当变量a为number类型时</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\"></a> instanceof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Date<span class=\"token operator\">|</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\"></a> in</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IA</span></span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IB</span></span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span> <span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span> <span class=\"token keyword\">in</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字面量类型保护\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型保护\"></a> 字面量类型保护</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IA</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'IA'</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IB</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'IB'</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span> <span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'IA'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义类型保护\"><a class=\"markdownIt-Anchor\" href=\"#自定义类型保护\"></a> 自定义类型保护</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">canEach</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> data <span class=\"token keyword\">is</span> Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>NodeList <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>forEach <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span>elements<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>NodeList<span class=\"token operator\">|</span>Element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">canEach</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        elements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n            el<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        elements<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>data is Element[]|NodeList</code> 是⼀种类型谓词，格式为： <code>xx is XX</code> ，返回这种类型的函数就可以被<code>TypeScript</code>识别为类型保护</p>\n<h2 id=\"类型操作\"><a class=\"markdownIt-Anchor\" href=\"#类型操作\"></a> 类型操作</h2>\n<h3 id=\"typeof-2\"><a class=\"markdownIt-Anchor\" href=\"#typeof-2\"></a> typeof</h3>\n<p>在 TypeScript 中， <code>typeof</code>有两种作⽤</p>\n<ul>\n<li>获取数据的类型</li>\n<li>捕获数据的类型</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'xiaokang.me'</span>\n<span class=\"token comment\">// 如果是 let ，把 'string' 作为值</span>\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> str1\n<span class=\"token comment\">// 如果是 type，把 'string' 作为类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">myType</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> str1\n<span class=\"token keyword\">let</span> str2<span class=\"token operator\">:</span> myType <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span>\n<span class=\"token keyword\">let</span> str3<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"keyof\"><a class=\"markdownIt-Anchor\" href=\"#keyof\"></a> keyof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'xiaokang'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// type PT = typeof p1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPersonVal</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> p1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"in-2\"><a class=\"markdownIt-Anchor\" href=\"#in-2\"></a> in</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Personal</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">personKeys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Personal\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">newPersonal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> personKeys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>in 后⾯的类型值必须是<code>string</code>或者<code>number</code>或者<code>symbol</code></p>\n<h2 id=\"类型兼容\"><a class=\"markdownIt-Anchor\" href=\"#类型兼容\"></a> 类型兼容</h2>\n<p><code>TypeScript</code>的类型系统是基于结构⼦类型的，它与名义类型（如：<code>java</code>）不同（名义类型的数据类型兼容性或等价性是通过明确的声明或类型的名称来决定的）。这种基于结构⼦类型的类型系统是基于组 成结构的，只要具有相同类型的成员，则两种类型即为兼容的。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> xiaohua <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ok，因为 Cat 类型的结构与 Person 类型的结构相似，所以它们是兼容的</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>xiaohua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<h2 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\"></a> 基础类型</h2>\n<p>基础类型包括<code>String</code>、<code>number</code>、<code>boolean</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 通过冒号标注变量值的类型</span>\n<span class=\"token keyword\">let</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span>\n<span class=\"token keyword\">let</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n<span class=\"token keyword\">let</span> isOk<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"空和未定义类型\"><a class=\"markdownIt-Anchor\" href=\"#空和未定义类型\"></a> 空和未定义类型</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> b<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n\n<span class=\"token comment\">// a与b无法被赋值，但是可以将其赋值给其他类型</span>\n\n<span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\nc <span class=\"token operator\">=</span> b\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>如果声明了一个变量，但没有赋值，那么值默认为<code>undefined</code>，类型为<code>any</code></p>\n</blockquote>\n<h3 id=\"避免赋值为空值时的配置\"><a class=\"markdownIt-Anchor\" href=\"#避免赋值为空值时的配置\"></a> 避免赋值为空值时的配置</h3>\n<p>修改tsc配置文件，加入字段<code>strictNullChecks</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>此时就不能将空值赋值给其他变量</p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20201214091531.png?w=1280&amp;fmt=jpg\" alt=\"image-20201214091524329\" /></p>\n<h2 id=\"对象类型\"><a class=\"markdownIt-Anchor\" href=\"#对象类型\"></a> 对象类型</h2>\n<h3 id=\"内置对象\"><a class=\"markdownIt-Anchor\" href=\"#内置对象\"></a> 内置对象</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 数组</span>\n<span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 时间</span>\n<span class=\"token keyword\">let</span> d1<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 对象</span>\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义对象类型\"><a class=\"markdownIt-Anchor\" href=\"#自定义对象类型\"></a> 自定义对象类型</h3>\n<p>自定义对象相较于内置对象的优点是复用性高。但其不能作为值，<code>interface</code>只存在于编译前，编译后是不存在的。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>也可以通过对象定义</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过对象定义可以作为值使用。<strong>因此当只作为某个函数接收的参数结构，可以使用<code>interface</code></strong></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"包装类型\"><a class=\"markdownIt-Anchor\" href=\"#包装类型\"></a> 包装类型</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\nstr1 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\n<span class=\"token comment\">//  不可以</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> str2<span class=\"token operator\">:</span> String\n<span class=\"token comment\">// 可以</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\nstr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"数组类型\"><a class=\"markdownIt-Anchor\" href=\"#数组类型\"></a> 数组类型</h2>\n<p><code>Typescript</code>中数组存储的类型必须一致，所以在标注数组类型的时候，同时要标注数组中存储的数据类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 泛型标注</span>\n<span class=\"token keyword\">let</span> arr1<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 简单标注</span>\n<span class=\"token keyword\">let</span> arr2<span class=\"token operator\">:</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\narr2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"元组类型\"><a class=\"markdownIt-Anchor\" href=\"#元组类型\"></a> 元组类型</h2>\n<p>元组类型与数组类似，但可以存储不同类型。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 元组类型中初始化时，值与类型必须一一匹配</span>\n<span class=\"token keyword\">let</span> data1<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'小康'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 但是元组类型可以添加值，但只能添加定义中的类型</span>\ndata1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndata1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小康1'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型\"></a> 枚举类型</h2>\n<h3 id=\"数字枚举\"><a class=\"markdownIt-Anchor\" href=\"#数字枚举\"></a> 数字枚举</h3>\n<p>枚举的作用组织收集一组关联数据的方式，通过枚举我们可以给一组有关联意义的数据賦予一些友好的名字</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 枚举类型一旦定义无法在被赋值</span>\n<span class=\"token keyword\">enum</span> <span class=\"token constant\">HTTP_CODE</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">NOT_FOUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果没有指定值，那么默认值为上一个值 + 1</span>\n  <span class=\"token constant\">METHOD_NOT_ALLOWED</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token constant\">HTTP_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意事项：</p>\n<ul>\n<li><u>key</u> 不能是数字</li>\n<li><u>value</u> 可以是数字，称为 <u>数字类型枚举</u>，也可以是字符串，称为 <u>字符串类型枚举</u>，但不能是其它值，默认为数字：<u>0</u></li>\n<li>枚举值可以省略，如果省略，则：\n<ul>\n<li>第一个枚举值默认为：0</li>\n<li>非第一个枚举值为上一个数字枚举值 + 1</li>\n</ul>\n</li>\n<li>枚举值为只读（常量），初始化后不可修改</li>\n</ul>\n<h3 id=\"字符串类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型枚举\"></a> 字符串类型枚举</h3>\n<p>枚举类型的值，也可以是字符串类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> <span class=\"token constant\">URLS</span>  <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">USER_REGISETER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/user/register'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">USER_LOGIN</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/user/login'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 如果前一个枚举值类型为字符串，则后续枚举项必须手动赋值</span>\n  <span class=\"token constant\">INDEX</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：如果前一个枚举值类型为字符串，则后续枚举项必须手动赋值</p>\n<blockquote>\n<p>小技巧：枚举名称可以是大写，也可以是小写，推荐使用全大写（通常使用全大写的命名方式来标注值为常量）</p>\n</blockquote>\n<h2 id=\"无值类型\"><a class=\"markdownIt-Anchor\" href=\"#无值类型\"></a> 无值类型</h2>\n<p>表示没有任何数据的类型，通常用于标注无返回值函数的返回值类型，函数默认标注类型为：<code>void</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// 没有 return 或者 return undefined</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>在 <code>strictNullChecks</code> 为 <code>false</code> 的情况下，<code>undefined</code> 和 <code>null</code> 都可以赋值给 <code>void</code> ，但是当 <code>strictNullChecks</code> 为 <code>true</code> 的情况下，只有 <code>undefined</code> 才可以赋值给 <code>void</code></p>\n</blockquote>\n<h2 id=\"never类型\"><a class=\"markdownIt-Anchor\" href=\"#never类型\"></a> Never类型</h2>\n<p>当一个函数永远不可能执行 <code>return</code> 的时候，返回的就是 <code>never</code> ，与 <u>void</u> 不同，<code>void</code> 是执行了 <code>return</code>， 只是没有值，<code>never</code> 是不会执行 <code>return</code>，比如抛出错误，导致函数终止执行</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"任意类型\"><a class=\"markdownIt-Anchor\" href=\"#任意类型\"></a> 任意类型</h2>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> any1<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>有的时候，我们并不确定这个值到底是什么类型或者不需要对该值进行类型检测，就可以标注为 <code>any</code> 类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>一个变量申明未赋值且未标注类型的情况下，默认为 <code>any</code> 类型</li>\n<li>任何类型值都可以赋值给 <code>any</code> 类型</li>\n<li><code>any</code> 类型也可以赋值给任意类型</li>\n<li><code>any</code> 类型有任意属性和方法</li>\n</ul>\n<p>注意：标注为 <code>any</code> 类型，也意味着放弃对该值的类型检测，同时放弃 IDE 的智能提示</p>\n<blockquote>\n<p>小技巧：当指定 <code>noImplicitAny</code> 配置为 <code>true</code>，当函数参数出现隐含的 <code>any</code> 类型时报错</p>\n</blockquote>\n<h2 id=\"未知类型\"><a class=\"markdownIt-Anchor\" href=\"#未知类型\"></a> 未知类型</h2>\n<p><u>unknow</u>，3.0 版本中新增，属于安全版的 <u>any</u>，但是与 any 不同的是：</p>\n<ul>\n<li><u>unknow</u> 仅能赋值给 <u>unknow</u>、<u>any</u></li>\n<li><u>unknow</u> 没有任何属性和方法</li>\n</ul>\n<h2 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\"></a> 函数类型</h2>\n<p>在 <u>JavaScript</u> 函数是非常重要的，在 <u>TypeScript</u> 也是如此。同样的，函数也有自己的类型标注格式</p>\n<ul>\n<li>参数</li>\n<li>返回值</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">函数名称</span><span class=\"token punctuation\">(</span> 参数<span class=\"token number\">1</span><span class=\"token operator\">:</span> 类型<span class=\"token punctuation\">,</span> 参数<span class=\"token number\">2</span><span class=\"token operator\">:</span> 类型<span class=\"token operator\">...</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> 返回值类型<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"类型保护\"><a class=\"markdownIt-Anchor\" href=\"#类型保护\"></a> 类型保护</h2>\n<p>我们通常在<code>JavaScript</code>中通过判断来处理⼀些逻辑，在<code>TypeScript</code>中这种条件语句块还有另外⼀个特性：根据判断逻辑的结果，缩⼩类型范围（有点类似断⾔），这种特性称为 类型保护，触发条件：</p>\n<ul>\n<li>逻辑条件语句块：if、else、elseif</li>\n<li>特定的⼀些关键字：typeof、instanceof、in……</li>\n</ul>\n<h3 id=\"typeof\"><a class=\"markdownIt-Anchor\" href=\"#typeof\"></a> typeof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 此时 a 变量就是 string类型</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这里就是当变量a为number类型时</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\"></a> instanceof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Date<span class=\"token operator\">|</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\"></a> in</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IA</span></span> <span class=\"token punctuation\">&#123;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IB</span></span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span> <span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span> <span class=\"token keyword\">in</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"字面量类型保护\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型保护\"></a> 字面量类型保护</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IA</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'IA'</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IB</span></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'IB'</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span> <span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'IA'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// ok</span>\n        arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// error</span>\n        arg<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义类型保护\"><a class=\"markdownIt-Anchor\" href=\"#自定义类型保护\"></a> 自定义类型保护</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">canEach</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> data <span class=\"token keyword\">is</span> Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>NodeList <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>forEach <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span>elements<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>NodeList<span class=\"token operator\">|</span>Element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">canEach</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        elements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> Element<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n            el<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        elements<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>data is Element[]|NodeList</code> 是⼀种类型谓词，格式为： <code>xx is XX</code> ，返回这种类型的函数就可以被<code>TypeScript</code>识别为类型保护</p>\n<h2 id=\"类型操作\"><a class=\"markdownIt-Anchor\" href=\"#类型操作\"></a> 类型操作</h2>\n<h3 id=\"typeof-2\"><a class=\"markdownIt-Anchor\" href=\"#typeof-2\"></a> typeof</h3>\n<p>在 TypeScript 中， <code>typeof</code>有两种作⽤</p>\n<ul>\n<li>获取数据的类型</li>\n<li>捕获数据的类型</li>\n</ul>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'xiaokang.me'</span>\n<span class=\"token comment\">// 如果是 let ，把 'string' 作为值</span>\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> str1\n<span class=\"token comment\">// 如果是 type，把 'string' 作为类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">myType</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> str1\n<span class=\"token keyword\">let</span> str2<span class=\"token operator\">:</span> myType <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span>\n<span class=\"token keyword\">let</span> str3<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'小康'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"keyof\"><a class=\"markdownIt-Anchor\" href=\"#keyof\"></a> keyof</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'xiaokang'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// type PT = typeof p1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPersonVal</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token keyword\">keyof</span> <span class=\"token keyword\">typeof</span> p1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"in-2\"><a class=\"markdownIt-Anchor\" href=\"#in-2\"></a> in</h3>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Personal</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">personKeys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Personal\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">newPersonal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>k <span class=\"token keyword\">in</span> personKeys<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>in 后⾯的类型值必须是<code>string</code>或者<code>number</code>或者<code>symbol</code></p>\n<h2 id=\"类型兼容\"><a class=\"markdownIt-Anchor\" href=\"#类型兼容\"></a> 类型兼容</h2>\n<p><code>TypeScript</code>的类型系统是基于结构⼦类型的，它与名义类型（如：<code>java</code>）不同（名义类型的数据类型兼容性或等价性是通过明确的声明或类型的名称来决定的）。这种基于结构⼦类型的类型系统是基于组 成结构的，只要具有相同类型的成员，则两种类型即为兼容的。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> xiaohua <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ok，因为 Cat 类型的结构与 Person 类型的结构相似，所以它们是兼容的</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>xiaohua<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"TypeScript","path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","path":"api/tags/TypeScript.json"}]}