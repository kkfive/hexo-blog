<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小康博客</title>
  <icon>https://www.gravatar.com/avatar/d24719e3b7a66cbde951909bac991457</icon>
  <subtitle>每天进步一点点！</subtitle>
  <link href="https://www.antmoe.com/atom.xml" rel="self"/>
  
  <link href="https://www.antmoe.com/"/>
  <updated>2022-02-21T07:18:57.053Z</updated>
  <id>https://www.antmoe.com/</id>
  
  <author>
    <name>DreamyTZK</name>
    <email>dreamytzk@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识vue3之单文件组件script setup</title>
    <link href="https://www.antmoe.com/posts/a6b120db/"/>
    <id>https://www.antmoe.com/posts/a6b120db/</id>
    <published>2021-12-18T10:52:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录关于 vue3 script setup的尝试。</p></blockquote><p><strong><a href="/posts/a6b120db/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><p>本文参考于：</p><ul><li><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">单文件组件<code>&lt;script setup&gt;</code></a></li></ul><h2 id="默认自动暴露"><a class="markdownIt-Anchor" href="#默认自动暴露"></a> 默认自动暴露</h2><p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用<strong>组合式API</strong>的编译时语法糖。相比于普通的<code>&lt;script&gt;</code>语法，它具有更多优势：</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 Typescript 声明 props 和抛出事件。</li><li>更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。</li><li>更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前msg的值：&#123;&#123; msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前msg的值(ref的值会被自动解包)：&#123;&#123; msgRef &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 1. 顶层的绑定会暴露给模板</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">'这是一条msg'</span><span class="token keyword">const</span> msgRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的导入组件也可以直接使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'./MyComponent.vue'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态组件"><a class="markdownIt-Anchor" href="#动态组件"></a> 动态组件</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">'./Foo.vue'</span><span class="token keyword">import</span> Bar <span class="token keyword">from</span> <span class="token string">'./Bar.vue'</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Foo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someCondition ? Foo : Bar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义指令"><a class="markdownIt-Anchor" href="#自定义指令"></a> 自定义指令</h2><p>但这里有一个需要注意的限制：必须以 <code>vNameOfDirective</code> 的形式来命名本地自定义指令，以使得它们可以直接在模板中使用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> vMyDirective <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">beforeMount</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> value<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// value 即传入的参数值</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-my-directive</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="defineprops-defineemits-defineexpose"><a class="markdownIt-Anchor" href="#defineprops-defineemits-defineexpose"></a> defineProps、defineEmits、defineExpose</h2><p><code>defineProps</code>和<code>defineEmits</code>分别用于定义当前组件需要接收的参数和需要触发的emit。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JavaScript中上述定义即可，但在typescript中可以为其增加类型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token builtin">string</span>  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型声明时的默认值</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token builtin">string</span>  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineEmits</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'change'</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">'update'</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>defineExpose用于定义暴露出去的属性，此模式下默认是全暴露</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;const a &#x3D; 1const b &#x3D; ref(2)defineExpose(&#123;  a,  b&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>&lt;script setup&gt;</code> 的组件是<strong>默认关闭</strong>的，也即通过模板 ref 或者 <code>$parent</code> 链获取到的组件的公开实例，不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。</p><p>为了在 <code>&lt;script setup&gt;</code> 组件中明确要暴露出去的属性，使用 <code>defineExpose</code> 编译器宏</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;test&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;const a &#x3D; 1defineExpose(&#123;  a: 1&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在父组件中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;testAVue ref&#x3D;&quot;testRef&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import testAVue from &#39;.&#x2F;test-a.vue&#39;import &#123; onMounted, ref &#125; from &#39;vue&#39;const testRef &#x3D; ref(null)onMounted(() &#x3D;&gt; &#123;  console.log(testRef.value) &#x2F;&#x2F; Proxy &#123;a: 1, __v_skip: true&#125;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与普通的script使用"><a class="markdownIt-Anchor" href="#与普通的script使用"></a> 与普通的<code>&lt;script&gt;</code>使用</h2><p><code>&lt;script setup&gt;</code> 可以和普通的 <code>&lt;script&gt;</code> 一起使用。普通的 <code>&lt;script&gt;</code> 在有这些需要的情况下或许会被使用到：</p><ul><li>无法在 <code>&lt;script setup&gt;</code> 声明的选项，例如 <code>inheritAttrs</code> 或通过插件启用的自定义的选项。</li><li>声明命名导出。</li><li>运行副作用或者创建只需要执行一次的对象。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;    &#x2F;&#x2F; 普通 &lt;script&gt;, 在模块范围下执行(只执行一次)    runSideEffectOnce()    &#x2F;&#x2F; 声明额外的选项    export default &#123;        inheritAttrs: false,        customOptions: &#123;&#125;    &#125;&lt;&#x2F;script&gt;&lt;script setup&gt;    &#x2F;&#x2F; 在 setup() 作用域中执行 (对每个实例皆如此)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于此分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于此分类&quot;&gt;&lt;/a&gt; 关于此分类&lt;/h2&gt;
&lt;p&gt;关于&lt;a href=&quot;/categories/Vue/%E5%88%9D%E8%AF%86Vue3/&quot;&gt;初识 vue3&lt;/a&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="初识Vue3" scheme="https://www.antmoe.com/categories/Vue/%E5%88%9D%E8%AF%86Vue3/"/>
    
    
    <category term="单文件组件" scheme="https://www.antmoe.com/tags/%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/"/>
    
    <category term="script setup" scheme="https://www.antmoe.com/tags/script-setup/"/>
    
  </entry>
  
  <entry>
    <title>初识vue3之响应式数据</title>
    <link href="https://www.antmoe.com/posts/b3e1c29f/"/>
    <id>https://www.antmoe.com/posts/b3e1c29f/</id>
    <published>2021-12-09T13:14:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="//at.alicdn.com/t/font_2970550_p76lkpuldlo.css"><h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录关于 vue3 响应式数据的尝试。</p></blockquote><p><strong><a href="/posts/b3e1c29f/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="refs"><a class="markdownIt-Anchor" href="#refs"></a> refs</h2><h3 id="类型声明"><a class="markdownIt-Anchor" href="#类型声明"></a> 类型声明</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明类型 字符串</span>    <span class="token keyword">const</span> stringVal <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token comment">// 声明类型 数字</span>    <span class="token keyword">const</span> numberVal <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 声明类型 泛型</span>    <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>State <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>initial<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span>State<span class="token operator">></span> <span class="token comment">// state.value -> State extends string</span>      <span class="token keyword">return</span> state    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> stringVal<span class="token punctuation">,</span> numberVal<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unref"><a class="markdownIt-Anchor" href="#unref"></a> unref</h3><p>如果参数是一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>，则返回内部值，否则返回参数本身。这是 <code>val = isRef(val) ? val.value : val</code> 的语法糖函数。</p><h3 id="toref-torefs"><a class="markdownIt-Anchor" href="#toref-torefs"></a> toRef、toRefs</h3><table><thead><tr><th style="text-align:center">API</th><th style="text-align:center">作用简述</th><th style="text-align:center">使用简述</th></tr></thead><tbody><tr><td style="text-align:center"><code>toRef</code></td><td style="text-align:center">用于创建源响应式对象上某个属性的响应式变量<br />此变量可以被传递并保持响应式链接</td><td style="text-align:center">用于将响应式对象某个属性传递给子组件并且不丢失响应式链接</td></tr><tr><td style="text-align:center"><code>toRefs</code></td><td style="text-align:center">将响应式对象转换为普通对象（值是响应式的）</td><td style="text-align:center">用于复合函数返回响应式对象，父组件解构/展开</td></tr></tbody></table><h4 id="toref"><a class="markdownIt-Anchor" href="#toref"></a> toRef</h4><blockquote><p>可以用来为源响应式对象上的某个 property 新创建一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// toRef</span><span class="token keyword">const</span> refReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 创建ref引用</span><span class="token keyword">const</span> refA <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>refReactive<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token function">useTest</span><span class="token punctuation">(</span>refA<span class="token punctuation">)</span> <span class="token comment">// useTest中修改传入的参数</span><span class="token comment">// 会导致refReactive.a的值也会响应式修改为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>useTest</code>中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> a <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，当需要向复合函数传递一个响应式对象的值时可以使用<code>toRef</code>将一个响应式对象某个值转为<code>ref</code>引用。</p><h4 id="torefs"><a class="markdownIt-Anchor" href="#torefs"></a> toRefs</h4><blockquote><p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。</p></blockquote><p><code>useTest</code>中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useTest</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">,</span> b<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">100</span>  b<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">200</span>  <span class="token keyword">const</span> testReactive <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span><span class="token punctuation">,</span>    website<span class="token operator">:</span> <span class="token string">'https://baidu.com'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 暴露的响应式对象使用toRefs包装</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> testReactive<span class="token operator">:</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>testReactive<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父组件中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> testReactive <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useTest</span><span class="token punctuation">(</span>refA<span class="token punctuation">,</span> numberVal<span class="token punctuation">)</span> <span class="token comment">// useTest中修改传入的参数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  testReactive<span class="token punctuation">.</span>name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'父组件修改'</span>  <span class="token comment">// testReactive.name会被响应式修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="customref"><a class="markdownIt-Anchor" href="#customref"></a> customRef</h3><p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p><p>使用官网的一个小 Demo</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timeout  <span class="token keyword">return</span> <span class="token function">customRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 追踪</span>        <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          value <span class="token operator">=</span> newValue          <span class="token comment">// 触发视图更新</span>          <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>虽然看到网上有各种各样在此函数中发送 Ajax 请求，但我个人认为，发送 Ajax 获取数据使用 Hooks 更合适。</p></blockquote><p>类型声明</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">customRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>factory<span class="token operator">:</span> CustomRefFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">CustomRefFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token function-variable function">track</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">trigger</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="computed-与-watch"><a class="markdownIt-Anchor" href="#computed-与-watch"></a> Computed 与 Watch</h2><h3 id="computed"><a class="markdownIt-Anchor" href="#computed"></a> computed</h3><p>接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">ref</a> 对象。或者，接受一个具有 <code>get</code> 和 <code>set</code> 函数的对象，用来创建可写的 ref 对象。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回val加10的结果</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> newVal1 <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取值</span>    <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置值</span>    val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3.2 中该函数在<strong>开发模式</strong>下可传入第二个参数用于调试。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> plusOne <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">onTrack</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 作为依赖被追踪时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onTrigger</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 count.value 被修改时触发</span>    <span class="token keyword">debugger</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 访问 plusOne，应该触发 onTrack</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>plusOne<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 修改 count.value，应该触发 onTrigger</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型声明</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 只读的</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span>  debuggerOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span>Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>>></span><span class="token comment">// 可写的</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  debuggerOptions<span class="token operator">?</span><span class="token operator">:</span> DebuggerOptions<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token keyword">interface</span> <span class="token class-name">DebuggerOptions</span> <span class="token punctuation">&#123;</span>  onTrack<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> DebuggerEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>  onTrigger<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> DebuggerEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">DebuggerEvent</span> <span class="token punctuation">&#123;</span>  effect<span class="token operator">:</span> ReactiveEffect  target<span class="token operator">:</span> <span class="token builtin">any</span>  <span class="token keyword">type</span><span class="token operator">:</span> OperationTypes  key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch"><a class="markdownIt-Anchor" href="#watch"></a> watch</h3><p><code>watch</code> API 与选项式 API <a href="https://v3.cn.vuejs.org/api/instance-methods.html#watch">this.$watch</a> (以及相应的 <a href="https://v3.cn.vuejs.org/api/options-data.html#watch">watch</a> 选项) 完全等效。<code>watch</code> 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。</p><div class="tabs" id="watch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#watch-1">单一源</button></li><li class="tab"><button type="button" data-href="#watch-2">多个源</button></li><li class="tab"><button type="button" data-href="#watch-3">侦听响应式对象</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="watch-1"><p>侦听器数据源可以是一个具有返回值的<code>getter</code>函数，也可以直接是一个<code>ref</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 侦听一个 getter</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接侦听一个 ref</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> prevCount<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-2"><p>侦听器还可以使用数组以同时侦听多个源</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fooRef<span class="token punctuation">,</span> barRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>prevFoo<span class="token punctuation">,</span> prevBar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>如果在同一个函数里同时改变这些被侦听的来源，侦听器仍只会执行一次</strong></p></blockquote><p>如果需要监听多个源时每一次更新都响应式变化，那么建议使用<code>nextTick</code>等等监听器再一次步改变之前运行。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">changeValues</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  firstName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'John'</span> <span class="token comment">// 打印 ["John", ""] ["", ""]</span>  <span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  lastName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Smith'</span> <span class="token comment">// 打印 ["John", "Smith"] ["John", ""]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-3"><ol><li><p>监听响应式对象或数组变化前与变化后的值，则需要监听由值构成的副本。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>val<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> <span class="token string">'numbers'</span><span class="token punctuation">)</span>    <span class="token comment">// logs: [1,2,3,4,5] [1,2,3,4]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>尝试检查深度嵌套对象或数组中(<strong>非响应式对象</strong>)的 property 变化时，仍然需要 <code>deep</code> 选项设置为 true。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> member<span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> member<span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    deep<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>member<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'new小康'</span> <span class="token comment">// deep new小康 new小康</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>侦听一个响应式对象或数组将始终返回该对象的当前值和上一个状态值的引用。为了完全侦听深度嵌套的对象和数组，可能需要对值进行深拷贝。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token keyword">const</span> member <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'小康'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not deep'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">,</span> val<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>member<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'new小康'</span> <span class="token comment">// deep new小康 小康</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="watcheffect"><a class="markdownIt-Anchor" href="#watcheffect"></a> watchEffect</h3><p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。(根据响应式状态<em>自动应用</em>和<em>重新应用</em>副作用)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// -> logs 0</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">.</span>value<span class="token operator">++</span>  <span class="token comment">// -> logs 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="provide-inject"><a class="markdownIt-Anchor" href="#provide-inject"></a> Provide / Inject</h2><p>当子组件层级过深时仍需要外层组件传递数据，那么可以使用<code>Provide / Inject</code>，但默认情况下，此 API 并不是响应式的，如果需要响应式则需要在<code>provide</code>时使用<code>ref</code>或者<code>reactive</code>进行包装。</p><p>父组件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> provide <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> userName <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">'小康'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  userName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'XiaoKang'</span>  <span class="token comment">// 2秒后视图更新为 XiaoKang</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment">// 向子组件提供一个名为 name 值为 userName 数据</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject<span class="token punctuation">,</span> Ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 获取父组件提供的名为 name 的值并赋值给userName变量</span><span class="token keyword">const</span> userName <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改值"><a class="markdownIt-Anchor" href="#修改值"></a> 修改值</h3><p>当使用响应式 provide / inject 值时，<strong>建议尽可能将对响应式 property 的所有修改限制在<em>定义 provide 的组件</em>内部</strong>。</p><p>例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  userName<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'change Name 小康 '</span> <span class="token operator">+</span> str<span class="token punctuation">&#125;</span><span class="token comment">// 向子组件提供修改userName的方法</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">,</span> changeName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 获取父组件提供的名为 name 的值并赋值给userName变量</span><span class="token keyword">const</span> changeUserName <span class="token operator">=</span> inject<span class="token operator">&lt;</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeUserNameHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  changeUserName <span class="token operator">&amp;&amp;</span> <span class="token function">changeUserName</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件当触发<code>changeUserNameHandler</code>函数时即可调用父组件提供的修改方法将<code>userName</code>的值进行修改。</p><h3 id="只读"><a class="markdownIt-Anchor" href="#只读"></a> 只读</h3><p>当需要确保通过<code>provide</code>传递的数据不会被<code>inject</code>的组件更改，可以使用<code>readonly</code>进行修饰。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'testChange'</span><span class="token punctuation">,</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>testChange<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果子组件修改值则不会修改成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_2970550_p76lkpuldlo.css&quot;&gt;
&lt;h2 id=&quot;关于此分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于此分类&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="初识Vue3" scheme="https://www.antmoe.com/categories/Vue/%E5%88%9D%E8%AF%86Vue3/"/>
    
    
    <category term="Vue3" scheme="https://www.antmoe.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>避坑指北：vue使用history路由</title>
    <link href="https://www.antmoe.com/posts/99201b62/"/>
    <id>https://www.antmoe.com/posts/99201b62/</id>
    <published>2021-12-05T01:49:00.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h2><p>在部署vue项目时，路由模式默认使用哈希(hash)模式，但是由于某些原因，要求使用history模式。但是对于现在的部署环境则遇到了一个问题。首先是目录：</p><pre class="line-numbers language-none"><code class="language-none">site ---- 项目根目录 ├── siteA ---- 项目A │   └── index.html └── siteB ---- 项目B     └── index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即项目放在了同一个根目录下，那么此时我们就需要调整vue的一些配置。具体如下</p><h2 id="vue项目配置"><a class="markdownIt-Anchor" href="#vue项目配置"></a> Vue项目配置</h2><h2 id="路由设置"><a class="markdownIt-Anchor" href="#路由设置"></a> 路由设置</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/siteA'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'siteARoot'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/siteA/index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            path<span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">'Index'</span><span class="token punctuation">,</span>            meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                title<span class="token operator">:</span> <span class="token string">'siteA'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/siteA/index'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即路由需要包含此项目部署时所需要存放的目录名。</p><h3 id="打包配置"><a class="markdownIt-Anchor" href="#打包配置"></a> 打包配置</h3><p>打包配置时由于使用了history模式，那么<code>publicPath</code>就需要指定绝对路径。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> /siteA/<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里设置的绝对路径即项目配置时的目录名，可通过环境变量进行动态修改。</p><h2 id="nginx配置"><a class="markdownIt-Anchor" href="#nginx配置"></a> Nginx配置</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>        <span class="token number">10085</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>    <span class="token keyword">root</span>   <span class="token string">"D:/code/test/site/"</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>siteA <span class="token punctuation">&#123;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>siteA<span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>siteB <span class="token punctuation">&#123;</span>        <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span>siteB<span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h2&gt;
&lt;p&gt;在部署vue项目时，路由模式默认使用哈希(hash)模式，但是由于某些原因，要求使用history模式。但是对于现在的部署环境则遇到了一个问题。</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="Vue避坑指北" scheme="https://www.antmoe.com/categories/Vue/Vue%E9%81%BF%E5%9D%91%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="Vue" scheme="https://www.antmoe.com/tags/Vue/"/>
    
    <category term="history路由" scheme="https://www.antmoe.com/tags/history%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>初识vue3之better-scroll组件封装</title>
    <link href="https://www.antmoe.com/posts/909b483c/"/>
    <id>https://www.antmoe.com/posts/909b483c/</id>
    <published>2021-11-27T13:17:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录封装基于<a href="https://better-scroll.github.io/docs/zh-CN/">BetterScroll 2.0</a>插件封装的 scroll-view 组件。适用于移动端的弹性滚动及下拉刷新、上拉加载等场景。</p><div class="checkbox green checked">  <input type="checkbox" checked />  <p>弹性滚动</p></div><div class="checkbox green checked">  <input type="checkbox" checked/>  <p>下拉加载</p></div><div class="checkbox green checked">  <input type="checkbox" checked/>  <p>上拉刷新</p></div><div class="checkbox green ">  <input type="checkbox" checked />  <p>滚动前后及滚动中事件</p></div><div class="checkbox yellow">  <input type="checkbox" />  <p>滚动条（待添加）</p></div></blockquote><p><strong><a href="/posts/909b483c/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="简单的实现过程"><a class="markdownIt-Anchor" href="#简单的实现过程"></a> 简单的实现过程</h2><p>实现之前需要先明确一下需求：</p><ol><li>弹性滚动</li><li>下拉刷新、上拉加载</li><li>自定义传入内容</li><li>事件派发</li></ol><h3 id="弹性滚动"><a class="markdownIt-Anchor" href="#弹性滚动"></a> 弹性滚动</h3><p>实现弹性滚动只需要按照官方示例初始化即可实现。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;wrapper&quot; ref&#x3D;&quot;wrapper&quot;&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;      &lt;div v-for&#x3D;&quot;i in 100&quot;&gt;&#123;&#123; i &#125;&#125;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import BScroll from &#39;@better-scroll&#x2F;core&#39;import &#123; onMounted &#125; from &#39;vue&#39;let bscroll: BScrollconst wrapper &#x3D; ref(null)onMounted(() &#x3D;&gt; &#123;  bscroll &#x3D; new BScroll(wrapper.value, &#123;    mouseWheel: true  &#125;)&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在 mounted 阶段进行初始化创建对象即可。</p><h3 id="下拉刷新-上拉加载"><a class="markdownIt-Anchor" href="#下拉刷新-上拉加载"></a> 下拉刷新、上拉加载</h3><p>由于我安装的是<code>@better-scroll/core</code>，并没有安装‘全量包’ ，因此实现此功能同样需要安装其他两个插件：<code>@better-scroll/pull-up</code>、<code>@better-scroll/pull-down</code></p><p>安装后在初始化时开启选项即可。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">import</span> Pullup <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-up'</span><span class="token keyword">import</span> Pulldown <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-down'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pullup<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pulldown<span class="token punctuation">)</span>bscroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  mouseWheel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullDownRefresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullUpLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于其触发事件的监听需要用实例对象去监听：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">import</span> Pullup <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-up'</span><span class="token keyword">import</span> Pulldown <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-down'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pullup<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pulldown<span class="token punctuation">)</span>bscroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.wrapper'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  mouseWheel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullDownRefresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  pullUpLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了上拉'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'触发了下拉'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义传入内容"><a class="markdownIt-Anchor" href="#自定义传入内容"></a> 自定义传入内容</h3><p>自定义传入内容这里，由于我并不想传入一个数据列表，然后去渲染元素。因此通过<code>watch</code>监听 props 传入的数据这个方法就不好用了；监听<code>slots</code>里的变化通过一番尝试，最终也是失败，因此最终选择了使用官方提供的插件：<code>@better-scroll/observe-dom</code>、<code>@better-scroll/observe-image</code>进行自动更新实例对象。安装完成后只需要在初始化前<code>use</code>此插件即可。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ObserveDOM<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ObserveImage<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件派发"><a class="markdownIt-Anchor" href="#事件派发"></a> 事件派发</h3><p>需要派发的事件大致为：滚动事件和上拉下拉事件</p><ol><li><p>滚动事件</p><p>此类事件只需要正常 emit 即可。</p></li><li><p>上拉下拉事件</p><p>上拉下拉刷新需要调用对应的结束事件才可以，因此将其封装为组件时就会遇到一个问题即需要等传入函数执行完毕后在调用结束事件。</p></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineProps<span class="token punctuation">,</span> PropType<span class="token punctuation">,</span> defineEmits <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ckick'</span><span class="token punctuation">,</span> <span class="token string">'beforeScroll'</span><span class="token punctuation">,</span> <span class="token string">'afterScroll'</span><span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ckick'</span><span class="token punctuation">,</span> <span class="token string">'beforeScroll'</span><span class="token punctuation">,</span> <span class="token string">'afterScroll'</span><span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 是否派发滚动事件   */</span>  listenScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发滚动到底部的事件，用于上拉加载   */</span>  pullup<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发顶部下拉的事件，用于下拉刷新   */</span>  pulldown<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发列表滚动开始的事件   */</span>  beforeScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">/**   * 是否派发列表滚动开始的事件   */</span>  afterScroll<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 如果开启了滚动前事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>beforeScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'beforeScrollStart'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'beforeScroll'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 如果开启了滚动(滚动中)事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>listenScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>position<span class="token operator">:</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 如果开启了滚动结束事件派发 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>beforeScroll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'scrollEnd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'afterScroll'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>pullup <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">.</span><span class="token function">pullup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        bscroll<span class="token punctuation">.</span><span class="token function">finishPullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 传入非 Promise 函数</span>      bscroll<span class="token punctuation">.</span><span class="token function">finishPullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>pulldown <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  bscroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingDown'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      props<span class="token punctuation">.</span><span class="token function">pulldown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        bscroll<span class="token punctuation">.</span><span class="token function">finishPullDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 传入非 Promise 函数</span>      bscroll<span class="token punctuation">.</span><span class="token function">finishPullDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div :class&#x3D;&quot;&#123; wrapper: true, x: props.scrollX &#125;&quot; ref&#x3D;&quot;wrapper&quot;&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;      &lt;slot&gt;&lt;&#x2F;slot&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123; onMounted, defineProps, PropType, defineEmits &#125; from &#39;vue&#39;import BScroll from &#39;@better-scroll&#x2F;core&#39;import ObserveDOM from &#39;@better-scroll&#x2F;observe-dom&#39;import ObserveImage from &#39;@better-scroll&#x2F;observe-image&#39;import Pullup from &#39;@better-scroll&#x2F;pull-up&#39;import Pulldown from &#39;@better-scroll&#x2F;pull-down&#39;let bscroll: BScrollconst wrapper &#x3D; ref(null)BScroll.use(ObserveDOM)BScroll.use(ObserveImage)BScroll.use(Pullup)BScroll.use(Pulldown)const emit &#x3D; defineEmits([&#39;ckick&#39;, &#39;beforeScroll&#39;, &#39;afterScroll&#39;, &#39;scroll&#39;])const props &#x3D; defineProps(&#123;  &#x2F;**   * 1 滚动的时候会派发scroll事件，会截流。   * 2 滚动的时候实时派发scroll事件，不会截流。   * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件   *&#x2F;  probeType: &#123;    type: Number as PropType&lt;1 | 2 | 3&gt;,    required: false,    default: 1  &#125;,  &#x2F;**   * 是否开启横向滚动，默认纵向滚动。   * 开启横向滚动需要将传入元素设置为横向例如：display:inline-block   *&#x2F;  scrollX: &#123;    type: Boolean,    required: false,    default: false  &#125;,  &#x2F;**   * 点击列表是否派发click事件   *&#x2F;  click: &#123;    type: Boolean,    default: true  &#125;,  &#x2F;**   * 是否派发滚动事件   *&#x2F;  listenScroll: &#123;    type: Boolean,    default: false  &#125;,  &#x2F;**   * 是否派发滚动到底部的事件，用于上拉加载   *&#x2F;  pullup: &#123;    type: Function,    default: null  &#125;,  &#x2F;**   * 是否派发顶部下拉的事件，用于下拉刷新   *&#x2F;  pulldown: &#123;    type: Function,    default: null  &#125;,  &#x2F;**   * 是否派发列表滚动开始的事件   *&#x2F;  beforeScroll: &#123;    type: Boolean,    default: false  &#125;,  &#x2F;**   * 是否派发列表滚动开始的事件   *&#x2F;  afterScroll: &#123;    type: Boolean,    default: false  &#125;&#125;)onMounted(() &#x3D;&gt; &#123;  bscroll &#x3D; new BScroll(wrapper.value, &#123;    scrollX: props.scrollX,    probeType: props.probeType,    click: props.click,    observeDOM: true,    observeImage: true,    mouseWheel: true,    pullDownRefresh: true,    pullUpLoad: true  &#125;)  &#x2F;**   * 如果开启了滚动前事件派发   *&#x2F;  if (props.beforeScroll) &#123;    bscroll.on(&#39;beforeScrollStart&#39;, () &#x3D;&gt; &#123;      emit(&#39;beforeScroll&#39;)    &#125;)  &#125;  &#x2F;**   * 如果开启了滚动(滚动中)事件派发   *&#x2F;  if (props.listenScroll) &#123;    bscroll.on(&#39;scroll&#39;, (position: &#123; x: number; y: number &#125;) &#x3D;&gt; &#123;      emit(&#39;scroll&#39;, position)    &#125;)  &#125;  &#x2F;**   * 如果开启了滚动结束事件派发   *&#x2F;  if (props.beforeScroll) &#123;    bscroll.on(&#39;scrollEnd&#39;, () &#x3D;&gt; &#123;      emit(&#39;afterScroll&#39;)    &#125;)  &#125;  if (props.pullup !&#x3D;&#x3D; null) &#123;    bscroll.on(&#39;pullingUp&#39;, () &#x3D;&gt; &#123;      try &#123;        props.pullup().then(() &#x3D;&gt; &#123;          bscroll.finishPullUp()        &#125;)      &#125; catch (e) &#123;        &#x2F;&#x2F; 传入非 Promise 函数        bscroll.finishPullUp()      &#125;    &#125;)  &#125;  if (props.pulldown !&#x3D;&#x3D; null) &#123;    bscroll.on(&#39;pullingDown&#39;, () &#x3D;&gt; &#123;      try &#123;        props.pulldown().then(() &#x3D;&gt; &#123;          bscroll.finishPullDown()        &#125;)      &#125; catch (e) &#123;        &#x2F;&#x2F; 传入非 Promise 函数        bscroll.finishPullDown()      &#125;    &#125;)  &#125;&#125;)&lt;&#x2F;script&gt;&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;@import &#39;.&#x2F;index.scss&#39;;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token selector">.wrapper </span><span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token selector">.content </span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 开启横向滚动</span>  <span class="token selector"><span class="token parent important">&amp;</span>.x </span><span class="token punctuation">&#123;</span>    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>    <span class="token selector">.content </span><span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部使用时需要传入样式指定宽高</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 300px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i in count<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>当前第&#123;&#123; i &#125;&#125;个元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于此分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于此分类&quot;&gt;&lt;/a&gt; 关于此分类&lt;/h2&gt;
&lt;p&gt;关于&lt;a href=&quot;/categories/Vue/%E5%88%9D%E8%AF%86Vue3/&quot;&gt;初识 vue3&lt;/a&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="初识Vue3" scheme="https://www.antmoe.com/categories/Vue/%E5%88%9D%E8%AF%86Vue3/"/>
    
    
    <category term="Vue3" scheme="https://www.antmoe.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>初识vue3之基础语法记录</title>
    <link href="https://www.antmoe.com/posts/296e7875/"/>
    <id>https://www.antmoe.com/posts/296e7875/</id>
    <published>2021-11-27T13:01:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="//at.alicdn.com/t/font_2970550_p76lkpuldlo.css"><h2 id="关于此分类"><a class="markdownIt-Anchor" href="#关于此分类"></a> 关于此分类</h2><p>关于<a href="/categories/Vue/%E5%88%9D%E8%AF%86Vue3/">初识 vue3</a>分类主要是记录一些通过 vue3 进行的实践与学习记录。</p><blockquote><p>此文主要记录一些在 vue3 中的一些语法改变（只记录<code>composition api</code>语法），当然使用<a href="https://www.npmjs.com/package/@vue/composition-api">@vue/composition-api</a>插件也可以令<code>vue2</code>适用本文所记录的语法。</p></blockquote><p><strong><a href="/posts/296e7875/">本文</a>会随着<a href="https://xiaokang.me/">作者</a>日常使用进行补充及内容修正</strong></p><h2 id="数据相关data"><a class="markdownIt-Anchor" href="#数据相关data"></a> 数据相关(data)</h2><div class="tabs" id="data1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#data1-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#data1-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#data1-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="data1-1"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- vue模式下展示ref数据不需要加.value --&gt;    &lt;div&gt;当前title：&#123;&#123; title &#125;&#125;&lt;&#x2F;div&gt;    &lt;input v-model&#x3D;&quot;title&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.name &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.password &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;      &lt;input v-model&#x3D;&quot;form.name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;      &lt;input v-model&#x3D;&quot;form.password&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#39;vue&#39;export default &#123;  setup() &#123;    &#x2F;&#x2F; 定义响应式普通数据    const title &#x3D; ref&lt;string&gt;(&#39;小康&#39;)    &#x2F;&#x2F; 定义响应式引用数据    const form &#x3D; reactive(&#123;      name: &#39;小康&#39;,      password: &#39;12334&#39;    &#125;)    &#x2F;&#x2F; 需要将变量或方法return视图中才可以使用    return &#123; title, form &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data1-2"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;!-- vue模式下展示ref数据不需要加.value --&gt;    &lt;div&gt;当前title：&#123;&#123; title &#125;&#125;&lt;&#x2F;div&gt;    &lt;input v-model&#x3D;&quot;title&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.name &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;当前用户名：&#123;&#123; form.password &#125;&#125;&lt;&#x2F;div&gt;    &lt;div&gt;      &lt;input v-model&#x3D;&quot;form.name&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;      &lt;input v-model&#x3D;&quot;form.password&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot; setup&gt;&#x2F;&#x2F; script setup 模式下视图可以直接使用定义的变量import &#123; ref, reactive &#125; from &#39;vue&#39;&#x2F;&#x2F; 定义响应式普通数据const title &#x3D; ref&lt;string&gt;(&#39;小康&#39;)&#x2F;&#x2F; 定义响应式引用数据const form &#x3D; reactive(&#123;  name: &#39;小康&#39;,  password: &#39;12334&#39;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data1-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义响应式普通数据</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'小康'</span><span class="token punctuation">)</span>    <span class="token comment">// 定义响应式引用数据</span>    <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'小康'</span><span class="token punctuation">,</span>      password<span class="token operator">:</span> <span class="token string">'12334'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前title：</span><span class="token punctuation">&#123;</span>title<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>title<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前用户名：</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前用户名：</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>form<span class="token punctuation">.</span>password<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="自定义-v-model"><a class="markdownIt-Anchor" href="#自定义-v-model"></a> 自定义 v-model</h3><p>父组件调用子组件并通过v-model绑定一个值，在子组件中直接触发事件进行修改。</p><blockquote><p>emit使用参考下文</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span> v-model-setup 当前title：&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-model-setup</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'父组件的标题'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="tabs" id="vmodel"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#vmodel-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#vmodel-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#vmodel-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="vmodel-1"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改传入title值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeTitle <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vmodel-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改传入title值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// script setup模式下需要使用defineEmits进行定义emit</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'script setup子组件修改的值'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="vmodel-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'update:title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:title'</span><span class="token punctuation">,</span> <span class="token string">'tsx子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>changeTitle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改父组件的的值</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="接收父组件的值props"><a class="markdownIt-Anchor" href="#接收父组件的值props"></a> 接收父组件的值(props)</h3><div class="tabs" id="data-props"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#data-props-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#data-props-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#data-props-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="data-props-1"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// setup 第一个参数可以取到props</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> props <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data-props-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// script setup模式下需要使用defineProps进行定义emit</span><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="data-props-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> PropType <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">type</span><span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>      required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'没有传入title'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// setup 第一个参数可以取到props</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">子组件接收的title的值为：</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>如果需要将<code>props</code>中的值解构，则需要使用<code>toRefs</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="方法相关methods"><a class="markdownIt-Anchor" href="#方法相关methods"></a> 方法相关(methods)</h2><p>事件相关无太大变化，<code>@eventName=&quot;eventFun&quot;</code>即可。</p><ul><li><a href="https://v3.cn.vuejs.org/guide/events.html">事件处理</a></li></ul><h3 id="自定义监听事件emit"><a class="markdownIt-Anchor" href="#自定义监听事件emit"></a> 自定义监听事件(emit)</h3><div class="tabs" id="emit"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#emit-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#emit-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#emit-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="emit-1"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 为了便于维护，定义好触发的emits</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeTitle <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="emit-2"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// script setup模式下需要使用defineEmits进行定义emit</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'script setup子组件修改的值'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="emit-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 为了便于维护，定义好触发的emits</span>  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeTitle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'tsx子组件修改的值'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>changeTitle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改父组件的的值</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="计算属性computed和监听器watch"><a class="markdownIt-Anchor" href="#计算属性computed和监听器watch"></a> 计算属性(computed)和监听器(watch)</h2><p>更过细节参考</p><ul><li><a href="https://v3.cn.vuejs.org/guide/computed.html">基础：响应式计算和侦听器</a></li><li><a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E8%AE%A1%E7%AE%97%E5%80%BC">深入：响应式计算和侦听器</a></li></ul><h3 id="计算属性"><a class="markdownIt-Anchor" href="#计算属性"></a> 计算属性</h3><div class="tabs" id="computed"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#computed-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#computed-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#computed-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="computed-1"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前value原值&#123;&#123; val &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前计算属性newVal的值&#123;&#123; newVal &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>val+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 返回val加10的结果</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> val<span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="computed-2"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前value原值&#123;&#123; val &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>当前计算属性newVal的值&#123;&#123; newVal &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>val+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回val加10的结果</span>  <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="computed-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newVal <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 返回val加10的结果</span>      <span class="token keyword">return</span> val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前value原值</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前计算属性newVal的值</span><span class="token punctuation">&#123;</span>newVal<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">val+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="监听器watch"><a class="markdownIt-Anchor" href="#监听器watch"></a> 监听器(watch)</h3><h4 id="基础用法监听单个值"><a class="markdownIt-Anchor" href="#基础用法监听单个值"></a> 基础用法(监听单个值)</h4><div class="tabs" id="watch"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#watch-1"><i class="i296e7875 icon-js"></i>setup</button></li><li class="tab"><button type="button" data-href="#watch-2"><i class="i296e7875 icon-vue"></i>script setup</button></li><li class="tab"><button type="button" data-href="#watch-3"><i class="i296e7875 icon-jsx"></i>tsx</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="watch-1"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> val<span class="token punctuation">,</span> change <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-2"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="watch-3"><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch<span class="token punctuation">,</span> defineComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// setup参数参考 https://v3.cn.vuejs.org/guide/composition-api-setup.html#%E5%8F%82%E6%95%B0</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">'发生了变化'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">change</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      val<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">当前value原值</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>change<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">val+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="获取组件引用"><a class="markdownIt-Anchor" href="#获取组件引用"></a> 获取组件引用</h2><p>在vue2中获取引用通过<code>this.$ref</code>，然后vue3中并没有<code>this</code>，因此获取ref时的方式也发生了变化。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;//at.alicdn.com/t/font_2970550_p76lkpuldlo.css&quot;&gt;
&lt;h2 id=&quot;关于此分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于此分类&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="初识Vue3" scheme="https://www.antmoe.com/categories/Vue/%E5%88%9D%E8%AF%86Vue3/"/>
    
    
    <category term="Vue3" scheme="https://www.antmoe.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>VUE单文件组件开发</title>
    <link href="https://www.antmoe.com/posts/380b1077/"/>
    <id>https://www.antmoe.com/posts/380b1077/</id>
    <published>2021-07-14T07:13:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>首先需要阐明的是本文单文件开发最终实现的结果：**在 HTML 中通过引入打包后的 js 文件，然后使用组件标签即可渲染。**例如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xk-head</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2213<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xk-head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        el<span class="token operator">:</span> <span class="token string">'#page'</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          msg<span class="token operator">:</span> <span class="token string">'Hello Vue!123'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>为什么没有把 vue 打包到<code>main.js</code>中?</p><p>考虑到一个页面可能会用到多个组件，而多个组件可能并不是使用的一个 js 生成，因此将 VUE 使用 CDN 方式引入。为了避免引入的繁琐，样式文件也没有进行拆分。</p></blockquote><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><blockquote><p>此部分只包含核心部分，代码可能不可以直接使用。</p></blockquote><p>既然想要把<code>vue</code>单文件打包成 js 文件，那么核心就是<code>webpack</code>和<code>vue-loader</code>。</p><p>截至到目前（2021-07-04）为止，vue-loader 最新版本为 16+，但是 16 版本是针对 VUE3 的，而我所要使用的则是 VUE2 版本，因此并不能使用最新版本。因此需要安装的版本依赖如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.14.6"</span><span class="token punctuation">,</span>  <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"8.2.2"</span><span class="token punctuation">,</span>  <span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.7.0"</span><span class="token punctuation">,</span>  <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"15.9.7"</span><span class="token punctuation">,</span>  <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^4.1.3"</span><span class="token punctuation">,</span>  <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"5.42.0"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.7.2"</span><span class="token punctuation">,</span>  <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.2"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来配置 webpack（只列出了核心配置）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> VueLoaderPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'vue-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 它会应用到普通的 `.js` 文件</span>      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;script>` 块</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 它会应用到普通的 `.css` 文件</span>      <span class="token comment">// 以及 `.vue` 文件中的 `&lt;style>` 块</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 请确保引入这个插件来施展魔法</span>    <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vue-loader15 版本后需要引入一个<code>VueLoaderPlugin</code>的 plugin 才可以使用。并且在 15 版本后 vue 中对应的 js 和 css 会分别对应其后缀的文件进行解析。</p></blockquote><p>不出意外此时即可编译出一个 js，将其引入到 HTML 中即可实现。</p><h2 id="优化配置"><a class="markdownIt-Anchor" href="#优化配置"></a> 优化配置</h2><p>以<code>src</code>为开发目录进行配置</p><h3 id="webpack-配置文件"><a class="markdownIt-Anchor" href="#webpack-配置文件"></a> webpack 配置文件</h3><ol><li><p>入口文件</p><p>因为我们开发的是单文件组件，因此入口文件可能不止一个（不同类型或用途的组件），因此我们的入口最好是动态获取。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @description: 获取入口 */</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> parse<span class="token punctuation">,</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment">/** * 传入路径获取入口文件配置 * @date 2021-05-18 * @param &#123;String&#125; path 入口js文件夹 * @returns &#123;Object&#125; 入口配置对象 */</span><span class="token keyword">const</span> <span class="token function-variable function">getEntry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> ext<span class="token punctuation">,</span> base <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> path<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 如果ext存在,则认为是入口js文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      entry<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> base<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> entry<span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> getEntry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>向外暴露一个函数，参数传入一个路径，该函数会返回入口文件的对象。</p></blockquote></li><li><p>loader</p><p>由于 loader 包含的类型比较多（sass、scss、stylus 等）因此我会讲他单独提取出来。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./stylus'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./less.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./sass'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./scss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./javascript'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./image'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./font'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./font'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./vue'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过一个入口文件，向外暴露一个 loader 的列表。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// stylus示例</span><span class="token keyword">const</span> stylus <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl(us)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  use<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">'vue-style-loader'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      loader<span class="token operator">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>      options<span class="token operator">:</span> <span class="token punctuation">&#123;</span> importLoaders<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    <span class="token string">'stylus-loader'</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> stylus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他 loader 也是如此配置</p></blockquote></li><li><p>plugins</p><p>plugins 由于只用到了两个，且不需要过多配置，因此个人认为无需提取。</p></li><li><p>其他</p><p>例如<code>mode</code>和<code>devtool</code>则是根据环境变量和个人需求进行配置。</p></li></ol><h3 id="组件开发"><a class="markdownIt-Anchor" href="#组件开发"></a> 组件开发</h3><ol><li><p>入口文件</p><p>这里入口文件暂定为<code>/src/components</code>目录下的每一个 js 文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入头部组件</span><span class="token keyword">import</span> head <span class="token keyword">from</span> <span class="token string">'../components/head/head.vue'</span><span class="token comment">/** * 全局filter */</span><span class="token keyword">import</span> filterInit <span class="token keyword">from</span> <span class="token string">'../util/filter'</span><span class="token function">filterInit</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>name<span class="token punctuation">,</span> head<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>devtools <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span>window<span class="token punctuation">.</span>Vue <span class="token operator">=</span> Vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><ol><li><p><code>vue-loader</code>版本问题</p><p><code>vue-loader</code>版本 16 只支持 vue3,因此如果使用 vue2 则需要使用 15.x 版本.</p></li><li><p>组件库</p><p>例如<code>elementui</code>组件库</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>Button<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Button<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例仓库:<a href="https://github.com/kkfive/vue-components-init.git">https://github.com/kkfive/vue-components-init.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;首先需要阐明的是本文单文件开发最终实现的结果：**在 HTML 中通过引入打包后的 js 文件，然后使用组件标签即可渲染。**例如：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="组件化开发" scheme="https://www.antmoe.com/categories/Vue/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue" scheme="https://www.antmoe.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>前端优化：网页中文字体压缩与提取</title>
    <link href="https://www.antmoe.com/posts/21874bc7/"/>
    <id>https://www.antmoe.com/posts/21874bc7/</id>
    <published>2021-06-19T14:54:58.000Z</published>
    <updated>2022-02-21T07:18:57.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>遇到需要自定义字体的需求时就需要向用户索要相关字体，然而从用户那里拿到的字体通常10m左右，假如用户的服务器带宽不够大，那么。。。。</p><p>于是参考<a href="https://www.imaegoo.com/2020/chinese-font-compress/">网页中文字体压缩（woff2）、拆分、去繁体字库，提高加载速度</a> 进行的字体&quot;安排&quot;</p><h2 id="字体提取"><a class="markdownIt-Anchor" href="#字体提取"></a> 字体提取</h2><p>为了便于以后更方便的提取，于是绝对将其安装在我得腾讯云无忧主机上，这样以后在提取直接上传到服务器即可。</p><table><thead><tr><th><strong>字符集</strong></th><th><strong>字数</strong></th><th><strong>Unicode 编码</strong></th></tr></thead><tbody><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jbhz">基本汉字</a></td><td>20902字</td><td>4E00-9FA5</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jbhzbc">基本汉字补充</a></td><td>74字</td><td>9FA6-9FEF</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kza">扩展A</a></td><td>6582字</td><td>3400-4DB5</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzb">扩展B</a></td><td>42711字</td><td>20000-2A6D6</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzc">扩展C</a></td><td>4149字</td><td>2A700-2B734</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzd">扩展D</a></td><td>222字</td><td>2B740-2B81D</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kze">扩展E</a></td><td>5762字</td><td>2B820-2CEA1</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzf">扩展F</a></td><td>7473字</td><td>2CEB0-2EBE0</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzg">扩展G</a></td><td>4939字</td><td>30000-3134A</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kxbs">康熙部首</a></td><td>214字</td><td>2F00-2FD5</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=bskz">部首扩展</a></td><td>115字</td><td>2E80-2EF3</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jrhz">兼容汉字</a></td><td>477字</td><td>F900-FAD9</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jrkz">兼容扩展</a></td><td>542字</td><td>2F800-2FA1D</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=puabj">PUA(GBK)部件</a></td><td>81字</td><td>E815-E86F</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=bjkz">部件扩展</a></td><td>452字</td><td>E400-E5E8</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=puazb">PUA增补</a></td><td>207字</td><td>E600-E6CF</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hzbh">汉字笔画</a></td><td>36字</td><td>31C0-31E3</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hzjg">汉字结构</a></td><td>12字</td><td>2FF0-2FFB</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hyzy">汉语注音</a></td><td>43字</td><td>3105-312F</td></tr><tr><td><a href="https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=zykz">注音扩展</a></td><td>22字</td><td>31A0-31BA</td></tr><tr><td>〇</td><td>1字</td><td>3007</td></tr></tbody></table><p>安装<a href="https://github.com/fonttools/fonttools">pyftsubset</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> fonttools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><a href="https://xiaokang.me">小康</a>的服务器自带了<code>python3.6</code>环境，因此省略的相关环境的安装。</p></blockquote><p>安装完成后即可通过<code>pyftsubset --help</code>命令查询相关帮助。</p><p>为了方便操作这里直接套用了<a href="https://gist.githubusercontent.com/imaegoo/d64e5088b723c2e02c40985f55ff12db/raw/5ebd2ce49418c73459a9dfe050483409306a6c1d/sc_unicode.txt">imaegoo</a>整理的unicodes文件(<a href="https://file.acs.pw/file/txt/sc_unicode.txt">备用地址</a>)</p><blockquote><p>此文件包含的文字范围：简体字，latin的区间和中文标点符号</p></blockquote><p>工具使用方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyftsubset 字体文件 --unicodes-file<span class="token operator">=</span>sc_unicode文件位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyftsubset NotoSansCJKsc-Regular.otf --unicodes-file<span class="token operator">=</span>sc_unicode.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>需要字体文件与<code>sc_unicode.txt</code>文件放在相同目录。</p></blockquote><h2 id="字体压缩"><a class="markdownIt-Anchor" href="#字体压缩"></a> 字体压缩</h2><p>字体压缩用到了谷歌的项目<a href="https://github.com/google/woff2">woff2</a>，此工具会将你的字体文件压缩成woff2格式的字体文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --recursive https://github.com/google/woff2.git<span class="token builtin class-name">cd</span> woff2<span class="token function">make</span> clean all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>需要g++工具，但我的服务器居然自带了，因此相关环境安装过程也可以省略了。</p></blockquote><p>编译安装完成后会在目录下出现三个文件<code>woff2_decompress</code>、<code>woff2_compress</code>、<code>woff2_info</code>，我们需要将<code>woff2_compress</code>文件进行软连接，这样只需要输入<code>woff2_compress</code>即可调用该程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s 文件 /bin/<span class="token comment"># 例如 ln -s /opt/woff2_compress /bin/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>完成上面操作后，以后压缩字体的过程大概就是如下几步：</p><ol><li><p>上传字体</p></li><li><p>提取简体字</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyftsubset 字体文件名 --unicodes-file<span class="token operator">=</span>sc_unicode.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>压缩字体</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">woff2_compress 字体文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>取出压缩后的字体文件</p></li></ol><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://www.imaegoo.com/2020/chinese-font-compress/">网页中文字体压缩（woff2）、拆分、去繁体字库，提高加载速度</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;遇到需要自定义字体的需求时就需要向用户索要相关字体，然而从用户那里拿到的字体通常10m左右，假如用户的服务器带宽不够大，那么。。。。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="前端优化" scheme="https://www.antmoe.com/categories/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="字体" scheme="https://www.antmoe.com/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的防抖和节流</title>
    <link href="https://www.antmoe.com/posts/7f741bc2/"/>
    <id>https://www.antmoe.com/posts/7f741bc2/</id>
    <published>2021-05-29T13:47:25.000Z</published>
    <updated>2022-02-21T07:18:57.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是防抖"><a class="markdownIt-Anchor" href="#什么是防抖"></a> 什么是防抖</h2><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。如下图，持续触发scroll事件时，并不执行handle函数，当1000毫秒内没有触发scroll事件时，才会延时触发scroll事件。</p><p><img src="https://file.acs.pw/picgo/2021/05/29/20210529221042.jpeg" alt="防抖" /></p><p>防抖应用场景如下</p><ul><li>搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。</li><li>表单验证</li><li>按钮提交事件。</li><li>浏览器窗口缩放，resize事件(如窗口停止改变大小之后重新计算布局)等。</li></ul><h3 id="具体实现lodash库"><a class="markdownIt-Anchor" href="#具体实现lodash库"></a> 具体实现(Lodash库)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @param &#123; Function &#125; func 要进行debouce的函数 * @param &#123; Number &#125; wait 等待时间,默认500ms * @param &#123; Boolean &#125; immediate 是否立即执行 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> immediate<span class="token operator">=</span><span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timeout    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果已经执行过，不再执行</span>            <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>非立即执行的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>立即执行的意思是触发事件后函数会立即执行，然后 n 秒内<strong>不触发事件</strong>才能继续执行函数的效果</p></blockquote><h2 id="什么是节流"><a class="markdownIt-Anchor" href="#什么是节流"></a> 什么是节流</h2><p>函数节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。如下图，持续触发scroll事件时，并不立即执行handle函数，每隔1000毫秒才会执行一次handle函数。</p><p><img src="https://file.acs.pw/picgo/2021/05/29/20210529221115.jpeg" alt="节流" /></p><p>节流应用场景：</p><ul><li>按钮点击事件</li><li>拖拽事件</li><li>onScoll</li><li>计算鼠标移动的距离(mousemove)</li></ul><h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 节流，多次触发，间隔时间段执行 * @param &#123; Function &#125; func * @param &#123; Number &#125; wait * @param &#123; Object &#125; options */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args    <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>leading<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>trailing<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        timeout <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now        <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span>        context <span class="token operator">=</span> <span class="token keyword">this</span>        args <span class="token operator">=</span> arguments        <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">&#125;</span>            previous <span class="token operator">=</span> now            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> throttled<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第三个参数还有点复杂，<code>options</code></p><ul><li>leading，函数在每个等待时延的开始被调用，默认值为false</li><li>trailing，函数在每个等待时延的结束被调用，默认值是true</li></ul><p><code>leading-false，trailing-true</code>：默认情况，即在延时结束后才会调用函数</p><p><code>leading-true，trailing-true</code>：在延时开始时就调用，延时结束后也会调用</p><p><code>leading-true, trailing-false</code>：只在延时开始时调用</p></blockquote><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><p>函数防抖</p><p>将几次操作合并为一此操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p><ol><li>input框搜索，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次。</li></ol></li><li><p>函数节流</p><p>使得一定时间内只触发一次函数。原理是通过判断是否到达一定时间来触发函数。</p><ol><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ol></li><li><p>区别</p><p>函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数</p><p>而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</p></li></ul><h2 id="文章参考"><a class="markdownIt-Anchor" href="#文章参考"></a> 文章参考</h2><ul><li><a href="https://www.cnblogs.com/momo798/p/9177767.html">js防抖和节流</a></li><li><a href="https://github.com/Michael-lzg/my--article/blob/master/javascript/js%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81.md">js防抖和节流</a></li><li><a href="https://juejin.cn/post/7000919400249294862">16个工程必备的JavaScript代码片段（建议添加到项目中）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是防抖&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是防抖&quot;&gt;&lt;/a&gt; 什么是防抖&lt;/h2&gt;
&lt;p&gt;函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://www.antmoe.com/categories/JavaScript/"/>
    
    <category term="常见特性" scheme="https://www.antmoe.com/categories/JavaScript/%E5%B8%B8%E8%A7%81%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="防抖节流" scheme="https://www.antmoe.com/tags/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>移动端滚动方案：better-scroll</title>
    <link href="https://www.antmoe.com/posts/ee3a186e/"/>
    <id>https://www.antmoe.com/posts/ee3a186e/</id>
    <published>2021-05-23T09:17:58.000Z</published>
    <updated>2022-02-21T07:18:57.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="betterscroll-是什么"><a class="markdownIt-Anchor" href="#betterscroll-是什么"></a> BetterScroll 是什么</h2><p>BetterScroll 是一款重点解决移动端（已支持 PC）各种滚动场景需求的插件。它的核心是借鉴的 <a href="https://github.com/cubiq/iscroll">iscroll (opens new window)</a>的实现，它的 API 设计基本兼容 iscroll，在 iscroll 的基础上又扩展了一些 feature 以及做了一些性能优化。</p><p>BetterScroll 是使用纯 JavaScript 实现的，这意味着它是无依赖的。</p><p>官方文档：<a href="https://better-scroll.github.io/docs/zh-CN/guide/">BetterScroll</a></p><p>官方Demo：<a href="https://better-scroll.github.io/examples/#/">示例</a></p><h2 id="为什么不能滚动滚动原理"><a class="markdownIt-Anchor" href="#为什么不能滚动滚动原理"></a> 为什么不能滚动：滚动原理</h2><p><img src="https://file.acs.pw/picgo/2021/05/23/20210523171200.png" alt="原理图" /></p><p>绿色部分为 wrapper，也就是父容器，它会有<strong>固定的高度</strong>。黄色部分为 content，它是父容器的<strong>第一个子元素</strong>，它的高度会随着内容的大小而撑高。那么，当 content 的高度不超过父容器的高度，是不能滚动的，而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 BetterScroll 的滚动原理。</p><h2 id="在项目中使用"><a class="markdownIt-Anchor" href="#在项目中使用"></a> 在项目中使用</h2><p>基本HTML结构</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-content-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-content-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>漫画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-content-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-content-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pullup-txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>样式</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">html<span class="token punctuation">,</span>body</span>  <span class="token property-declaration"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span></span>  <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span></span>  <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span></span><span class="token selector">.container</span>  <span class="token property-declaration"><span class="token property">position</span><span class="token punctuation">:</span> relative</span>  <span class="token selector">.header-wrapper</span>    <span class="token variable-declaration"><span class="token variable">header-wrapper-height</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token unit">px</span></span>    <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">red</span></span>    <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> header-wrapper-height</span>    <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span></span>    <span class="token property-declaration"><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap</span>    <span class="token property-declaration"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden</span>    <span class="token selector">.header-content</span>      <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> inline-block</span>      <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span><span class="token unit">px</span></span>      <span class="token property-declaration"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box</span>      <span class="token selector">.header-content-item</span>        <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> inline-block</span>        <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">125</span><span class="token unit">px</span></span>        <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span></span>        <span class="token property-declaration"><span class="token property">line-height</span><span class="token punctuation">:</span> header-wrapper-height</span>  <span class="token selector">.wrapper</span>    <span class="token property-declaration"><span class="token property">position</span><span class="token punctuation">:</span> fixed</span>    <span class="token property-declaration"><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token unit">px</span></span>    <span class="token property-declaration"><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span></span>    <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> auto</span>    <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span></span>    <span class="token comment">// background: green</span>    <span class="token property-declaration"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden</span>    <span class="token selector">.content</span>      <span class="token comment">// position: absolute</span>      <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span><span class="token unit">px</span></span>      <span class="token property-declaration"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box</span>      <span class="token selector">.pullup-txt</span>        <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> none</span>        <span class="token property-declaration"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span>        <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> block</span>        <span class="token property-declaration"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token unit">px</span></span>        <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">white</span></span>      <span class="token selector">.content-item</span>        <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span></span>        <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">white</span></span>        <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">px</span></span>        <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> flex</span>        <span class="token property-declaration"><span class="token property">align-items</span><span class="token punctuation">:</span> center</span>        <span class="token property-declaration"><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span><span class="token unit">px</span></span>        <span class="token property-declaration"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box</span>        <span class="token property-declaration"><span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span></span>        <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span></span>        <span class="token selector">.content-item-avatar</span>          <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">px</span></span>          <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">px</span></span>          <span class="token selector">img</span>            <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">px</span></span>            <span class="token property-declaration"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">px</span></span>            <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">%</span></span>        <span class="token selector">.content-item-body</span>          <span class="token property-declaration"><span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript逻辑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'../style/index/index.styl'</span><span class="token keyword">import</span> <span class="token string">'lib-flexible'</span><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token comment">// 导入better-scroll核心组件</span><span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'@better-scroll/core'</span><span class="token keyword">import</span> Pullup <span class="token keyword">from</span> <span class="token string">'@better-scroll/pull-up'</span><span class="token keyword">import</span> ObserveDOM <span class="token keyword">from</span> <span class="token string">'@better-scroll/observe-dom'</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ObserveDOM<span class="token punctuation">)</span>BScroll<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pullup<span class="token punctuation">)</span><span class="token keyword">let</span> bodyScroll<span class="token keyword">let</span> timer<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">const</span> maxNumber <span class="token operator">=</span> <span class="token number">10</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 头部滑动</span>  <span class="token keyword">let</span> headerWrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.header-wrapper'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> headerScroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>headerWrapper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    scrollX<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    scrollY<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    probeType<span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">// listening scroll event</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 内容区滑动</span>  <span class="token keyword">let</span> wrapper <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.wrapper'</span><span class="token punctuation">)</span>  bodyScroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    scrollY<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    probeType<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// listening scroll event</span>    tap<span class="token operator">:</span> <span class="token string">'tap'</span><span class="token punctuation">,</span>    <span class="token comment">// 上拉加载更多示例</span>    pullUpLoad<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    ObserveDOM<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  bodyScroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pullingUp'</span><span class="token punctuation">,</span> pullingUpHandler<span class="token punctuation">)</span>  bodyScroll<span class="token punctuation">.</span><span class="token function">autoPullUpLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">pullingUpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pullup-txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    number<span class="token operator">++</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">>=</span> maxNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 假设没有数据了</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pullup-txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'没有数据了！'</span><span class="token punctuation">)</span>      bodyScroll<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      bodyScroll<span class="token punctuation">.</span><span class="token function">closePullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSaid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pullup-txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>      bodyScroll<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      bodyScroll<span class="token punctuation">.</span><span class="token function">finishPullUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pullup-txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getSaid</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn/'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    c  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">.</span>hitokoto<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="content-item">            &lt;div class="content-item-avatar">              &lt;img                src="https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg"              />            &lt;/div>            &lt;div class="content-item-body"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>text<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>          &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线<a href="https://webpack.tzki.cn/">Demo</a></p><h2 id="使用注意点"><a class="markdownIt-Anchor" href="#使用注意点"></a> 使用注意点</h2><ol><li>父容器需小于滚动容器才可以滚动</li><li>下拉刷新，上拉加载等需要安装对应插件</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;betterscroll-是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#betterscroll-是什么&quot;&gt;&lt;/a&gt; BetterScroll 是什么&lt;/h2&gt;
&lt;p&gt;BetterScroll 是一款重点解决移动端（已支持 PC</summary>
      
    
    
    
    <category term="大前端" scheme="https://www.antmoe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="移动端开发" scheme="https://www.antmoe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="移动端" scheme="https://www.antmoe.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>给bber换个皮肤</title>
    <link href="https://www.antmoe.com/posts/7ec820ee/"/>
    <id>https://www.antmoe.com/posts/7ec820ee/</id>
    <published>2021-03-24T02:58:00.000Z</published>
    <updated>2022-02-21T07:18:57.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单介绍"><a class="markdownIt-Anchor" href="#简单介绍"></a> 简单介绍</h2><p>此项目仅仅作为<a href="https://immmmm.com/bb-by-wechat-pro/">哔哔点啥</a>数据的前端页面展示，并不会修改及影响任何关于云函数的内容。</p><p><em>注：前端解析不在使用markdown语法解析，但支持<code>![]()</code> 语法的图片。</em></p><p>示例页面：<a target="_blank" href="https://www.antmoe.com/bb/"><span>小康的bb页面</span></a></p><p><img src="https://file.acs.pw/picGo/2021/3/24/9c756e25681681755e2599dd7c0cd009.png" alt="image-20210324110323140" /></p><blockquote><p>样式参考：<a href="https://tomotoes.com/blog/weibo/">微博</a></p></blockquote><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><p>请先确保按照其教程成功部署后，在你的markdown文件写入如下内容即可。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>speak-bber<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>speak</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/ispeak-bber@1.1.1-beta/ispeak-bber.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">ispeakBber    <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      el<span class="token operator">:</span> <span class="token string">'#speak-bber'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'DreamyTZK 🦄'</span><span class="token punctuation">,</span> <span class="token comment">// 显示的昵称</span>      envId<span class="token operator">:</span> <span class="token string">'腾讯云开发环境id'</span><span class="token punctuation">,</span> <span class="token comment">// 环境id</span>      region<span class="token operator">:</span> <span class="token string">'ap-shanghai'</span><span class="token punctuation">,</span> <span class="token comment">// 腾讯云地址，默认为上海</span>      limit<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 每次加载的条数，默认为5</span>      avatar<span class="token operator">:</span> <span class="token string">'https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg'</span><span class="token punctuation">,</span>      fromcolor<span class="token operator">:</span><span class="token string">'rgb(245, 150, 170)'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ispeak 加载完成'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>按照注释需求填写对应的信息即可。</p></blockquote><h2 id="发布哔哔的新方式"><a class="markdownIt-Anchor" href="#发布哔哔的新方式"></a> 发布哔哔的新方式</h2><blockquote><p>此插件仅适用于chrome内核的浏览器。</p></blockquote><p>发布哔哔的方式很简单，即调用接口请求数据即可。作者提供了一种微信发布哔哔的方式，参考<a href="https://blog.zhheo.com/p/27be0e44.html">张洪</a>的教程又解锁了通过<strong>快捷指令</strong>、<strong>Utools</strong>发布哔哔的方式。但这三种方式对我来说均有些不足，因此参考<a href="https://www.ihewro.com/archives/489/">handsome</a>主题附赠的浏览器插件源码，改装成了一个发送哔哔的发射台。</p><p><img src="https://file.acs.pw/picGo/2021/3/24/a10b5f149e45b97d3f429bd291511c88.png" alt="image-20210324111051857" /></p><ul><li><p>接口地址：也就是云函数的接口地址</p><p>示例：<code>https://环境id.ap-shanghai.app.tcloudbase.com/bber</code>，参考木木的教程进行获取。</p></li><li><p>key</p><p>自定义的key</p></li><li><p>7bu图床token</p><p>插件允许<strong>ctrl+v</strong>、<strong>拖拽</strong>方式进行上传图片到<a href="https://7bu.top/">7bu图床</a>，因此你可以设置token，如果设置会将图片上传到自己的账户下，不设置则会匿名上传。</p><p>token获取参考：<a href="https://7bu.top/index/api.html">https://7bu.top/index/api.html</a></p></li><li><p>from</p><p>对应接口from字段，原意为哔哔来源，但我更倾向于标签的定义。</p></li></ul><h2 id="浏览器如何安装插件"><a class="markdownIt-Anchor" href="#浏览器如何安装插件"></a> 浏览器如何安装插件</h2><ol><li>使用Edge浏览器安装<a href="https://microsoftedge.microsoft.com/addons/detail/ispeakbber%E6%97%B6%E5%85%89%E6%9C%BA/nbojopnokkmdbmnneoagianhafgmohfc">ispeak-bber</a>插件</li><li>填写对应字段，然后发送哔哔</li></ol><h2 id="添加首页轮播"><a class="markdownIt-Anchor" href="#添加首页轮播"></a> 添加首页轮播</h2><p>添加首页轮播借助了<a href="https://butterfly.js.org/posts/ea33ab97/">butterfly主题自定义组件</a>的功能实现，通过在自定义组件处加载JavaScript生成首页的轮播展示。示例代码如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> latestBB  <span class="token key atrule">id_name</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 最新吐槽  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bolt  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    &lt;div class="swiper-container swiper-container-aside">      &lt;div class="swiper-wrapper swiper-weapper-aside">&lt;/div>    &lt;/div>    &lt;a class="bb-btn button--animated" href="/bb/" title="查看全部">&lt;i class="far fa-hand-point-right fa-fw">&lt;/i> 查看更多 &lt;/a>    &lt;script>      window.kkBBConfig = &#123;        limit: 9,        blog:'/bb/',        api_url:          'https://636f-comment-5gj5t55m7efcd73d-1251136071.tcb.qcloud.la/json/bber.json'      &#125;    &lt;/script>    &lt;script src="https://cdn.jsdelivr.net/npm/butterfly-bber-swiper/dist/index.min.js">&lt;/script></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>latestBB</code></p><p>容器class名，请保持<code>latestBB</code>不要更改</p></li><li><p><code>html</code></p><p>必须包含的内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">class_name</span><span class="token punctuation">:</span> latestBB  <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    &lt;div class="swiper-container swiper-container-aside">      &lt;div class="swiper-wrapper swiper-weapper-aside">&lt;/div>    &lt;/div>    &lt;script>      window.kkBBConfig = &#123;        // 如果使用API 那么此字段表示读取的数量        limit: 9,        // 点击后跳转的链接        blog:'/bb/',        // api地址，可以是json文件地址 也可以是api地址        api_url:          'https://636f-comment-5gj5t55m7efcd73d-1251136071.tcb.qcloud.la/json/bber.json'      &#125;    &lt;/script>    &lt;script src="https://cdn.jsdelivr.net/npm/butterfly-bber-swiper/dist/index.min.js">&lt;/script></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他可根据自己的需求今天添加。</p></li><li><p>其他</p><p>其他未提及字段非本项目必须字段，因此不做解释，可参考官方文档：<a href="https://butterfly.js.org/posts/ea33ab97/">https://butterfly.js.org/posts/ea33ab97/</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简单介绍&quot;&gt;&lt;/a&gt; 简单介绍&lt;/h2&gt;
&lt;p&gt;此项目仅仅作为&lt;a href=&quot;https://immmmm.com/bb-by-wechat-pro/&quot;&gt;哔哔点啥&lt;/a&gt;数据的前</summary>
      
    
    
    
    <category term="Speak" scheme="https://www.antmoe.com/categories/Speak/"/>
    
    
    <category term="bber" scheme="https://www.antmoe.com/tags/bber/"/>
    
  </entry>
  
  <entry>
    <title>一、VUE中的遗漏的知识</title>
    <link href="https://www.antmoe.com/posts/c99a2dda/"/>
    <id>https://www.antmoe.com/posts/c99a2dda/</id>
    <published>2021-03-19T08:35:25.000Z</published>
    <updated>2022-02-21T07:18:57.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="render中的h函数"><a class="markdownIt-Anchor" href="#render中的h函数"></a> render中的h函数</h2><p>h函数可以创建虚拟dom，通过创建的虚拟dom再转化为真的的DOM，从而渲染到页面中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// render function</span>  <span class="token comment">// template -> render -> h -> 虚拟DOM（JS对象）-> 真实 DOM -> 展示到页面上</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;my-title :level="2">hello xiaokang  &lt;/my-title></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-title'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'level'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h4'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'xiaokang'</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>h函数第一个参数为<code>tag name</code>，也就是你需要创建的标签名，第二参数为此标签上的属性，第三个参数为其内容数组。</p></blockquote><p><img src="https://file.acs.pw/picGo/2021/3/19/8389ca8508a1c1f8408036f2b7a819a2.png" alt="image-20210319172822390" /></p><blockquote><p>参考链接：<a href="https://vue3js.cn/docs/zh/guide/render-function.html">https://vue3js.cn/docs/zh/guide/render-function.html</a></p></blockquote><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p>vue中插件主要用于把一些通用性的功能封装起来</p><p>插件定义的基本语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当使用插件时，会调用插件的install方法。第一个参数app为生成的app对象，第二个参数为传递的参数。</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// plugin 插件, 也是把通用性的功能封装起来</span>  <span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 提供和注入</span>      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'xiaokang'</span><span class="token punctuation">)</span>      <span class="token comment">// 自定义指令</span>      app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 混入</span>      app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mixin'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token comment">// 全局属性</span>      app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$sayHello <span class="token operator">=</span> <span class="token string">'hello world'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;my-title /></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-title'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    inject<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$sayHello<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&#123;&#123;name&#125;&#125;&lt;input v-focus />&lt;/div></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myPlugin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xiaokang'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details class="folding-tag" ><summary> 数据校验插件 </summary>              <div class='content'>              <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'dell'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  rules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token parameter">age</span> <span class="token operator">=></span> age <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token string">'too young, to simple'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token parameter">name</span> <span class="token operator">=></span> name<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token string">'name too short'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>name:&#123;&#123;name&#125;&#125;, age:&#123;&#123;age&#125;&#125;&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对数据做校验的插件</span><span class="token keyword">const</span> <span class="token function-variable function">validatorPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>rules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>rules<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>validatorPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>              </div>            </details><blockquote><p>参考：<a href="https://vue3js.cn/docs/zh/guide/plugins.html">https://vue3js.cn/docs/zh/guide/plugins.html</a></p></blockquote><h2 id="teleport传送门-vue3"><a class="markdownIt-Anchor" href="#teleport传送门-vue3"></a> Teleport传送门-vue3</h2><p>主要用于将dom元素挂载到其他位置，例如挂载到<code>head</code>里。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// teleport 传送门</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        message<span class="token operator">:</span> <span class="token string">'hello'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;div class="area">        &lt;button @click="handleBtnClick">按钮&lt;/button>        &lt;teleport to="body">          &lt;div class="mask" v-show="show">&#123;&#123;message&#125;&#125;&lt;/div>        &lt;/teleport>      &lt;/div>    </span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2021/3/19/aa3bc2cad2374fc1ba959ab54d4faf45.png" alt="image-20210319171148266" /></p><h2 id="components-api-vue3"><a class="markdownIt-Anchor" href="#components-api-vue3"></a> components API-vue3</h2><h3 id="setup函数"><a class="markdownIt-Anchor" href="#setup函数"></a> setup函数</h3><p>该函数会在<strong>创建组件之前</strong>执行，由于在执行 <code>setup</code> 时尚未创建组件实例，因此在 <code>setup</code> 选项中没有 <code>this</code>。这意味着，除了 <code>props</code> 之外，你将无法访问组件中声明的任何属性——<strong>本地状态</strong>、<strong>计算属性</strong>或<strong>方法</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 对数据做校验的插件</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div @click="handleClick">&#123;&#123;name&#125;&#125;&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 实例可以调用setup方法</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 这里不能调用this</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'xiaokang'</span><span class="token punctuation">,</span>      <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>setup里返回的内容可以在实例中调用。</p></blockquote><h3 id="响应式引用与只读"><a class="markdownIt-Anchor" href="#响应式引用与只读"></a> 响应式引用与只读</h3><p>主要用于将<code>setup</code>中的变量转换为响应式的变量。默认变量并不是响应式的。</p><p>其中<code>ref</code>处理基础类型的数据，<code>reactive</code>用于处理非基础类型的数据（对象和数组）。</p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>ref</code></td><td style="text-align:center">将基础类型数据转化为响应式数据</td></tr><tr><td style="text-align:center"><code>reactive</code></td><td style="text-align:center">将非基础类型的数据（对象和数组）。</td></tr><tr><td style="text-align:center"><code>readonly</code></td><td style="text-align:center">将数据设为只读</td></tr><tr><td style="text-align:center"><code>toRefs</code></td><td style="text-align:center">将非基础类型的子元素设置为响应式数据</td></tr></tbody></table><ol><li><p>基础类型引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'2'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过ref包装后，name实则变成了<code>proxy(&#123;value: '2'&#125;)</code>这样的引用，当修改值时需要修改name的value属性。但是调用时不需要使用<code>value</code>，vue会识别并自动调用。</p></blockquote></li><li><p>非基础类型引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> readonly<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">const</span> nameObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xiaokang'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    nameObj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'22'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> nameObj <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过<code>reactive</code>包装后，nameObj就是响应式的了。</p></blockquote></li><li><p>组合使用</p><p>在非响应式引用里，只有整个对象是响应式的，而对象里的某个属性并不是响应式的，因此，需要将这个对象再次进行包装才可以使其属性变成响应式的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> readonly<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">const</span> nameObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xiaokang'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    nameObj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'22'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只读</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> nameObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xiaokang'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> nameObjCopy <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  nameObj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span>  nameObjCopy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>参考：<a href="https://vue3js.cn/docs/zh/guide/composition-api-introduction.html#%E5%B8%A6-ref-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F">https://vue3js.cn/docs/zh/guide/composition-api-introduction.html#带-ref-的响应式变量</a></p></blockquote><h3 id="toref"><a class="markdownIt-Anchor" href="#toref"></a> toRef</h3><p>可以用来为源响应式对象上的 property 性创建一个 <a href="https://vue3js.cn/docs/zh/api/refs-api.html#ref"><code>ref</code></a>。然后可以将 ref 传递出去，从而保持对其源 property 的响应式连接。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRef <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">const</span> nameObj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'xiaokang'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    age<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">21</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="setup中context参数"><a class="markdownIt-Anchor" href="#setup中context参数"></a> setup中context参数</h2><p>context参数一共可以结构出三个参数：</p><ul><li><p><code>attrs</code></p><p>None-Props属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;child app='app' style='color:red'>&lt;/child></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">'&lt;div>child&lt;/div>'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span> <span class="token operator">=</span> context    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token comment">// 接收没有被props接收的属性</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://file.acs.pw/picGo/2021/3/19/f33997da9bc1eff1e1330a4b0196cee2.png" alt="image-20210319190338185" /></p></li><li><p><code>slots</code></p><p>插槽</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;child app='app' style='color:red'>插槽内容  &lt;/child></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span> <span class="token operator">=</span> context    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用<code>jsx</code>进行模板渲染：<a href="https://github.com/vuejs/jsx-next#installation">https://github.com/vuejs/jsx-next#installation</a></p></blockquote></li><li><p><code>emit</code></p><p>触发自定义事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;child @change='handleChange' app='app' style='color:red'>插槽内容&lt;/child></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  template<span class="token operator">:</span> <span class="token string">"&lt;div @click='handleClick'>123123&lt;/div>"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit <span class="token punctuation">&#125;</span> <span class="token operator">=</span> context    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      handleClick    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="计算属性"><a class="markdownIt-Anchor" href="#计算属性"></a> 计算属性</h3><p>计算属性同样使用<code>Vue</code>对象提供的<code>computed</code>方法。computed方法接收参数有两种类型，一种是函数，另一种是对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> number2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    number<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>    number2<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 传入函数</span>  <span class="token keyword">let</span> cNumber <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> number<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">5</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 传入对象</span>  <span class="token keyword">let</span> cNumberObj <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> number2<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      number2<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> number<span class="token punctuation">,</span> cNumber<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> cNumberObj <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch与watcheffect"><a class="markdownIt-Anchor" href="#watch与watcheffect"></a> watch与watchEffect</h3><p>就像我们如何使用 <code>watch</code> 选项在组件内的 <code>user</code> property 上设置侦听器一样，我们也可以使用从 Vue 导入的 <code>watch</code> 函数执行相同的操作。它接受 3 个参数：</p><ul><li>一个<strong>响应式引用</strong>或我们想要侦听的 getter 函数</li><li>一个回调函数</li><li>可选的配置选项</li></ul><ol><li><p>侦听单个源</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 侦听一个 getter</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接侦听ref</span><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>侦听多个源</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fooRef<span class="token punctuation">,</span> barRef<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>prevFoo<span class="token punctuation">,</span> prevBar<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><table><thead><tr><th style="text-align:center">不同点</th><th style="text-align:center"><code>watch</code></th><th style="text-align:center"><code>watchEffect</code></th></tr></thead><tbody><tr><td style="text-align:center">惰性</td><td style="text-align:center">默认情况下是惰性的，但第三个参数传入<code>immediate</code>为true可以立即执行</td><td style="text-align:center">非惰性</td></tr><tr><td style="text-align:center">能拿到原始值和当前值</td><td style="text-align:center">能</td><td style="text-align:center">只能拿到当前值</td></tr><tr><td style="text-align:center">只可以侦听多个数据</td><td style="text-align:center">可以</td><td style="text-align:center">可以</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> stop <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">// 会自动判断依赖并更新</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用后会停止监听</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    ref<span class="token punctuation">,</span>    onBeforeMount<span class="token punctuation">,</span>    onMounted<span class="token punctuation">,</span>    onBeforeUpdate<span class="token punctuation">,</span>    onUpdated<span class="token punctuation">,</span>    onRenderTracked<span class="token punctuation">,</span>    onRenderTriggered  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'dell'</span><span class="token punctuation">)</span>  <span class="token function">onBeforeMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeMount'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onMounted'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onBeforeUpdate'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onUpdated'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 每次渲染后重新收集响应式依赖</span>  <span class="token function">onRenderTracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRenderTracked'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 每次触发页面重新渲染时自动执行</span>  <span class="token function">onRenderTriggered</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onRenderTriggered'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'lee'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> handleClick <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="provide-inject和ref"><a class="markdownIt-Anchor" href="#provide-inject和ref"></a> Provide、Inject和ref</h3><p>提供与注入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> readonly <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue<span class="token punctuation">;</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'name1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token function">readonly</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          name<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div>          &lt;child />        &lt;/div>      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue<span class="token punctuation">;</span>        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> changeName <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'changeName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token string">'name2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> handleClick <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      template<span class="token operator">:</span> <span class="token string">'&lt;div @click="handleClick">&#123;&#123;name&#125;&#125;&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通过<code>readonly</code>对提供的变量进行包装，实现数据单向流（子组件不能修改父组件的值）。</p></blockquote><p>ref</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Vue    <span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// dom节点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> hello <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>&lt;div ref="hello">hello world&lt;/div>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;render中的h函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#render中的h函数&quot;&gt;&lt;/a&gt; render中的h函数&lt;/h2&gt;
&lt;p&gt;h函数可以创建虚拟dom，通过创建的虚拟dom再转化为真的的DOM，从而渲染到页面中。&lt;/</summary>
      
    
    
    
    <category term="Vue" scheme="https://www.antmoe.com/categories/Vue/"/>
    
    <category term="Vue3" scheme="https://www.antmoe.com/categories/Vue/Vue3/"/>
    
    
    <category term="Vue" scheme="https://www.antmoe.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的设计模式</title>
    <link href="https://www.antmoe.com/posts/399e67ab/"/>
    <id>https://www.antmoe.com/posts/399e67ab/</id>
    <published>2021-03-09T10:25:58.000Z</published>
    <updated>2022-02-21T07:18:57.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h2><ul><li><p>单一职权原则（SRP）</p><blockquote><p>一个对象或方法只做一件事情。如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。</p></blockquote><p><strong>应该把对象或方法划分成较小的粒度</strong></p></li><li><p>最小知识原则（LKP）</p><blockquote><p>一个软件实体应当 尽可能少地与其他实体发生相互作用</p></blockquote><p><strong>应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的 相互联系，可以转交给第三方进行处理</strong></p></li><li><p>开放-封闭原则（OCP）</p><blockquote><p>软件实体（类、模块、函数）等应该是可以扩展的，但是<strong>不可修改</strong>。</p></blockquote><p><strong>当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，尽量避免改动程序的源代码，防止影响原系统的稳定</strong></p></li></ul><h2 id="什么是设计模式"><a class="markdownIt-Anchor" href="#什么是设计模式"></a> 什么是设计模式</h2><blockquote><p>假设有一个空房间，我们要日复一日地往里面放一些东西。最简单的办法当然是把这些东西直接扔进去，但是时间久了，就会发现很难从这个房子里找到自己想要的东西，要调整某几样东 西的位置也不容易。所以在房间里做一些柜子也许是个更好的选择，虽然柜子会增加我们的成本，但它可以在维护阶段为我们带来好处。使用 这些柜子存放东西的规则，或许就是一种模式</p></blockquote><p>设计模式的原则是 “找出 程序中变化的地方，并将变化封装起来”，它的关键是意图，而不是结构。</p><h2 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h2><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">保证一个类仅有一个实例，并提供一个访问它的全局访问点</td></tr><tr><td style="text-align:center">核心</td><td style="text-align:center">确保只有一个实例，并提供全局访问</td></tr><tr><td style="text-align:center">实现</td><td style="text-align:center">假设要设置一个管理员，多次调用也仅设置一次，我们可以使用闭包缓存一个内部变量来实现这个单例</td></tr></tbody></table><blockquote><p>通过定义核心，可以联想到JavaScript中的全局对象，利用ES6的let不允许重复声明的特性，刚好符合这两个特点；是的，全局对象是最简单的单例模式</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> CreateSingleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> instance    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">CreateSingleton</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> winner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateSingleton</span><span class="token punctuation">(</span><span class="token string">'winner'</span><span class="token punctuation">)</span> <span class="token comment">//winner</span>winner<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateSingleton</span><span class="token punctuation">(</span><span class="token string">'sunner'</span><span class="token punctuation">)</span> <span class="token comment">//winner</span>sunner<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第二次实例化<code>CreateSingleton</code>对象时，由于已经存在了该实例，因此直接将实例返回。</p></blockquote><p>还可以通过代理的形式，将创建对象的操作和实例判断的操作进行解耦拆分，实现更小粒度的划分，符合”单一职责原则“；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 只负责判断是否需要创建对象</span><span class="token keyword">let</span> ProxyCreateSingleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> instance    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singlton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建对象</span><span class="token keyword">let</span> <span class="token function-variable function">Singlton</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token comment">// 对象方法</span><span class="token class-name">Singlton</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h2><blockquote><p>什么是工厂：<strong>不暴露对象创建的逻辑,而是将逻辑封装在一个函数内,那么这个函数可以成为工厂</strong></p></blockquote><ol><li>简单工厂</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">factory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">role</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name    <span class="token keyword">this</span><span class="token punctuation">.</span>role <span class="token operator">=</span> obj<span class="token punctuation">.</span>role  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>role<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'superman'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'平台用户'</span><span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'主页'</span><span class="token punctuation">,</span> <span class="token string">'登录页'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token string">'man'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'游客'</span><span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'登录页'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'参数错误'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> superman <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">'superman'</span><span class="token punctuation">)</span><span class="token keyword">let</span> man <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">'man'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>工厂方法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">factory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">role</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">this</span><span class="token punctuation">[</span>role<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">factory</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>factory<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">admin</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'平台用户'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'登录页'</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">common</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'游客'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'登录页'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'测试'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>role <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'登录页'</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">,</span> <span class="token string">'测试页'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token string">'我还有一个测试属性哦'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token keyword">let</span> common <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token string">'common'</span><span class="token punctuation">)</span><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">factory</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>工厂方法：对于类的扩充优于修改 继承优于扩充</p></blockquote><ol start="3"><li><p>安全模式下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Demo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Demo</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象工厂</p><blockquote><p>抽象工厂的作用是让子类继承父类，但子类必须实现父类没有实现的功能。</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>  <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象方法不能调用'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BMW</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> speed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> speed  <span class="token punctuation">&#125;</span>  <span class="token comment">// 子类必须实现父类没有实现的方法</span>  <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price  <span class="token punctuation">&#125;</span>  <span class="token function">getSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bmw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bmw<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="外观模式"><a class="markdownIt-Anchor" href="#外观模式"></a> 外观模式</h2><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使子系统更加容易使用</td></tr><tr><td style="text-align:center">核心</td><td style="text-align:center">可以通过请求外观接口来达到访问子系统，也可以选择越过外观来直接访问子系统</td></tr><tr><td style="text-align:center">实现</td><td style="text-align:center">外观模式在 JS 中，可以认为是一组函数的集合</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 三个处理函数</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'doing'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 外观函数，将一些处理统一起来，方便调用</span><span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用init开始执行</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 此处直接调用了高层函数，也可以选择越过它直接调用相关的函数</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start doing end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> 适配器模式</h2><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">是解决两个软件实体间的接口不兼容的问题，对不兼容的部分进行适配</td></tr><tr><td style="text-align:center">核心</td><td style="text-align:center">解决两个已有接口之间不匹配的问题</td></tr><tr><td style="text-align:center">实现</td><td style="text-align:center">比如一个简单的数据格式转换的适配器</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> dom <span class="token operator">=</span> <span class="token keyword">typeof</span> id <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">:</span> id  <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dom<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    dom<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> fn  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mybutton'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="装饰器模式"><a class="markdownIt-Anchor" href="#装饰器模式"></a> 装饰器模式</h2><table><thead><tr><th style="text-align:center">说明</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。<br >是一种 “即用即付” 的方式，能够在不改变对 象自身的基础上，在程序运行期间给对象动态地添加职责</td></tr><tr><td style="text-align:center">核心</td><td style="text-align:center">是为对象动态加入行为，经过多重包装，可以形成一条装饰链</td></tr><tr><td style="text-align:center">实现</td><td style="text-align:center">获取该元素已绑定的事件，调用后在调用扩充的事件</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">decorator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 我想要对 input 的点击事件 进行扩充，首先要获取原有的功能</span>  <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input<span class="token punctuation">.</span>onclick <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oldClickEvent <span class="token operator">=</span> input<span class="token punctuation">.</span>onclick    input<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">oldClickEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    input<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fn  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">decorator</span><span class="token punctuation">(</span><span class="token string">'tel_input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  telDemoText<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ul><li><a href="https://www.cnblogs.com/imwtr/p/9451129.html">https://www.cnblogs.com/imwtr/p/9451129.html</a></li><li><a href="https://www.cnblogs.com/xiaogua/p/10502892.html">https://www.cnblogs.com/xiaogua/p/10502892.html</a></li></ul><h2 id="同类推荐"><a class="markdownIt-Anchor" href="#同类推荐"></a> 同类推荐</h2><ul><li><a href="https://juejin.cn/post/6844904032826294286">https://juejin.cn/post/6844904032826294286</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#设计原则&quot;&gt;&lt;/a&gt; 设计原则&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单一职权原则（SRP）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个对象或方法只做一件事情。如果一个方法承担了过</summary>
      
    
    
    
    <category term="大前端" scheme="https://www.antmoe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="设计模式" scheme="https://www.antmoe.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://www.antmoe.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于Vercel的API接口文档</title>
    <link href="https://www.antmoe.com/posts/fb3f3bba/"/>
    <id>https://www.antmoe.com/posts/fb3f3bba/</id>
    <published>2021-03-04T15:38:00.000Z</published>
    <updated>2022-02-21T07:18:57.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单说明"><a class="markdownIt-Anchor" href="#简单说明"></a> 简单说明</h2><p>接口Base域名：<code>https://kkapi.vercel.app/</code>当然你也可以部署到自己的vercel中绑定自己的域名。该项目开源仓库：<a href="https://github.com/DreamyTZK/api-vercel">api-vercel</a></p><p><strong>所有的接口无特殊声明均支持GET、POST两种请求。</strong></p><h2 id="普通类型接口"><a class="markdownIt-Anchor" href="#普通类型接口"></a> 普通类型接口</h2><p>此类接口地址全部为<code>/index</code>，通过参数<code>type</code>区分行为</p><h3 id="获取文件内容"><a class="markdownIt-Anchor" href="#获取文件内容"></a> 获取文件内容</h3><blockquote><p>此接口会返回一个允许任何域的文件。</p></blockquote><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作的类型</td><td style="text-align:center"><code>cros</code></td></tr><tr><td style="text-align:center"><code>url</code></td><td style="text-align:center">【必填】请求文件的地址</td><td style="text-align:center"><a href="https://raw.githubusercontent.com/DreamyTZK/DreamyTZK/master/README.md">README.md</a></td></tr></tbody></table><blockquote><p>示例：<a href="https://kkapi.vercel.app/index?type=cros&amp;url=https://raw.githubusercontent.com/DreamyTZK/DreamyTZK/master/README.md">https://kkapi.vercel.app/index?type=cros&amp;url=https://raw.githubusercontent.com/DreamyTZK/DreamyTZK/master/README.md</a></p></blockquote><h3 id="返回qq头像"><a class="markdownIt-Anchor" href="#返回qq头像"></a> 返回qq头像</h3><blockquote><p>此接口返回qq头像</p></blockquote><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作的类型</td><td style="text-align:center"><code>qlogo</code></td></tr><tr><td style="text-align:center"><code>qq</code></td><td style="text-align:center">【必填】需要获取的qq号</td><td style="text-align:center"><code>2045105376</code></td></tr></tbody></table><blockquote><p>调用示例：<a href="https://kkapi.vercel.app/index?type=qlogo&amp;qq=2045105376">https://kkapi.vercel.app/index?type=qlogo&amp;qq=2045105376</a></p></blockquote><h3 id="必应壁纸"><a class="markdownIt-Anchor" href="#必应壁纸"></a> 必应壁纸</h3><blockquote><p>此接口重定向到指定日期的必应壁纸，数据存储在jsd</p></blockquote><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作的类型</td><td style="text-align:center"><code>bing</code></td></tr><tr><td style="text-align:center"><code>date</code></td><td style="text-align:center">【选填】需要获取的日期。<br />只能获取<code>20200312</code>及之后的图，之前的无法获取</td><td style="text-align:center"><code>20210101</code></td></tr></tbody></table><blockquote><p>调用示例：<a href="http://kkapi.vercel.app/index?type=bing&amp;date=20210101">http://kkapi.vercel.app/index?type=bing&amp;date=20210101</a></p></blockquote><h2 id="图片处理类"><a class="markdownIt-Anchor" href="#图片处理类"></a> 图片处理类</h2><blockquote><p>此接口可以处理一些图片，例如返回格式、宽度高度等。</p></blockquote><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>img</code></td><td style="text-align:center">【必填】图片地址</td><td style="text-align:center"><code>cros</code></td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">【选填】图片旋转角度</td><td style="text-align:center"><code>45</code></td></tr><tr><td style="text-align:center"><code>w</code></td><td style="text-align:center">【选填】设置图片的宽度</td><td style="text-align:center"><code>100</code></td></tr><tr><td style="text-align:center"><code>h</code></td><td style="text-align:center">【选填】设置图片的高度</td><td style="text-align:center"><code>100</code></td></tr><tr><td style="text-align:center"><code>fit</code></td><td style="text-align:center">【选填】设置图片填充方式，可选值：<code>cover</code>、<code>contain</code>、<code>fill</code>、<code>inside</code>、<code>outside</code></td><td style="text-align:center"><code>cover</code></td></tr><tr><td style="text-align:center"><code>bg</code></td><td style="text-align:center">【选填】背景颜色</td><td style="text-align:center"><code>#000</code></td></tr><tr><td style="text-align:center"><code>withoutEnlargement</code></td><td style="text-align:center">【选填】如果宽度或高度已经小于指定的尺寸，不要放大，默认<code>false</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>format</code></td><td style="text-align:center">【选填】格式化图片，<code>jpeg</code>、<code>png</code>、<code>webp</code>、<code>tiff</code>、<code>heif</code>、<code>raw</code>、<code>tile</code></td><td style="text-align:center"><code>webp</code></td></tr><tr><td style="text-align:center"><code>pos</code></td><td style="text-align:center">【选填】定位</td><td style="text-align:center"><code>center</code></td></tr><tr><td style="text-align:center"><code>q</code></td><td style="text-align:center">【选填】输出图片的质量，取值为1-100</td><td style="text-align:center"><code>100</code></td></tr></tbody></table><blockquote><p>调用示例：<a href="https://kkapi.vercel.app/image?img=https://cdn.jsdelivr.net/gh/DreamyTZK/xiaokang.me@master/www/assets/bg/003.jpg&amp;fit=outside&amp;w=1440&amp;h=900&amp;format=webp">https://kkapi.vercel.app/image?img=https://cdn.jsdelivr.net/gh/DreamyTZK/xiaokang.me@master/www/assets/bg/003.jpg&amp;fit=outside&amp;w=1440&amp;h=900&amp;format=webp</a></p></blockquote><h2 id="消息发送类"><a class="markdownIt-Anchor" href="#消息发送类"></a> 消息发送类</h2><blockquote><p>用于快捷的发送一些消息</p></blockquote><h3 id="发送电报消息"><a class="markdownIt-Anchor" href="#发送电报消息"></a> 发送电报消息</h3><p>接口地址：<code>/tegegram</code>，参数</p><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">示例值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作类型，发送消息填写为<code>send</code>即可</td><td style="text-align:center"><code>send</code></td></tr><tr><td style="text-align:center"><code>text</code></td><td style="text-align:center">【必填】消息内容</td><td style="text-align:center">小康</td></tr><tr><td style="text-align:center"><code>chat_id</code></td><td style="text-align:center">【必填】发送tg消息的对象，支持群组和个人。请先添加<a href="https://t.me/kang_notice_bot">通知小助手</a>否则api接口会调用失败。</td><td style="text-align:center"><code>-1001289698078</code></td></tr></tbody></table><blockquote><p>调用示例：<a href="https://kkapi.vercel.app/telegram?type=send&amp;text=test&amp;chat_id=">https://kkapi.vercel.app/telegram?type=send&amp;text=test&amp;chat_id=</a></p></blockquote><h3 id="企业微信通知"><a class="markdownIt-Anchor" href="#企业微信通知"></a> 企业微信通知</h3><p>接口地址：<code>/qywx</code>，参数</p><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">示例值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作类型，发送普通文本使用<code>text</code>,markdown使用<code>markdown</code></td><td style="text-align:center"><code>text</code></td></tr><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center">【必填】微信企业的id</td><td style="text-align:center"><code>ww3dxxxxxxxxxxx76</code></td></tr><tr><td style="text-align:center"><code>secert</code></td><td style="text-align:center">【必填】企业应用的<code>secert</code></td><td style="text-align:center"><code>wYN1xxxLsbwod_eRexxxxxGLgFxxxxxD6b-xxxx</code></td></tr><tr><td style="text-align:center"><code>agentid</code></td><td style="text-align:center">【必填】企业应用ID</td><td style="text-align:center"><code>1000002</code></td></tr><tr><td style="text-align:center"><code>msg</code></td><td style="text-align:center">【必填】发送的消息</td><td style="text-align:center">1223</td></tr><tr><td style="text-align:center"><code>touser</code></td><td style="text-align:center">【必填】指定接收消息的成员，成员ID列表（多个接收者用‘|’分隔，最多支持1000个）。</td><td style="text-align:center"><code>@all</code></td></tr></tbody></table><blockquote><p>调用示例：<a href="https://kkapi.vercel.app/api/qywx?type=text&amp;id=%7B%E4%BC%81%E4%B8%9Aid%7D&amp;secert=%7B%E5%BA%94%E7%94%A8secert%7D&amp;agentid=%7B%E5%BA%94%E7%94%A8id%7D&amp;msg=%7B%E4%BD%A0%E8%A6%81%E5%8F%91%E7%9A%84%E6%B6%88%E6%81%AF%7D&amp;touser=%7B%E5%8F%91%E9%80%81%E7%BB%99%E8%B0%81%7D">https://kkapi.vercel.app/api/qywx?type=text&amp;id={企业id}&amp;secert={应用secert}&amp;agentid={应用id}&amp;msg={你要发的消息}&amp;touser={发送给谁}</a></p></blockquote><p>官方文档：<a href="https://work.weixin.qq.com/api/doc/90001/90143/90372">https://work.weixin.qq.com/api/doc/90001/90143/90372</a></p><blockquote><p>同类功能接口及教程：<a href="https://blog.zhheo.com/p/1e9f35bc.html">https://blog.zhheo.com/p/1e9f35bc.html</a></p></blockquote><h2 id="github相关的接口"><a class="markdownIt-Anchor" href="#github相关的接口"></a> Github相关的接口</h2><p>此类接口地址全部为：<code>/github</code>，通过<code>type</code>区分操作类型。</p><h3 id="触发actions"><a class="markdownIt-Anchor" href="#触发actions"></a> 触发Actions</h3><table><thead><tr><th style="text-align:center">参数名称</th><th style="text-align:center">含义</th><th style="text-align:center">示例值</th></tr></thead><tbody><tr><td style="text-align:center"><code>type</code></td><td style="text-align:center">【必填】操作类型</td><td style="text-align:center"><code>dispatch</code></td></tr><tr><td style="text-align:center"><code>owner</code></td><td style="text-align:center">【必填】仓库主人用户名</td><td style="text-align:center"><code>iServes</code></td></tr><tr><td style="text-align:center"><code>repo</code></td><td style="text-align:center">【必填】仓库名</td><td style="text-align:center"><code>actions-friend-spider</code></td></tr><tr><td style="text-align:center"><code>token</code></td><td style="text-align:center">【必填】生成个人Token，不会请参考<a href="https://www.antmoe.com/posts/cdc580cd/">项目中常用的密钥获取方式</a></td><td style="text-align:center"><code>xxxxxxxx</code></td></tr><tr><td style="text-align:center"><code>runit_text</code></td><td style="text-align:center">【可选】触发Actions时的文本</td><td style="text-align:center"><code>test</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简单说明&quot;&gt;&lt;/a&gt; 简单说明&lt;/h2&gt;
&lt;p&gt;接口Base域名：&lt;code&gt;https://kkapi.vercel.app/&lt;/code&gt;当然你也可以部署到自己的vercel中</summary>
      
    
    
    
    <category term="参考手册" scheme="https://www.antmoe.com/categories/%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="vercel" scheme="https://www.antmoe.com/tags/vercel/"/>
    
  </entry>
  
  <entry>
    <title>项目中常用的密钥获取方式</title>
    <link href="https://www.antmoe.com/posts/cdc580cd/"/>
    <id>https://www.antmoe.com/posts/cdc580cd/</id>
    <published>2021-03-04T01:05:00.000Z</published>
    <updated>2022-02-21T07:18:57.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>此文记录项目中常用的密钥获取，例如GitHub的token，码云的token等。</p><h2 id="github的token"><a class="markdownIt-Anchor" href="#github的token"></a> Github的Token</h2><ol><li><p>登录GitHub后，打开网址<a href="https://github.com/settings/tokens">tokens</a></p></li><li><p>添加一个新的token</p><p><img src="https://file.acs.pw/picGo/2021/3/4/a09072680d3cfb3252cfebec940309ad.png" alt="image-20210304091152601" /></p></li><li><p>至于权限根据自己项目需求给就行，或者生成一个全权限的token，每次直接用这个token即可。</p></li></ol><h2 id="gitee的token"><a class="markdownIt-Anchor" href="#gitee的token"></a> Gitee的Token</h2><ol><li><p>登录Gitee后，打开网址<a href="https://gitee.com/profile/personal_access_tokens">tokens</a></p></li><li><p>添加一个新的令牌</p><p><img src="https://file.acs.pw/picGo/2021/3/4/1cfdb41abfd673912152804a4cfed15d.png" alt="image-20210304091340788" /></p></li><li><p>至于权限根据自己项目需求给就行，或者生成一个全权限的token，每次直接用这个token即可。</p></li></ol><h2 id="npm的token"><a class="markdownIt-Anchor" href="#npm的token"></a> NPM的Token</h2><ol><li><p>登录<a href="https://www.npmjs.com/">NPM</a>官网后，打开网址<a href="https://www.npmjs.com/settings/antmoe/tokens">tokens</a></p></li><li><p>生成一个新的token即可。</p><p><img src="https://file.acs.pw/picGo/2021/3/4/e058f008537bfa803f0de3530c3f9a14.png" alt="image-20210304091546588" /></p></li><li><p>至于权限，如果我们用于CI/CD调用，一般选择<code>Automation</code>即可。</p><p><img src="https://file.acs.pw/picGo/2021/3/4/175f28d03fc0a6787c95c90767dcf65c.png" alt="image-20210304091642152" /></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;此文记录项目中常用的密钥获取，例如GitHub的token，码云的token等。&lt;/p&gt;
&lt;h2 id=&quot;github的token&quot;&gt;&lt;a cl</summary>
      
    
    
    
    <category term="参考手册" scheme="https://www.antmoe.com/categories/%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>七、Docker可视化工具</title>
    <link href="https://www.antmoe.com/posts/1e88a1a3/"/>
    <id>https://www.antmoe.com/posts/1e88a1a3/</id>
    <published>2021-03-02T14:37:00.000Z</published>
    <updated>2021-03-02T14:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可视化工具"><a class="markdownIt-Anchor" href="#可视化工具"></a> 可视化工具</h2><p>可视化工具使用：<a href="https://documentation.portainer.io/quickstart/">https://www.portainer.io/installation/</a></p><ol><li><p>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull  portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker volume create portainer_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p <span class="token number">8000</span>:8000 -p <span class="token number">9000</span>:9000 --name<span class="token operator">=</span>portainer --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p><code>portainer_data</code>目录也可以自己去创建。启动成功后访问<code>http://localhost:9000</code>就会看到登录页面。</p></blockquote><p><img src="https://file.acs.pw/picGo/2021/3/2/b2459061a931bf07e74277af44545d3c.png" alt="image-20210302225124380" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;可视化工具&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可视化工具&quot;&gt;&lt;/a&gt; 可视化工具&lt;/h2&gt;
&lt;p&gt;可视化工具使用：&lt;a href=&quot;https://documentation.portainer.io/quickstart/</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker可视化" scheme="https://www.antmoe.com/tags/Docker%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>八、使用Docker-compose安装常用服务</title>
    <link href="https://www.antmoe.com/posts/89ed7188/"/>
    <id>https://www.antmoe.com/posts/89ed7188/</id>
    <published>2021-03-02T14:37:00.000Z</published>
    <updated>2021-04-07T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb"><a class="markdownIt-Anchor" href="#mongodb"></a> mongoDB</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mongo</span><span class="token punctuation">:</span>     <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo<span class="token punctuation">:</span>4.4.3    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> ./data/<span class="token punctuation">:</span>/data/db    <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"27017:27017"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MONGO_INITDB_ROOT_USERNAME</span><span class="token punctuation">:</span> root      <span class="token key atrule">MONGO_INITDB_ROOT_PASSWORD</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mongodb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mongodb&quot;&gt;&lt;/a&gt; mongoDB&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-yaml&quot; data-language=&quot;yaml&quot;</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker可视化" scheme="https://www.antmoe.com/tags/Docker%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>六、Docker-compose</title>
    <link href="https://www.antmoe.com/posts/10a27e5b/"/>
    <id>https://www.antmoe.com/posts/10a27e5b/</id>
    <published>2021-03-01T14:43:00.000Z</published>
    <updated>2021-03-01T14:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与卸载"><a class="markdownIt-Anchor" href="#安装与卸载"></a> 安装与卸载</h2><h3 id="linux系统"><a class="markdownIt-Anchor" href="#linux系统"></a> Linux系统</h3><p>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="linux手动下载"><a class="markdownIt-Anchor" href="#linux手动下载"></a> Linux手动下载</h3><ol><li><p>进入<a href="https://github.com/docker/compose/releases">GitHub</a>下载</p></li><li><p>将文件上传到服务器（Linux机器）</p></li><li><p>将文件放入<code>/usr/local/bin/</code>目录，并改名为<code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为其赋予可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="macos-windows"><a class="markdownIt-Anchor" href="#macos-windows"></a> macos、windows</h3><p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</p><h3 id="卸载"><a class="markdownIt-Anchor" href="#卸载"></a> 卸载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="docker-compose文件的基本格式"><a class="markdownIt-Anchor" href="#docker-compose文件的基本格式"></a> docker-compose文件的基本格式</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.2"</span> <span class="token comment"># 官方网址 https://docs.docker.com/compose/compose-file/</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">tomcat01</span><span class="token punctuation">:</span> <span class="token comment">#服务名称（id）</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat01 <span class="token comment"># 相当于run 的 --name</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像  相当于run image</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系  相当于run -p</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享  相当于run -v</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps01<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥     相当于run --networ</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">tomcat02</span><span class="token punctuation">:</span> <span class="token comment">#服务名称</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat02    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.0<span class="token punctuation">-</span>jre8 <span class="token comment">#使用哪个镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment">#用来完成host与容器的端口映射关系</span>      <span class="token punctuation">-</span> <span class="token string">"8081:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment">#完成宿主机与容器中目录数据卷共享</span>      <span class="token comment">#- /root/apps:/usr/local/tomcat/webapps #使用自定义路径映射</span>      <span class="token punctuation">-</span> tomcatwebapps02<span class="token punctuation">:</span>/usr/local/tomcat/webapps    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#代表当前服务使用哪个网络桥</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.32    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysqldata<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> mysqlconf<span class="token punctuation">:</span>/etc/mysql    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=root    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>5.0.10    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redisdata<span class="token punctuation">:</span>/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> hello    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">"redis-server --appendonly yes"</span> <span class="token comment">#run 镜像之后用来覆盖容器内容默认命令</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token comment">#声明上面服务所使用的自动创建的卷名</span>  <span class="token key atrule">tomcatwebapps01</span><span class="token punctuation">:</span> <span class="token comment">#声明指令的卷名  compose自动创建该卷名但是会在之前加入项目名</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>    <span class="token comment">#使用自定义卷名</span>      false       <span class="token comment">#true确定使用指定卷名  注意:一旦使用外部自定义卷名启动服务之前必须手动创建</span>  <span class="token key atrule">tomcatwebapps02</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqldata</span><span class="token punctuation">:</span>  <span class="token key atrule">mysqlconf</span><span class="token punctuation">:</span>  <span class="token key atrule">redisdata</span><span class="token punctuation">:</span><span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment">#定义服务用到桥</span>  <span class="token key atrule">hello</span><span class="token punctuation">:</span> <span class="token comment">#定义上面的服务用到的网桥名称 默认创建就是 bridge</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span>      <span class="token boolean important">true</span>   <span class="token comment">#使用外部指定网桥  注意:网桥必须存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose模板文件命令"><a class="markdownIt-Anchor" href="#docker-compose模板文件命令"></a> docker-compose模板文件命令</h2><h3 id="build"><a class="markdownIt-Anchor" href="#build"></a> build</h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span><span class="token key atrule">webapp</span><span class="token punctuation">:</span><span class="token key atrule">build</span><span class="token punctuation">:</span> ./dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p><p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./dir      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>alternate      <span class="token key atrule">args</span><span class="token punctuation">:</span>        <span class="token key atrule">buildno</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="command"><a class="markdownIt-Anchor" href="#command"></a> command</h3><p>覆盖容器启动后默认执行的命令。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">command</span><span class="token punctuation">:</span> echo "hello world"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="container_name"><a class="markdownIt-Anchor" href="#container_name"></a> container_name</h3><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">container_name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></blockquote><h3 id="depends_on"><a class="markdownIt-Anchor" href="#depends_on"></a> depends_on</h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db      <span class="token punctuation">-</span> redis  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></blockquote><h3 id="environment"><a class="markdownIt-Anchor" href="#environment"></a> environment</h3><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token key atrule">RACK_ENV</span><span class="token punctuation">:</span> development  <span class="token key atrule">SESSION_SECRET</span><span class="token punctuation">:</span><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> RACK_ENV=development  <span class="token punctuation">-</span> SESSION_SECRET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p><pre class="line-numbers language-none"><code class="language-none">y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="env_file"><a class="markdownIt-Anchor" href="#env_file"></a> env_file</h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">env_file: .envenv_file:  - ./common.env  - ./apps/web.env  - /opt/secrets.env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><pre class="line-numbers language-env" data-language="env"><code class="language-env"># common.env: Set development environmentPROG_ENV&#x3D;development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="healthcheck"><a class="markdownIt-Anchor" href="#healthcheck"></a> healthcheck</h3><p>通过命令检查容器是否健康运行。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>  <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"-f"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost"</span><span class="token punctuation">]</span>  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 1m30s  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="image"><a class="markdownIt-Anchor" href="#image"></a> image</h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu<span class="token key atrule">image</span><span class="token punctuation">:</span> orchardup/postgresql<span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="networks"><a class="markdownIt-Anchor" href="#networks"></a> networks</h3><p>配置容器连接的网络。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">some-service</span><span class="token punctuation">:</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> some<span class="token punctuation">-</span>network     <span class="token punctuation">-</span> other<span class="token punctuation">-</span>network<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">some-network</span><span class="token punctuation">:</span>  other<span class="token punctuation">-</span>network<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ports"><a class="markdownIt-Anchor" href="#ports"></a> ports</h3><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token string">"3000"</span> <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span> <span class="token punctuation">-</span> <span class="token string">"49100:22"</span> <span class="token punctuation">-</span> <span class="token string">"127.0.0.1:8001:8001"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p><h3 id="sysctls"><a class="markdownIt-Anchor" href="#sysctls"></a> sysctls</h3><p>配置容器内核参数。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sysctls</span><span class="token punctuation">:</span>  <span class="token key atrule">net.core.somaxconn</span><span class="token punctuation">:</span> <span class="token number">1024</span>  <span class="token key atrule">net.ipv4.tcp_syncookies</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">sysctls</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> net.core.somaxconn=1024  <span class="token punctuation">-</span> net.ipv4.tcp_syncookies=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ulimits"><a class="markdownIt-Anchor" href="#ulimits"></a> ulimits</h3><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ulimits</span><span class="token punctuation">:</span>  <span class="token key atrule">nproc</span><span class="token punctuation">:</span> <span class="token number">65535</span>  <span class="token key atrule">nofile</span><span class="token punctuation">:</span>    <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">20000</span>    <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">40000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="volumes"><a class="markdownIt-Anchor" href="#volumes"></a> volumes</h3><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> /var/lib/mysql <span class="token punctuation">-</span> cache/<span class="token punctuation">:</span>/tmp/cache <span class="token punctuation">-</span> ~/configs<span class="token punctuation">:</span>/etc/configs/<span class="token punctuation">:</span>ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">my_src</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  mysql_data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose-常用命令"><a class="markdownIt-Anchor" href="#docker-compose-常用命令"></a> docker-compose 常用命令</h2><h3 id="命令对象与格式"><a class="markdownIt-Anchor" href="#命令对象与格式"></a> 命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令选项"><a class="markdownIt-Anchor" href="#命令选项"></a> 命令选项</h3><div class="tabs" id="options"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#options-1">项目、配置文件</button></li><li class="tab"><button type="button" data-href="#options-2">网络特性</button></li><li class="tab"><button type="button" data-href="#options-3">日志输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="options-1"><ul><li><p><code>-f, --file FILE</code></p><p>指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p></li><li><p><code>-p, --project-name NAME</code></p><p>指定项目名称，默认将使用所在目录名称作为项目名。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-2"><ul><li><p><code>--x-networking</code></p><p>使用 Docker 的可拔插网络后端特性</p></li><li><p><code>--x-network-driver DRIVER</code></p><p>指定网络后端的驱动，默认为 <code>bridge</code></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="options-3"><ul><li><p><code>--verbose</code></p><p>输出更多调试信息。</p></li><li><p><code>-v, --version</code></p><p>打印版本并退出。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="命令使用说明"><a class="markdownIt-Anchor" href="#命令使用说明"></a> 命令使用说明</h3><h3 id="up"><a class="markdownIt-Anchor" href="#up"></a> up</h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><blockquote><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p><em>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</em></p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></blockquote><h3 id="down"><a class="markdownIt-Anchor" href="#down"></a> down</h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p><h3 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec</h3><p>进入指定的容器。</p><h3 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> ps</h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。<code>-q</code>可以只打印容器的id信息</p><h3 id="restart"><a class="markdownIt-Anchor" href="#restart"></a> restart</h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h3 id="rm"><a class="markdownIt-Anchor" href="#rm"></a> rm</h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h3 id="start"><a class="markdownIt-Anchor" href="#start"></a> start</h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h3 id="stop"><a class="markdownIt-Anchor" href="#stop"></a> stop</h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top"><a class="markdownIt-Anchor" href="#top"></a> top</h3><p>查看各个服务容器内运行的进程。</p><h3 id="pause"><a class="markdownIt-Anchor" href="#pause"></a> pause</h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p><p>暂停服务</p><h3 id="unpause"><a class="markdownIt-Anchor" href="#unpause"></a> unpause</h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装与卸载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装与卸载&quot;&gt;&lt;/a&gt; 安装与卸载&lt;/h2&gt;
&lt;h3 id=&quot;linux系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux系统&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker-compose" scheme="https://www.antmoe.com/tags/Docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>五、Dockerfile</title>
    <link href="https://www.antmoe.com/posts/342193d2/"/>
    <id>https://www.antmoe.com/posts/342193d2/</id>
    <published>2021-02-28T13:02:00.000Z</published>
    <updated>2021-02-28T13:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是dockerfile"><a class="markdownIt-Anchor" href="#什么是dockerfile"></a> 什么是Dockerfile</h2><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/e4abc84dc8e1f3e59809e40c8eefcda1.png" alt="image-20200404111908085" /></p><p>通过架构图可以看出通过DockerFile可以直接构建镜像</p><h2 id="dockerfile解析过程"><a class="markdownIt-Anchor" href="#dockerfile解析过程"></a> Dockerfile解析过程</h2><p><img src="https://file.acs.pw/picGo/2021/2/28/e4b3efc58f84339e842085b423343229.png" alt="image-20200603181253804" /></p><h2 id="dockerfile的保留命令"><a class="markdownIt-Anchor" href="#dockerfile的保留命令"></a> Dockerfile的保留命令</h2><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><table><thead><tr><th style="text-align:center">保留字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>FROM</strong></td><td style="text-align:center"><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td style="text-align:center"><strong>RUN</strong></td><td style="text-align:center"><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td style="text-align:center"><strong>EXPOSE</strong></td><td style="text-align:center"><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td style="text-align:center"><strong>WORKDIR</strong></td><td style="text-align:center"><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td style="text-align:center"><strong>ENV</strong></td><td style="text-align:center"><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td style="text-align:center"><strong>ADD</strong></td><td style="text-align:center"><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td style="text-align:center"><strong>COPY</strong></td><td style="text-align:center"><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td style="text-align:center"><strong>VOLUME</strong></td><td style="text-align:center"><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td style="text-align:center"><strong>CMD</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td style="text-align:center"><strong>ENTRYPOINT</strong></td><td style="text-align:center"><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h3 id="from-命令"><a class="markdownIt-Anchor" href="#from-命令"></a> FROM 命令</h3><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM  &lt;image&gt;FROM  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latestFROM  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="run-命令"><a class="markdownIt-Anchor" href="#run-命令"></a> RUN 命令</h3><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">RUN &lt;command&gt; (shell form, the command is run in a shell, which by default is &#x2F;bin&#x2F;sh -c on Linux or cmd &#x2F;S &#x2F;C on Windows)RUN echo helloRUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (exec form)RUN [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="expose-命令"><a class="markdownIt-Anchor" href="#expose-命令"></a> EXPOSE 命令</h3><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">EXPOSE 80&#x2F;tcp  如果没有显示指定则默认暴露都是tcpEXPOSE 80&#x2F;udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="cmd-命令"><a class="markdownIt-Anchor" href="#cmd-命令"></a> CMD 命令</h3><ul><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (exec form, this is the preferred form)CMD [&quot;param1&quot;,&quot;param2&quot;] (as default parameters to ENTRYPOINT)CMD command param1 param2 (shell form)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="workdir-命令"><a class="markdownIt-Anchor" href="#workdir-命令"></a> WORKDIR 命令</h3><ul><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">WORKDIR &#x2F;path&#x2F;to&#x2F;workdirWORKDIR &#x2F;aWORKDIR bWORKDIR c&#96;注意:WORKDIR指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="env-命令"><a class="markdownIt-Anchor" href="#env-命令"></a> ENV 命令</h3><ul><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV &lt;key&gt; &lt;value&gt;ENV &lt;key&gt;&#x3D;&lt;value&gt; ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="add-命令"><a class="markdownIt-Anchor" href="#add-命令"></a> ADD 命令</h3><ul><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ADD hom* &#x2F;mydir&#x2F;       通配符添加多个文件ADD hom?.txt &#x2F;mydir&#x2F;   通配符添加ADD test.txt relativeDir&#x2F;  可以指定相对路径ADD test.txt &#x2F;absoluteDir&#x2F; 也可以指定绝对路径ADD url <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="copy-命令"><a class="markdownIt-Anchor" href="#copy-命令"></a> COPY 命令</h3><ul><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY src destCOPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="volume-命令"><a class="markdownIt-Anchor" href="#volume-命令"></a> VOLUME 命令</h3><ul><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">VOLUME [&quot;&#x2F;data&quot;]VOLUME &#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="entrypoint命令"><a class="markdownIt-Anchor" href="#entrypoint命令"></a> ENTRYPOINT命令</h3><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">  [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br />CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是dockerfile&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是dockerfile&quot;&gt;&lt;/a&gt; 什么是Dockerfile&lt;/h2&gt;
&lt;p&gt;Dockerfile可以认为是&lt;strong&gt;Docker镜像的描述文件，是由</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://www.antmoe.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>四、Docker安装常用服务及常用操作</title>
    <link href="https://www.antmoe.com/posts/69498e0a/"/>
    <id>https://www.antmoe.com/posts/69498e0a/</id>
    <published>2021-02-27T15:17:00.000Z</published>
    <updated>2021-02-27T15:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何安装"><a class="markdownIt-Anchor" href="#如何安装"></a> 如何安装</h2><p>下载镜像需要在<a href="https://hub.docker.com">dockerHub</a>中进行搜索，搜索出需要安装的镜像后可以通过其项目提供的Readme进行安装与使用。一般情况下的步骤</p><ol><li>确定版本</li><li>拉取</li></ol><h2 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装MySQL</h2><blockquote><p>以5.7.33版本为例</p></blockquote><ol><li><p>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mysql:5.7.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动镜像</p><p>mysql服务内置了环境变量，需要在启动时进行指定。</p><blockquote><p>将<code>/root/mysql</code>映射到容器的数据库文件，从而保证数据的安全。</p></blockquote><ul><li><p><code>MYSQL_ROOT_PASSWORD</code></p><p>root用户的密码</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root -p <span class="token number">3306</span>:3306 -d -v /root/mysql:/var/lib/mysql  mysql:5.7.33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>上面命令会启动MySQL服务并设置root密码为<code>root</code>，监听端口为3306，并将docker容器内的数据文件与本机<code>/root/mysql</code>进行关联。</p></blockquote></li><li><p>其他命令</p><ul><li><p>进入MySQL服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it 容器名称<span class="token operator">|</span>容器id <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>外部查看MySQL日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker logs 容器名称<span class="token operator">|</span>容器id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将MySQL数据库备份为sql文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出全部数据</span>docker <span class="token builtin class-name">exec</span> mysql<span class="token operator">|</span>容器id <span class="token function">sh</span> -c <span class="token string">'exec mysqldump --all-databases -uroot -p"<span class="token variable">$MYSQL_ROOT_PASSWORD</span>"'</span> <span class="token operator">></span> /root/all-databases.sql <span class="token comment"># 导出指定库数据</span>docker <span class="token builtin class-name">exec</span> mysql <span class="token function">sh</span> -c <span class="token string">'exec mysqldump --databases 库表 -uroot -p"<span class="token variable">$MYSQL_ROOT_PASSWORD</span>"'</span> <span class="token operator">></span> /root/all-databases.sql<span class="token comment"># 导出指定库数据不要数据</span>docker <span class="token builtin class-name">exec</span> mysql <span class="token function">sh</span> -c <span class="token string">'exec mysqldump --no-data --databases 库表 -uroot -p"<span class="token variable">$MYSQL_ROOT_PASSWORD</span>"'</span> <span class="token operator">></span> /root/all-databases.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行sql文件到MySQL中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -i mysql <span class="token function">sh</span> -c <span class="token string">'exec mysql -uroot - p"<span class="token variable">$MYSQL_ROOT_PASSWORD</span>"'</span> <span class="token operator">&lt;</span> /root/xxx.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h2 id="安装mongodb数据库"><a class="markdownIt-Anchor" href="#安装mongodb数据库"></a> 安装MongoDB数据库</h2><ol><li><p>拉取镜像（最新）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p <span class="token number">27017</span>:27017 -v /root/mongo/data:/data/db --name mymongo mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>手动配置用户名密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span>docker <span class="token builtin class-name">exec</span> -it mymongo /bin/bashmongo<span class="token comment"># 选择 admin库</span>use admin<span class="token comment"># 运行命令</span>db.createUser<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>user:<span class="token string">"root"</span>,pwd:<span class="token string">"root"</span>,roles:<span class="token punctuation">[</span><span class="token punctuation">&#123;</span>role:<span class="token string">'root'</span>,db:<span class="token string">'admin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="安装redis服务"><a class="markdownIt-Anchor" href="#安装redis服务"></a> 安装redis服务</h2><ol><li><p>下载镜像（最版版本）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动容器并挂载到本地，开启持久化存储</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name redis -v /root/redis/data:/data -p <span class="token number">6379</span>:6379 -d redis redis-server --appendonly <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义配置文件</p><p>在<code>/root/redis</code>目录下新建<code>redis.conf</code>文件（酌情新建即可），然后写入如下内容。（推荐下载使用对应版本的配置文件）</p><pre class="line-numbers language-none"><code class="language-none">#  开启远程权限bind 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后加载配置启动并开启持久化数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name redis -v /root/redis/data:/data -v /root/redis/config:/usr/local/etc/redis/redis.conf -p <span class="token number">6379</span>:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  --appendonly <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="安装tomcat"><a class="markdownIt-Anchor" href="#安装tomcat"></a> 安装tomcat</h2><ol><li><p>下载tomcat镜像（最新版本）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行tomcat镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">8080</span>:8080 -d --name mytomcat tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入tomcat镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it mytomcat /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将webapps目录挂载在外部</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">8080</span>:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="安装nginx"><a class="markdownIt-Anchor" href="#安装nginx"></a> 安装Nginx</h2><ol><li><p>下载镜像（最新）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动Nginx容器</p><blockquote><p>nginx配置文件目录：<code>/etc/nginx/conf.d</code></p><p>html静态文件目录：<code>/usr/share/nginx/html</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">80</span>:80 --name nginx01 -d -v /root/nginx/conf.d:/etc/nginx/conf.d -v /root/nginx/html:/usr/share/nginx/html  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>启动时会将镜像内文件与宿主机进行关联，因此如果宿主机没有配置文件或html文件时会导致nginx也会丢失默认配置和html页面</p></blockquote><p>默认配置</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token keyword">listen</span>  <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>  <span class="token comment">#charset koi8-r;</span>  <span class="token comment">#access_log  /var/log/nginx/host.access.log  main;</span>  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">#error_page  404              /404.html;</span>  <span class="token comment"># redirect server error pages to the static page /50x.html</span>  <span class="token comment">#</span>  <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>  <span class="token comment">#</span>  <span class="token comment">#location ~ \.php$ &#123;</span>  <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>  <span class="token comment">#&#125;</span>  <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>  <span class="token comment">#</span>  <span class="token comment">#location ~ \.php$ &#123;</span>  <span class="token comment">#    root           html;</span>  <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>  <span class="token comment">#    fastcgi_index  index.php;</span>  <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>  <span class="token comment">#    include        fastcgi_params;</span>  <span class="token comment">#&#125;</span>  <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>  <span class="token comment"># concurs with nginx's one</span>  <span class="token comment">#</span>  <span class="token comment">#location ~ /\.ht &#123;</span>  <span class="token comment">#    deny  all;</span>  <span class="token comment">#&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it nginx01 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="反向代理宿主机服务"><a class="markdownIt-Anchor" href="#反向代理宿主机服务"></a> 反向代理宿主机服务</h3><ol><li><p>在安装Docker的时候，会在宿主机安装一个虚拟网关 docker0，查询docker0的IP地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr show docker0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置docker上安装的nginx</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">server_name</span> xiaokang<span class="token punctuation">.</span>me<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># 设置最大允许上传单个的文件大小</span>            <span class="token keyword">client_max_body_size</span> <span class="token number">100</span>m<span class="token punctuation">;</span>            <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>            <span class="token comment"># 反向代理到 tomcat</span>            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3002</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新启动nginx容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何安装&quot;&gt;&lt;/a&gt; 如何安装&lt;/h2&gt;
&lt;p&gt;下载镜像需要在&lt;a href=&quot;https://hub.docker.com&quot;&gt;dockerHub&lt;/a&gt;中进行搜索，搜索出需要安装</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://www.antmoe.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>三、Docker通信与数据卷</title>
    <link href="https://www.antmoe.com/posts/9e4e1616/"/>
    <id>https://www.antmoe.com/posts/9e4e1616/</id>
    <published>2021-02-27T14:52:00.000Z</published>
    <updated>2021-02-27T14:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker网络配置"><a class="markdownIt-Anchor" href="#docker网络配置"></a> docker网络配置</h2><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="https://file.acs.pw/picGo/2021/2/28/712de8374224a12e62d7e095803b4d93.png" alt="image-20201125105847896" /></p><h2 id="相关命令"><a class="markdownIt-Anchor" href="#相关命令"></a> 相关命令</h2><ol><li><p>查看默认网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除网桥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network <span class="token function">rm</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除没有使用的网桥</p><pre class="line-numbers language-none"><code class="language-none">docker network prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="数据卷"><a class="markdownIt-Anchor" href="#数据卷"></a> 数据卷</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><h2 id="相关命令-2"><a class="markdownIt-Anchor" href="#相关命令-2"></a> 相关命令</h2><ol><li><p>创建数据卷</p><p><code>docker volume create my-vol</code></p></li><li><p>查看数据卷</p><p><code>docker volume inspect my-vol</code></p></li><li><p>挂在数据卷</p><p><code>docker run -d -P --name web -v my-vol:/usr/share/nginx/html nginx</code></p></li><li><p>删除数据卷</p><p><code>docker volume rm my-vol</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker网络配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#docker网络配置&quot;&gt;&lt;/a&gt; docker网络配置&lt;/h2&gt;
&lt;p&gt;当 Docker 启动时，会自动在主机上创建一个 &lt;code&gt;docker0&lt;/code&gt; 虚拟</summary>
      
    
    
    
    <category term="Docker" scheme="https://www.antmoe.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://www.antmoe.com/tags/Docker/"/>
    
  </entry>
  
</feed>
