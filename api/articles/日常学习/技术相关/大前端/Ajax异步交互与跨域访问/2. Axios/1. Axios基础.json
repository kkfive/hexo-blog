{"title":"一、Axios基础","slug":"日常学习/技术相关/大前端/Ajax异步交互与跨域访问/2. Axios/1. Axios基础","date":"2020-08-23T08:03:01.000Z","updated":"2022-02-21T06:22:27.472Z","comments":true,"path":"api/articles/日常学习/技术相关/大前端/Ajax异步交互与跨域访问/2. Axios/1. Axios基础.json","excerpt":null,"covers":["https://rmt.ladydaily.com/fetch/tzk/storage/20200823164208.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20200823165044.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20200823173751.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20200823175300.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20200823180210.png?w=1280&amp;fmt=jpg","https://rmt.ladydaily.com/fetch/tzk/storage/20200823180221.png?w=1280&amp;fmt=jpg"],"content":"<p>参考文档：<a href=\"http://www.axios-js.com/zh-cn/docs/\">http://www.axios-js.com/zh-cn/docs/</a></p>\n<h2 id=\"axios库基本概念\"><a class=\"markdownIt-Anchor\" href=\"#axios库基本概念\"></a> axios库基本概念</h2>\n<p>它是一个类库，基于promise管理的Ajax库</p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823164208.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823164201201\" /></p>\n<p>关于<code>get</code>、<code>post</code>方法的参数</p>\n<ul>\n<li>\n<p>url</p>\n<p>第一个参数，请求的url地址</p>\n</li>\n<li>\n<p>options</p>\n<p>对象。</p>\n</li>\n</ul>\n<h2 id=\"get方法\"><a class=\"markdownIt-Anchor\" href=\"#get方法\"></a> get方法</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823165044.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823165044787\" /></p>\n<blockquote>\n<p>get请求会把params中的键值对拼接成urlencode格式的字符串，然后以问号传递参数的形式，传递给服务器。</p>\n</blockquote>\n<h2 id=\"post方法\"><a class=\"markdownIt-Anchor\" href=\"#post方法\"></a> post方法</h2>\n<p>post方法与get稍有些不同，其第二个参数直接传入对象即代表请求数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>配置项中传递的内容都相当于请求的参数，传递的内容格式为x-www-form-urlencoded</p>\n</blockquote>\n<h2 id=\"关于请求返回的数据\"><a class=\"markdownIt-Anchor\" href=\"#关于请求返回的数据\"></a> 关于请求返回的数据</h2>\n<p>请求数据返回的是一个对象。</p>\n<ul>\n<li>\n<p>config</p>\n<p>基于axios发送请求的时候做的配置项</p>\n</li>\n<li>\n<p>data</p>\n<p>从服务器获取的响应主体内容</p>\n</li>\n<li>\n<p>headers</p>\n<p>从服务器获取的响应的头信息</p>\n</li>\n<li>\n<p>request</p>\n<p>创建的Ajax实例</p>\n</li>\n<li>\n<p>status</p>\n<p>状态码</p>\n</li>\n<li>\n<p>statusText</p>\n<p>状态码的描述</p>\n</li>\n</ul>\n<h2 id=\"axios的请求合并以及参数配置\"><a class=\"markdownIt-Anchor\" href=\"#axios的请求合并以及参数配置\"></a> axios的请求合并以及参数配置</h2>\n<p>同时请求多个，只有当这几个请求同时成功才做响应。其返回结果为一个数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sendArry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>sendArry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sendArry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>sendArry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resA<span class=\"token punctuation\">,</span> resB</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 传入参数分别对应请求的结果</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823173751.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823173751707\" /></p>\n<h2 id=\"通过一个参数配置项\"><a class=\"markdownIt-Anchor\" href=\"#通过一个参数配置项\"></a> 通过一个参数配置项</h2>\n<p>类似于Ajax，传入一个对象。在对象中写一些请求配置即可。</p>\n<p>GET与POST相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823175300.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823175300170\" /></p>\n<h2 id=\"请求配置\"><a class=\"markdownIt-Anchor\" href=\"#请求配置\"></a> 请求配置</h2>\n<p>常用的修改默认配置的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://domain.com'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>自定义成功失败规则</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(2|3)\\d&#123;2&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token comment\">// default</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>以上表示，当返回状态码为2xx或3xx都为成功，则都会执行then方法。</p>\n<p>设置默认超时时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">3300</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置默认请求头</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    key<span class=\"token operator\">:</span><span class=\"token string\">'value'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>设置post请求中基于请求主体向服务器发送的内容格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 设置请求头</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 修改数据格式</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">transformResponse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>attr<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>data<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>默认为RAW，项目中常用的是<code>x-www-form-urlencoded</code></p>\n<p>设置响应拦截器</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 响应成功时</span>\n    <span class=\"token comment\">// 如下配置表示 只返回响应返回来的data即响应主体</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">// 响应成功时</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置默认baseURL后，在发送请求则无需写完整地址；例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://v1.hitokoto.cn'</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/?c=b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823180210.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823180210164\" /></p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823180221.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823180221294\" /></p>\n<p>完整的请求配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// `url` 是用于请求的服务器 URL</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `method` 是创建请求时使用的方法</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span>\n  <span class=\"token comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span>\n  <span class=\"token comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span>\n  <span class=\"token comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span>\n  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>\n  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `headers` 是即将被发送的自定义请求头</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token operator\">:</span> <span class=\"token string\">'XMLHttpRequest'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `params` 是即将与请求一起发送的 URL 参数</span>\n  <span class=\"token comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">12345</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span>\n  <span class=\"token comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>\n  <span class=\"token function-variable function\">paramsSerializer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>arrayFormat<span class=\"token operator\">:</span> <span class=\"token string\">'brackets'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `data` 是作为请求主体被发送的数据</span>\n  <span class=\"token comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span>\n  <span class=\"token comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span>\n  <span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>\n  <span class=\"token comment\">// - 浏览器专属：FormData, File, Blob</span>\n  <span class=\"token comment\">// - Node 专属： Stream</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span>\n  <span class=\"token comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span>\n  <span class=\"token comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span>\n  <span class=\"token function-variable function\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n <span class=\"token comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span>\n  <span class=\"token comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">'janedoe'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">'s00pers3cret'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span>\n  responseType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `responseEncoding` indicates encoding to use for decoding responses</span>\n  <span class=\"token comment\">// Note: Ignored for `responseType` of 'stream' or client-side requests</span>\n  responseEncoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n   <span class=\"token comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span>\n  xsrfCookieName<span class=\"token operator\">:</span> <span class=\"token string\">'XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> <span class=\"token string\">'X-XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n   <span class=\"token comment\">// `onUploadProgress` 允许为上传处理进度事件</span>\n  <span class=\"token function-variable function\">onUploadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Do whatever you want with the native progress event</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `onDownloadProgress` 允许为下载处理进度事件</span>\n  <span class=\"token function-variable function\">onDownloadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对原生进度事件的处理</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span>\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span>\n  <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span>\n  <span class=\"token comment\">// 如果设置为0，将不会 follow 任何重定向</span>\n  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `socketPath` defines a UNIX Socket to be used in node.js.</span>\n  <span class=\"token comment\">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span>\n  <span class=\"token comment\">// Only either `socketPath` or `proxy` can be specified.</span>\n  <span class=\"token comment\">// If both are specified, `socketPath` is used.</span>\n  socketPath<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span>\n  <span class=\"token comment\">// `keepAlive` 默认没有启用</span>\n  httpAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">http<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">https<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 'proxy' 定义代理服务器的主机名称和端口</span>\n  <span class=\"token comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span>\n  <span class=\"token comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">'mikeymike'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">'rapunz3l'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `cancelToken` 指定用于取消请求的 cancel token</span>\n  <span class=\"token comment\">// （查看后面的 Cancellation 这节了解更多）</span>\n  cancelToken<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","more":"<p>参考文档：<a href=\"http://www.axios-js.com/zh-cn/docs/\">http://www.axios-js.com/zh-cn/docs/</a></p>\n<h2 id=\"axios库基本概念\"><a class=\"markdownIt-Anchor\" href=\"#axios库基本概念\"></a> axios库基本概念</h2>\n<p>它是一个类库，基于promise管理的Ajax库</p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823164208.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823164201201\" /></p>\n<p>关于<code>get</code>、<code>post</code>方法的参数</p>\n<ul>\n<li>\n<p>url</p>\n<p>第一个参数，请求的url地址</p>\n</li>\n<li>\n<p>options</p>\n<p>对象。</p>\n</li>\n</ul>\n<h2 id=\"get方法\"><a class=\"markdownIt-Anchor\" href=\"#get方法\"></a> get方法</h2>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823165044.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823165044787\" /></p>\n<blockquote>\n<p>get请求会把params中的键值对拼接成urlencode格式的字符串，然后以问号传递参数的形式，传递给服务器。</p>\n</blockquote>\n<h2 id=\"post方法\"><a class=\"markdownIt-Anchor\" href=\"#post方法\"></a> post方法</h2>\n<p>post方法与get稍有些不同，其第二个参数直接传入对象即代表请求数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>配置项中传递的内容都相当于请求的参数，传递的内容格式为x-www-form-urlencoded</p>\n</blockquote>\n<h2 id=\"关于请求返回的数据\"><a class=\"markdownIt-Anchor\" href=\"#关于请求返回的数据\"></a> 关于请求返回的数据</h2>\n<p>请求数据返回的是一个对象。</p>\n<ul>\n<li>\n<p>config</p>\n<p>基于axios发送请求的时候做的配置项</p>\n</li>\n<li>\n<p>data</p>\n<p>从服务器获取的响应主体内容</p>\n</li>\n<li>\n<p>headers</p>\n<p>从服务器获取的响应的头信息</p>\n</li>\n<li>\n<p>request</p>\n<p>创建的Ajax实例</p>\n</li>\n<li>\n<p>status</p>\n<p>状态码</p>\n</li>\n<li>\n<p>statusText</p>\n<p>状态码的描述</p>\n</li>\n</ul>\n<h2 id=\"axios的请求合并以及参数配置\"><a class=\"markdownIt-Anchor\" href=\"#axios的请求合并以及参数配置\"></a> axios的请求合并以及参数配置</h2>\n<p>同时请求多个，只有当这几个请求同时成功才做响应。其返回结果为一个数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sendArry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>sendArry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sendArry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>sendArry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resA<span class=\"token punctuation\">,</span> resB</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 传入参数分别对应请求的结果</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823173751.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823173751707\" /></p>\n<h2 id=\"通过一个参数配置项\"><a class=\"markdownIt-Anchor\" href=\"#通过一个参数配置项\"></a> 通过一个参数配置项</h2>\n<p>类似于Ajax，传入一个对象。在对象中写一些请求配置即可。</p>\n<p>GET与POST相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> <span class=\"token string\">'https://v1.hitokoto.cn/'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        c<span class=\"token operator\">:</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823175300.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823175300170\" /></p>\n<h2 id=\"请求配置\"><a class=\"markdownIt-Anchor\" href=\"#请求配置\"></a> 请求配置</h2>\n<p>常用的修改默认配置的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://domain.com'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>自定义成功失败规则</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(2|3)\\d&#123;2&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token comment\">// default</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>以上表示，当返回状态码为2xx或3xx都为成功，则都会执行then方法。</p>\n<p>设置默认超时时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">3300</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>设置默认请求头</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    key<span class=\"token operator\">:</span><span class=\"token string\">'value'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>设置post请求中基于请求主体向服务器发送的内容格式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 设置请求头</span>\naxios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 修改数据格式</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">transformResponse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> attr <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            str <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>attr<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>data<span class=\"token punctuation\">[</span>attr<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;</span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>默认为RAW，项目中常用的是<code>x-www-form-urlencoded</code></p>\n<p>设置响应拦截器</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 响应成功时</span>\n    <span class=\"token comment\">// 如下配置表示 只返回响应返回来的data即响应主体</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">// 响应成功时</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>设置默认baseURL后，在发送请求则无需写完整地址；例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://v1.hitokoto.cn'</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/?c=b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823180210.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823180210164\" /></p>\n<p><img src=\"https://rmt.ladydaily.com/fetch/tzk/storage/20200823180221.png?w=1280&amp;fmt=jpg\" alt=\"image-20200823180221294\" /></p>\n<p>完整的请求配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// `url` 是用于请求的服务器 URL</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `method` 是创建请求时使用的方法</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span>\n  <span class=\"token comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span>\n  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span>\n  <span class=\"token comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span>\n  <span class=\"token comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span>\n  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span>\n  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对 data 进行任意转换处理</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `headers` 是即将被发送的自定义请求头</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token operator\">:</span> <span class=\"token string\">'XMLHttpRequest'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `params` 是即将与请求一起发送的 URL 参数</span>\n  <span class=\"token comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">12345</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span>\n  <span class=\"token comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span>\n  <span class=\"token function-variable function\">paramsSerializer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>arrayFormat<span class=\"token operator\">:</span> <span class=\"token string\">'brackets'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `data` 是作为请求主体被发送的数据</span>\n  <span class=\"token comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span>\n  <span class=\"token comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span>\n  <span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span>\n  <span class=\"token comment\">// - 浏览器专属：FormData, File, Blob</span>\n  <span class=\"token comment\">// - Node 专属： Stream</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span>\n  <span class=\"token comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span>\n  <span class=\"token comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span>\n  <span class=\"token function-variable function\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n <span class=\"token comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span>\n  <span class=\"token comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span>\n  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    username<span class=\"token operator\">:</span> <span class=\"token string\">'janedoe'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">:</span> <span class=\"token string\">'s00pers3cret'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span>\n  responseType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `responseEncoding` indicates encoding to use for decoding responses</span>\n  <span class=\"token comment\">// Note: Ignored for `responseType` of 'stream' or client-side requests</span>\n  responseEncoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n   <span class=\"token comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span>\n  xsrfCookieName<span class=\"token operator\">:</span> <span class=\"token string\">'XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span>\n  xsrfHeaderName<span class=\"token operator\">:</span> <span class=\"token string\">'X-XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n   <span class=\"token comment\">// `onUploadProgress` 允许为上传处理进度事件</span>\n  <span class=\"token function-variable function\">onUploadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Do whatever you want with the native progress event</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `onDownloadProgress` 允许为下载处理进度事件</span>\n  <span class=\"token function-variable function\">onDownloadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 对原生进度事件的处理</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n   <span class=\"token comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span>\n  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span>\n  <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span>\n  <span class=\"token comment\">// 如果设置为0，将不会 follow 任何重定向</span>\n  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `socketPath` defines a UNIX Socket to be used in node.js.</span>\n  <span class=\"token comment\">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span>\n  <span class=\"token comment\">// Only either `socketPath` or `proxy` can be specified.</span>\n  <span class=\"token comment\">// If both are specified, `socketPath` is used.</span>\n  socketPath<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span>\n\n  <span class=\"token comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span>\n  <span class=\"token comment\">// `keepAlive` 默认没有启用</span>\n  httpAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">http<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  httpsAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">https<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 'proxy' 定义代理服务器的主机名称和端口</span>\n  <span class=\"token comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span>\n  <span class=\"token comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    port<span class=\"token operator\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span>\n    auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">'mikeymike'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">'rapunz3l'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// `cancelToken` 指定用于取消请求的 cancel token</span>\n  <span class=\"token comment\">// （查看后面的 Cancellation 这节了解更多）</span>\n  cancelToken<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","categories":[{"name":"大前端","path":"api/categories/大前端.json"},{"name":"Ajax异步交互与跨域访问","path":"api/categories/Ajax异步交互与跨域访问.json"},{"name":"Axios","path":"api/categories/Axios.json"}],"tags":[{"name":"Axios","path":"api/tags/Axios.json"}]}